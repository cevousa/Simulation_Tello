"""
Field Manager - Main Controller
‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""

from .simulation_manager import SimulationManager
from .field_config import FieldConfig
from .basic_objects import BasicObjectsCreator
from .pingpong_system import PingPongSystem
from .field_parser import FieldParser

class FieldManager:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏≤‡∏° Drone Odyssey Challenge"""
    
    def __init__(self):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á components
        self.sim_manager = SimulationManager()
        self.config = FieldConfig()
        self.objects_creator = BasicObjectsCreator(self.sim_manager, self.config)
        self.pingpong_system = PingPongSystem(self.sim_manager, self.config)
        self.parser = FieldParser(self.config)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏°
        self.field_objects = []
        
        print("üèüÔ∏è Drone Odyssey Challenge Field Creator (Modular)")
        print(f"üìè Field: {self.config.field_size}√ó{self.config.field_size}m")
        print(f"üî≤ Tiles: {self.config.tile_size*100:.0f}√ó{self.config.tile_size*100:.0f}cm, Gap: {self.config.tile_gap*100:.0f}cm")
    
    # ===============================================================
    # BASIC FIELD OPERATIONS
    # ===============================================================
    
    def start_simulation(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        return self.sim_manager.start_simulation()
    
    def stop_simulation(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        return self.sim_manager.stop_simulation()
    
    def clear_field(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°"""
        if self.field_objects:
            handles_to_remove = []
            
            for obj in self.field_objects:
                if 'handle' in obj:
                    handles_to_remove.append(obj['handle'])
            
            if handles_to_remove:
                self.sim_manager.remove_objects(handles_to_remove)
                print(f"üóëÔ∏è Cleared {len(handles_to_remove)} field objects")
            
            self.field_objects.clear()
        else:
            print("üóëÔ∏è Cleared 0 field objects")
    
    def list_field_objects(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°"""
        if not self.field_objects:
            print("üì≠ No field objects found")
            return
        
        object_types = {}
        for obj in self.field_objects:
            obj_type = obj['type']
            if obj_type not in object_types:
                object_types[obj_type] = []
            object_types[obj_type].append(obj)
        
        print(f"\nüèüÔ∏è Field objects summary ({len(self.field_objects)} total):")
        for obj_type, objects in object_types.items():
            print(f"  üìã {obj_type.title().replace('_', ' ')}: {len(objects)} objects")
            for obj in objects[:3]:
                if 'grid' in obj:
                    print(f"    - {obj.get('name', 'Unnamed')} at {obj['grid']}")
                else:
                    print(f"    - {obj.get('name', 'Unnamed')}")
            if len(objects) > 3:
                print(f"    - ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(objects)-3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print()
    
    # ===============================================================
    # FLOOR CREATION
    # ===============================================================
    
    def create_tiled_floor(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á 5√ó5"""
        print("üü´ Creating tiled floor (5√ó5 grid)...")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ physics ‡∏Å‡πà‡∏≠‡∏ô
        self.sim_manager.setup_physics_engine(self.config)
        
        floor_count = 0
        for row in range(5):
            for col in range(5):
                tile_info = self.objects_creator.create_floor_tile(col, row, floor_count)
                if tile_info:
                    self.field_objects.append(tile_info)
                    floor_count += 1
        
        print(f"‚úÖ Created {floor_count} floor tiles")
        return floor_count > 0
    
    # ===============================================================
    # STRING INPUT FIELD CREATION
    # ===============================================================
    
    def create_field_from_string(self, field_string):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏≤‡∏Å string pattern"""
        try:
            print("üé® Parsing field string...")
            field_data = self.parser.parse_field_string(field_string)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            validation = self.parser.validate_field_layout(field_data)
            if not validation['valid']:
                print("‚ùå Field validation failed:")
                for error in validation['errors']:
                    print(f"  - {error}")
                return False
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if validation['warnings']:
                print("‚ö†Ô∏è Warnings:")
                for warning in validation['warnings']:
                    print(f"  - {warning}")
            
            print("üèóÔ∏è Creating field objects...")
            created_count = 0
            
            for item in field_data:
                grid_x, grid_y = item['grid_x'], item['grid_y']
                code = item['code']
                position = item['position']
                
                print(f"  Creating '{code}' at {position}")
                
                parsed = self.parser.parse_cell_code(code)
                obj_info = self._create_object_from_parsed(grid_x, grid_y, parsed)
                
                if obj_info:
                    if isinstance(obj_info, list):
                        self.field_objects.extend(obj_info)
                        created_count += len(obj_info)
                    else:
                        self.field_objects.append(obj_info)
                        created_count += 1
            
            print(f"‚úÖ Created {created_count} objects from string")
            return created_count > 0
            
        except Exception as e:
            print(f"‚ùå Error creating field from string: {e}")
            return False
    
    def _create_object_from_parsed(self, grid_x, grid_y, parsed):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        obj_type = parsed['type']
        
        if obj_type == 'empty':
            return None
        
        elif obj_type == 'obstacle_box':
            return self.objects_creator.create_obstacle_box(
                grid_x, grid_y, 
                parsed['height_cm'], 
                parsed.get('texture_side')
            )
        
        elif obj_type == 'mission_pad':
            return self.objects_creator.create_mission_pad(
                grid_x, grid_y, 
                parsed['pad_number']
            )
        
        elif obj_type == 'predefined_fence':
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡πÅ‡∏ö‡∏ö predefined (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©) + ‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á
            objects = []
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©
            fence_objects = self.pingpong_system.create_predefined_fence()
            if fence_objects:
                objects.extend(fence_objects)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà A3
            balls = self.pingpong_system.create_pingpong_balls(0, 2, 8)  # A3 area
            if balls:
                objects.extend(balls)
            
            return objects if objects else None
        
        elif obj_type == 'fence_zone':
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            objects = []
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡∏£‡∏≠‡∏ö‡πÜ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            fence_segments = self._create_fence_segments_for_position(grid_x, grid_y)
            fence_objects = self.pingpong_system.create_fence_boundary(fence_segments)
            
            if fence_objects:
                objects.extend(fence_objects)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if parsed['has_balls']:
                balls = self.pingpong_system.create_pingpong_balls(grid_x, grid_y)
                if balls:
                    objects.extend(balls)
            
            return objects if objects else None
        
        elif obj_type == 'drone':
            return self._create_drone(grid_x, grid_y, parsed.get('model_path'))
        
        elif obj_type == 'qrcode_box':
            return self.objects_creator.create_qrcode_box(
                grid_x, grid_y, 
                parsed.get('qr_path')
            )
        
        elif obj_type == 'pingpong_zone':
            zone_info = self.pingpong_system.create_pingpong_zone(
                grid_x, grid_y, 
                parsed['has_balls']
            )
            
            if zone_info:
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á objects
                objects = []
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° poles
                for pole_handle in zone_info['poles']:
                    objects.append({
                        'handle': pole_handle,
                        'type': 'pingpong_pole',
                        'grid': zone_info['grid']
                    })
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° balls
                objects.extend(zone_info['balls'])
                
                return objects
            
        else:
            print(f"‚ùå Unknown object type: {obj_type}")
            return None
    
    def _create_fence_segments_for_position(self, grid_x, grid_y):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á fence segments ‡∏£‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        position = self.config.get_grid_position(grid_x, grid_y)
        half_tile = self.config.tile_size / 2
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡∏•‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏ö 1 ‡∏ä‡πà‡∏≠‡∏á
        fence_segments = [
            # ‡∏£‡∏±‡πâ‡∏ß‡∏•‡πà‡∏≤‡∏á
            ([position[0] - half_tile, position[1] - half_tile], 
             [position[0] + half_tile, position[1] - half_tile], f"Fence_{grid_x}_{grid_y}_Bottom"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ö‡∏ô
            ([position[0] - half_tile, position[1] + half_tile], 
             [position[0] + half_tile, position[1] + half_tile], f"Fence_{grid_x}_{grid_y}_Top"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ã‡πâ‡∏≤‡∏¢
            ([position[0] - half_tile, position[1] - half_tile], 
             [position[0] - half_tile, position[1] + half_tile], f"Fence_{grid_x}_{grid_y}_Left"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏Ç‡∏ß‡∏≤
            ([position[0] + half_tile, position[1] - half_tile], 
             [position[0] + half_tile, position[1] + half_tile], f"Fence_{grid_x}_{grid_y}_Right"),
        ]
        
        return fence_segments

    # ===============================================================
    # PRESET FIELD CREATION
    # ===============================================================
    
    def create_default_preset_field(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏ö preset ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        print("üèóÔ∏è Creating default preset field...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        if not self.create_tiled_floor():
            return False
        
        try:
            # Mission Pads ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°
            objects = []
            
            objects.append(self.objects_creator.create_mission_pad(0, 0, 1))  # A1
            objects.append(self.objects_creator.create_mission_pad(4, 0, 2))  # E1
            objects.append(self.objects_creator.create_mission_pad(0, 4, 3))  # A5
            objects.append(self.objects_creator.create_mission_pad(4, 4, 4))  # E5
            
            # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
            objects.append(self.objects_creator.create_obstacle_box(2, 2, 160))  # C3
            objects.append(self.objects_creator.create_obstacle_box(1, 2, 80))   # B3
            objects.append(self.objects_creator.create_obstacle_box(3, 2, 80))   # D3
            
            # Ping Pong Zones
            zone1 = self.pingpong_system.create_pingpong_zone(1, 1, has_balls=True)  # B2
            zone2 = self.pingpong_system.create_pingpong_zone(3, 3, has_balls=True)  # D4
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            for obj in objects:
                if obj:
                    self.field_objects.append(obj)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° ping pong zones
            for zone in [zone1, zone2]:
                if zone:
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° poles
                    for pole_handle in zone['poles']:
                        self.field_objects.append({
                            'handle': pole_handle,
                            'type': 'pingpong_pole',
                            'grid': zone['grid']
                        })
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° balls
                    self.field_objects.extend(zone['balls'])
            
            print("‚úÖ Default preset field created successfully!")
            return True
            
        except Exception as e:
            print(f"‚ùå Error creating preset field: {e}")
            return False
    
    def create_complete_field_with_fence(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏±‡πâ‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        print("üèóÔ∏è Creating complete field with special fence...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        if not self.create_tiled_floor():
            return False
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pads
            mission_pads = [
                self.objects_creator.create_mission_pad(2, 1, 1),  # C2
                self.objects_creator.create_mission_pad(3, 2, 2),  # D3
                self.objects_creator.create_mission_pad(2, 3, 3),  # C4
                self.objects_creator.create_mission_pad(3, 4, 4),  # D5
            ]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
            obstacles = [
                self.objects_creator.create_obstacle_box(1, 1, 80),   # B2
                self.objects_creator.create_obstacle_box(2, 2, 120),  # C3
                self.objects_creator.create_obstacle_box(3, 3, 80),   # D4
                self.objects_creator.create_obstacle_box(4, 4, 80),   # E5
            ]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡∏û‡∏¥‡πÄ‡∏®‡∏©
            print("üîç Creating predefined fence...")
            fence_objects = self.pingpong_system.create_predefined_fence()
            print(f"üü¢ Fence creation returned {len(fence_objects) if fence_objects else 0} objects")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡πâ‡∏ß (A3)
            print("üîç Creating ping pong balls...")
            pingpong_balls = self.pingpong_system.create_pingpong_balls(0, 2, 8)  # A3 area
            print(f"üü† Ping pong creation returned {len(pingpong_balls) if pingpong_balls else 0} balls")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ field_objects
            all_objects = mission_pads + obstacles
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° fence objects (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None)
            if fence_objects:
                all_objects.extend(fence_objects)
                print(f"‚úÖ Added {len(fence_objects)} fence objects to field")
            else:
                print("‚ö†Ô∏è No fence objects to add")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° ping pong balls
            if pingpong_balls:
                all_objects.extend(pingpong_balls)
                print(f"‚úÖ Added {len(pingpong_balls)} ping pong balls to field")
            else:
                print("‚ö†Ô∏è No ping pong balls to add")
            
            print(f"üîç Total objects to add: {len(all_objects)}")
            
            for obj in all_objects:
                if obj:
                    self.field_objects.append(obj)
                    print(f"  ‚ûï Added {obj.get('type', 'unknown')} object")
            
            print("‚úÖ Complete field with fence created successfully!")
            return True
            
        except Exception as e:
            print(f"‚ùå Error creating complete field: {e}")
            return False
    
    # ===============================================================
    # HELP AND UTILITIES
    # ===============================================================
    
    def get_field_creation_help(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        return self.parser.get_help_text()
    
    def get_field_stats(self):
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ô‡∏≤‡∏°"""
        if not self.field_objects:
            return "üì≠ No objects in field"
        
        stats = {}
        for obj in self.field_objects:
            obj_type = obj['type']
            stats[obj_type] = stats.get(obj_type, 0) + 1
        
        stats_text = f"üìä Field Statistics ({len(self.field_objects)} total objects):\n"
        for obj_type, count in stats.items():
            stats_text += f"  - {obj_type.replace('_', ' ').title()}: {count}\n"
        
        return stats_text
    
    def validate_field_completeness(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°"""
        has_floor = any(obj['type'] == 'floor' for obj in self.field_objects)
        has_mission_pads = any(obj['type'] == 'mission_pad' for obj in self.field_objects)
        has_obstacles = any(obj['type'] == 'obstacle' for obj in self.field_objects)
        
        completeness = {
            'has_floor': has_floor,
            'has_mission_pads': has_mission_pads,
            'has_obstacles': has_obstacles,
            'is_complete': has_floor and (has_mission_pads or has_obstacles)
        }
        
        return completeness
    
    def _create_drone(self, grid_x, grid_y, model_path=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏£‡∏ô‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        try:
            position = self.config.get_grid_position(grid_x, grid_y)
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ path ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ path ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            if model_path is None:
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå Quadcopter.ttm ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå export_model
                import os
                possible_paths = [
                    os.path.join(os.path.dirname(__file__), '..', 'export_model', 'Quadcopter.ttm'),
                    os.path.join(os.path.dirname(__file__), '..', 'export_model', 'quadcopter_scene.ttt'),
                    os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'export_model', 'Quadcopter.ttm')),
                ]
                
                model_path = None
                for path in possible_paths:
                    if os.path.exists(path):
                        model_path = path
                        print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏£‡∏ô: {path}")
                        break
                
                if model_path is None:
                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏£‡∏ô‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå export_model")
            
            drone_handle = None
            
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• .ttm
            if model_path and os.path.exists(model_path):
                print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á import ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏£‡∏ô: {model_path}")
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
                    import os
                    file_size = os.path.getsize(model_path)
                    print(f"üìÅ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_size} bytes")
                    
                    result = self.sim_manager.sim.loadModel(model_path)
                    print(f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î: {result}")
                    
                    if result is not None and result != -1:
                        drone_handle = result
                        print(f"‚úÖ Import Quadcopter.ttm ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Handle: {drone_handle}")
                        
                        # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                        try:
                            object_alias = self.sim_manager.sim.getObjectAlias(drone_handle)
                            print(f"üìã ‡∏ä‡∏∑‡πà‡∏≠ object: {object_alias}")
                        except Exception as e:
                            print(f"üìã ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ object ‡πÑ‡∏î‡πâ: {e}")
                    else:
                        print(f"‚ùå loadModel ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: {result}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• .ttm ‡πÑ‡∏î‡πâ: {e}")
                    import traceback
                    traceback.print_exc()
            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {model_path}")
            
            # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏£‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            if drone_handle is None:
                print("üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏£‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏ó‡∏ô...")
                drone_handle = self._create_basic_drone(grid_x, grid_y)
            
            if drone_handle:
                # ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏î‡∏£‡∏ô‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô (Z = 0.05 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏à‡∏°‡πÉ‡∏ï‡πâ‡∏û‡∏∑‡πâ‡∏ô)
                drone_position = [position[0], position[1], 0.05]
                self.sim_manager.sim.setObjectPosition(drone_handle, drone_position)
                
                # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ (Y+ direction) - ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ä‡∏µ‡πâ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
                # ‡πÉ‡∏ô CoppeliaSim: X=East, Y=North, Z=Up
                # ‡∏´‡∏°‡∏∏‡∏ô 0¬∞ ‡∏£‡∏≠‡∏ö‡πÅ‡∏Å‡∏ô Z ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏´‡∏±‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏á Y+ (‡πÄ‡∏´‡∏ô‡∏∑‡∏≠)
                drone_orientation = [0, 0, 1.55]  # [X-rot, Y-rot, Z-rot] ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô = ‡∏´‡∏±‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
                self.sim_manager.sim.setObjectOrientation(drone_handle, drone_orientation)
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
                grid_name = self.config.grid_to_string(grid_x, grid_y)
                drone_name = "Quadcopter"
                self.sim_manager.sim.setObjectAlias(drone_handle, drone_name)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏£‡∏ô
                drone_info = {
                    'handle': drone_handle,
                    'type': 'drone',
                    'name': drone_name,
                    'grid': grid_name,
                    'position': drone_position,
                    'model_loaded': model_path is not None,
                    'facing': 'north',
                    'on_ground': True
                }
                
                print(f"üöÅ Created drone at {grid_name} - ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô")
                return drone_info
            else:
                print(f"‚ùå Failed to create drone at {self.config.grid_to_string(grid_x, grid_y)}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error creating drone: {e}")
            return None
    
    def _create_basic_drone(self, grid_x, grid_y):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏£‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏£‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ primitive shapes
            
            # ‡∏ï‡∏±‡∏ß‡πÇ‡∏î‡∏£‡∏ô (‡∏•‡∏π‡∏Å‡∏ö‡∏≠‡∏•)
            drone_body = self.sim_manager.sim.createPrimitiveShape(
                self.sim_manager.sim.primitiveshape_spheroid,
                [0.3, 0.3, 0.1]  # ‡∏Ç‡∏ô‡∏≤‡∏î 30x30x10 cm
            )
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ (‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏£‡∏ô)
            self.sim_manager.sim.setShapeColor(drone_body, None, 
                                               self.sim_manager.sim.colorcomponent_ambient_diffuse, 
                                               [0.0, 0.5, 1.0])  # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
            self.sim_manager.sim.setObjectInt32Parameter(drone_body, 
                                                         self.sim_manager.sim.shapeintparam_static, 0)  # ‡πÑ‡∏°‡πà static
            self.sim_manager.sim.setObjectInt32Parameter(drone_body, 
                                                         self.sim_manager.sim.shapeintparam_respondable, 1)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏°‡∏ß‡∏•
            self.sim_manager.sim.setShapeMass(drone_body, 1.5)  # 1.5 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
            
            # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
            self.sim_manager.sim.setObjectOrientation(drone_body, [0, 0, 0])  # ‡∏´‡∏±‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
            
            print("üöÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏£‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏™‡∏µ‡∏ü‡πâ‡∏≤) ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏¥‡∏®‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô")
            
            return drone_body
            
        except Exception as e:
            print(f"‚ùå Error creating basic drone: {e}")
            return None

    # ===============================================================
