"""
Basic Objects Creator Module
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°
"""

import os
import math

class BasicObjectsCreator:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    
    def __init__(self, sim_manager, config):
        self.sim = sim_manager.sim
        self.config = config
        
    def create_floor_tile(self, grid_x, grid_y, tile_index):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏ú‡πà‡∏ô"""
        try:
            position = self.config.get_grid_position(grid_x, grid_y)
            position.append(0.0010)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á 2cm
            
            tile_handle = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                [self.config.tile_size, self.config.tile_size, 0.002]
            )
            
            self.sim.setObjectPosition(tile_handle, position)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
            tile_name = f"FloorTile_{grid_x}_{grid_y}"
            self.sim.setObjectAlias(tile_handle, tile_name)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
            self.sim.setObjectInt32Parameter(tile_handle, self.sim.shapeintparam_static, 1)
            self.sim.setObjectInt32Parameter(tile_handle, self.sim.shapeintparam_respondable, 1)
            # Note: shapeintparam_collidable ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô CoppeliaSim version ‡∏ô‡∏µ‡πâ
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ
            self.sim.setShapeColor(tile_handle, None, self.sim.colorcomponent_ambient_diffuse, 
                                 self.config.colors['floor'])
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
            tile_info = {
                'handle': tile_handle,
                'type': 'floor',
                'name': tile_name,
                'grid': self.config.grid_to_string(grid_x, grid_y),
                'position': position
            }
            
            return tile_info
            
        except Exception as e:
            print(f"‚ùå Error creating floor tile at ({grid_x},{grid_y}): {e}")
            return None
    
    def create_obstacle_box(self, grid_x, grid_y, height_cm=80, texture_side=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á"""
        try:
            position = self.config.get_grid_position(grid_x, grid_y)
            height_m = height_cm / 100.0
            position.append(height_m / 2)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            if texture_side:
                # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û - ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏•‡∏á
                size = [0.4, 0.4, height_m]  # 40√ó40cm ‡πÅ‡∏ó‡∏ô 60√ó60cm
            else:
                # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ - ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°
                size = [self.config.obstacle_size[0], self.config.obstacle_size[1], height_m]
            
            box_handle = self.sim.createPrimitiveShape(self.sim.primitiveshape_cuboid, size)
            self.sim.setObjectPosition(box_handle, position)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
            box_name = f"Box_{height_cm}cm_{self.config.grid_to_string(grid_x, grid_y)}"
            self.sim.setObjectAlias(box_handle, box_name)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
            self.sim.setObjectInt32Parameter(box_handle, self.sim.shapeintparam_static, 1)
            self.sim.setObjectInt32Parameter(box_handle, self.sim.shapeintparam_respondable, 1)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ
            color = self._get_box_color(height_cm)
            self.sim.setShapeColor(box_handle, None, self.sim.colorcomponent_ambient_diffuse, color)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° texture ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if texture_side:
                self._create_image_board_for_box(grid_x, grid_y, texture_side, height_cm)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
            box_info = {
                'handle': box_handle,
                'type': 'obstacle',
                'name': box_name,
                'grid': self.config.grid_to_string(grid_x, grid_y),
                'height': height_cm,
                'texture_side': texture_side,
                'position': position
            }
            
            print(f"üì¶ Created {height_cm}cm box at {self.config.grid_to_string(grid_x, grid_y)}")
            return box_info
            
        except Exception as e:
            print(f"‚ùå Error creating obstacle box: {e}")
            return None
    
    def create_mission_pad(self, grid_x, grid_y, pad_number):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pad"""
        try:
            position = self.config.get_grid_position(grid_x, grid_y)
            position.append(0.021)  # ‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢
            pad_handle = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid, 
                self.config.qr_board_size
            )
            self.sim.setObjectPosition(pad_handle, position)
            
            # ‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
            self.sim.setObjectOrientation(pad_handle, [0, 0, 0])
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
            pad_name = f"MissionPad_{pad_number}_{self.config.grid_to_string(grid_x, grid_y)}"
            self.sim.setObjectAlias(pad_handle, pad_name)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
            self.sim.setObjectInt32Parameter(pad_handle, self.sim.shapeintparam_static, 1)
            self.sim.setObjectInt32Parameter(pad_handle, self.sim.shapeintparam_respondable, 1)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ
            color = self.config.get_mission_pad_color(pad_number)
            self.sim.setShapeColor(pad_handle, None, self.sim.colorcomponent_ambient_diffuse, color)
            
            # ‡πÉ‡∏™‡πà texture QR Code
            self._add_qr_texture(pad_handle, pad_number)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
            pad_info = {
                'handle': pad_handle,
                'type': 'mission_pad',
                'name': pad_name,
                'grid': self.config.grid_to_string(grid_x, grid_y),
                'pad_number': pad_number,
                'position': position
            }
            
            print(f"üéØ Created Mission Pad {pad_number} at {self.config.grid_to_string(grid_x, grid_y)}")
            return pad_info
            
        except Exception as e:
            print(f"‚ùå Error creating mission pad: {e}")
            return None
    
    def create_qrcode_box(self, grid_x, grid_y, qr_image_path=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á QR code ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á 230cm ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
        
        Args:
            grid_x: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X ‡πÉ‡∏ô‡∏Å‡∏£‡∏¥‡∏î
            grid_y: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Y ‡πÉ‡∏ô‡∏Å‡∏£‡∏¥‡∏î  
            qr_image_path: path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå QR code (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ default)
        """
        try:
            # ‡πÉ‡∏ä‡πâ default path ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏
            if qr_image_path is None:
                qr_image_path = r"D:\pythonforcoppelia\Qrcode\testqrcode.png"
            
            position = self.config.get_grid_position(grid_x, grid_y)
            height_m = 2.30  # 230cm
            position.append(height_m / 2)  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á
            size = [self.config.obstacle_size[0], self.config.obstacle_size[1], height_m]
            box_handle = self.sim.createPrimitiveShape(self.sim.primitiveshape_cuboid, size)
            self.sim.setObjectPosition(box_handle, position)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
            box_name = f"QRBox_230cm_{self.config.grid_to_string(grid_x, grid_y)}"
            self.sim.setObjectAlias(box_handle, box_name)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥
            self.sim.setObjectInt32Parameter(box_handle, self.sim.shapeintparam_static, 1)
            self.sim.setObjectInt32Parameter(box_handle, self.sim.shapeintparam_respondable, 1)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
            self.sim.setShapeColor(box_handle, None, self.sim.colorcomponent_ambient_diffuse, [0.5, 0.5, 0.5])
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡πâ‡∏≤‡∏¢ QR code ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á
            qr_board_handle = self._create_qr_board_on_side(grid_x, grid_y, height_m, qr_image_path)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
            box_info = {
                'handle': box_handle,
                'qr_board_handle': qr_board_handle,
                'type': 'qrcode_box',
                'name': box_name,
                'grid': self.config.grid_to_string(grid_x, grid_y),
                'height': 230,
                'qr_path': qr_image_path,
                'position': position
            }
            
            print(f"üì¶ Created QR code box (230cm) at {self.config.grid_to_string(grid_x, grid_y)}")
            if qr_board_handle:
                print(f"üéØ Added white QR board on side with image: {qr_image_path}")
            
            return box_info
            
        except Exception as e:
            print(f"‚ùå Error creating QR code box: {e}")
            return None
    
    def _create_qr_board_on_side(self, grid_x, grid_y, box_height, qr_image_path):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡πâ‡∏≤‡∏¢ QR code ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á"""
        try:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡πâ‡∏≤‡∏¢ (‡∏ï‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á)
            box_pos = self.config.get_grid_position(grid_x, grid_y)
            
            # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á
            box_width = 0.6   # 60cm
            
            # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡πâ‡∏≤‡∏¢ - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏£‡∏ô‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            board_width = 0.5   # 50cm
            board_height = 0.5  # 50cm  
            board_thickness = 0.02  # 2cm (‡∏´‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î)
            
            # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á - ‡∏ï‡∏¥‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á (‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤) ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
            board_x = box_pos[0]
            board_y = box_pos[1] + (box_width/2) + (board_thickness/2)  # ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
            board_z = box_height * 0.75  # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (3/4 ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡πâ‡∏≤‡∏¢
            board_handle = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid, 
                [board_width, board_thickness, board_height]
            )
            
            if board_handle == -1:
                print("‚ùå Failed to create QR board")
                return None
            
            self.sim.setObjectPosition(board_handle, [board_x, board_y, board_z])
            self.sim.setObjectOrientation(board_handle, [0, 0, 0])  # ‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
            grid_name = self.config.grid_to_string(grid_x, grid_y)
            board_name = f"QRBoard_{grid_name}_side"
            self.sim.setObjectAlias(board_handle, board_name)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
            self.sim.setShapeColor(board_handle, None, 
                self.sim.colorcomponent_ambient_diffuse, [1.0, 1.0, 1.0])  # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏™‡∏∞‡∏≠‡∏≤‡∏î
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
            self.sim.setObjectInt32Parameter(board_handle, self.sim.shapeintparam_static, 1)
            self.sim.setObjectInt32Parameter(board_handle, self.sim.shapeintparam_respondable, 1)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° QR code texture ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå
            if os.path.exists(qr_image_path):
                texture_id = self.sim.loadTexture(qr_image_path)
                if texture_id != -1:
                    # ‡πÉ‡∏ä‡πâ texture ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ (face ‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πà‡∏≠‡∏á)
                    self.sim.setShapeTexture(board_handle, texture_id, self.sim.texturemap_plane, 0, [1.0, 1.0])
                    print(f"‚úÖ Added QR texture to white board: {qr_image_path}")
                else:
                    print(f"‚ö†Ô∏è Failed to load QR texture: {qr_image_path}")
            else:
                print(f"‚ö†Ô∏è QR image file not found: {qr_image_path}")
                print("üìã White board created without QR texture")
            
            print(f"‚¨ú Created white QR board on side at ({board_x:.3f}, {board_y:.3f}, {board_z:.3f})")
            
            return board_handle
            
        except Exception as e:
            print(f"‚ùå Error creating QR board on side: {e}")
            return None

    def _get_box_color(self, height_cm):
        """‡∏î‡∏∂‡∏á‡∏™‡∏µ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á"""
        if height_cm <= 80:
            return self.config.colors['obstacle']  # ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
        elif height_cm <= 160:
            return [1.0, 1.0, 0.0]  # ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        else:
            return [1.0, 0.5, 0.0]  # ‡∏™‡∏µ‡∏™‡πâ‡∏° (‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å)
    
    def _create_image_board_for_box(self, grid_x, grid_y, direction, height_cm=80):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏ö‡∏ô‡∏•‡πà‡∏≤‡∏á"""
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡πâ‡∏≤‡∏¢
        box_pos = self.config.get_grid_position(grid_x, grid_y)
        
        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô create_obstacle_box)
        box_width = 0.4   # 40cm (‡∏•‡∏î‡∏•‡∏á‡∏à‡∏≤‡∏Å 60cm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
        box_depth = 0.4   # 40cm (‡∏•‡∏î‡∏•‡∏á‡∏à‡∏≤‡∏Å 60cm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)  
        box_height = height_cm / 100.0  # ‡πÅ‡∏õ‡∏•‡∏á cm ‡πÄ‡∏õ‡πá m
        
        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡πâ‡∏≤‡∏¢
        board_width = 0.35   # 35cm (‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á)
        board_height = 0.25  # 25cm
        board_thickness = 0.008  # 8mm (‡∏ö‡∏≤‡∏á‡∏•‡∏á)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
        direction_mapping = {
            ']': 'right',  # ‡∏Ç‡∏ß‡∏≤
            '[': 'left',   # ‡∏ã‡πâ‡∏≤‡∏¢
            '^': 'up',     # ‡∏ö‡∏ô
            '_': 'down'    # ‡∏•‡πà‡∏≤‡∏á
        }
        actual_direction = direction_mapping.get(direction, direction)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≤‡∏¢‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
        if actual_direction == 'right':
            # ‡∏õ‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á - ‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏ã‡πâ‡∏≤‡∏¢ (‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á)
            image_x = box_pos[0] + (box_width/2) + (board_thickness/2)
            image_y = box_pos[1]
            image_z = box_height/2
            rotation = [0, 0, math.pi]  # ‡∏´‡∏°‡∏∏‡∏ô 180¬∞ ‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
            board_size = [board_thickness, board_width, board_height]
            
        elif actual_direction == 'left':
            # ‡∏õ‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á - ‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Ç‡∏ß‡∏≤ (‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á)
            image_x = box_pos[0] - (box_width/2) - (board_thickness/2)
            image_y = box_pos[1]
            image_z = box_height/2
            rotation = [0, 0, 0]  # ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô ‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
            board_size = [board_thickness, board_width, board_height]
            
        elif actual_direction == 'up':
            # ‡∏õ‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏ö‡∏ô) ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á - ‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏á (‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á)
            image_x = box_pos[0]
            image_y = box_pos[1] + (box_depth/2) + (board_thickness/2)
            image_z = box_height/2
            rotation = [0, 0, -math.pi]  # ‡∏´‡∏°‡∏∏‡∏ô -180¬∞ ‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
            board_size = [board_width, board_thickness, board_height]
            
        elif actual_direction == 'down':
            # ‡∏õ‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏•‡πà‡∏≤‡∏á) ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á - ‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á)
            image_x = box_pos[0]
            image_y = box_pos[1] - (box_depth/2) - (board_thickness/2)
            image_z = box_height/2
            rotation = [0, 0, 0]  # ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏∏‡∏ô ‡∏´‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
            board_size = [board_width, board_thickness, board_height]
        else:
            print(f"‚ùå Unknown direction: {direction}")
            return None
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢
        image_handle = self.sim.createPrimitiveShape(
            self.sim.primitiveshape_cuboid, 
            board_size
        )
        
        if image_handle == -1:
            print(f"‚ùå Failed to create image board for {actual_direction}")
            return None
        
        self.sim.setObjectPosition(image_handle, [image_x, image_y, image_z])
        self.sim.setObjectOrientation(image_handle, rotation)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
        grid_name = self.config.grid_to_string(grid_x, grid_y)
        image_name = f"ImageBoard_{grid_name}_{actual_direction}_{height_cm}cm"
        self.sim.setObjectAlias(image_handle, image_name)
        
        # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô - ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏π‡∏õ
        self.sim.setShapeColor(image_handle, None, 
            self.sim.colorcomponent_ambient_diffuse, [0.8, 0.4, 0.8])  # ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
        self.sim.setObjectInt32Parameter(image_handle, self.sim.shapeintparam_static, 1)
        self.sim.setObjectInt32Parameter(image_handle, self.sim.shapeintparam_respondable, 1)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        image_info = {
            'handle': image_handle,
            'type': 'image_board',
            'name': image_name,
            'grid': grid_name,
            'direction': actual_direction,
            'position': [image_x, image_y, image_z],
            'box_height_cm': height_cm,
            'rotation': rotation
        }
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        rotation_degrees = [math.degrees(r) for r in rotation]
        print(f"üñºÔ∏è Created image board: {image_name}")
        print(f"   üìç Position: ({image_x:.3f}, {image_y:.3f}, {image_z:.3f})")
        print(f"   üîÑ Rotation: ({rotation_degrees[0]:.1f}¬∞, {rotation_degrees[1]:.1f}¬∞, {rotation_degrees[2]:.1f}¬∞)")
        print(f"   üìê Direction: {actual_direction} - Back facing box center")
        
        return image_info
    
    def _add_qr_texture(self, object_handle, pad_number):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° QR Code texture"""
        try:
            # ‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå QR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
            qr_path = f"../mission_pad_templates/number_{pad_number}/missionpad_{pad_number}.png"
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
            if not os.path.exists(qr_path):
                qr_path = self.config.qr_texture_path  # ‡πÉ‡∏ä‡πâ default
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á texture
            if os.path.exists(qr_path):
                texture_id = self.sim.loadTexture(qr_path)
                if texture_id != -1:
                    self.sim.setShapeTexture(object_handle, texture_id, self.sim.texturemap_plane, 0, [1.0, 1.0])
                    print(f"‚úÖ Added QR texture {pad_number}")
                else:
                    print(f"‚ö†Ô∏è Failed to load QR texture {pad_number}")
            else:
                print(f"‚ö†Ô∏è QR texture file not found: {qr_path}")
                
        except Exception as e:
            print(f"‚ùå Error adding QR texture: {e}")
