#!/usr/bin/env python3
"""
Improved Mission Pad Detector - Enhanced version with multiple detection methods
‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
"""

import cv2
import numpy as np
import os
import json
from datetime import datetime

class ImprovedMissionPadDetector:
    def __init__(self, template_folder='mission_pad_templates'):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Mission Pad Detector ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        
        Args:
            template_folder (str): ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö template images
        """
        self.template_folder = template_folder
        self.templates = {}
        self.detection_enabled = False
        self.confidence_threshold = 0.3
        self.detection_methods = ['template_matching', 'feature_matching', 'contour_detection']
        
        # ‡πÇ‡∏´‡∏•‡∏î templates
        self._load_templates()
        
    def _load_templates(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û template ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        try:
            print("üîß Loading mission pad templates...")
            
            if not os.path.exists(self.template_folder):
                print(f"‚ùå Template folder not found: {self.template_folder}")
                return
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô template folder
            for item in os.listdir(self.template_folder):
                folder_path = os.path.join(self.template_folder, item)
                
                if os.path.isdir(folder_path):
                    # ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
                    try:
                        pad_id = int(item.split('_')[1])
                        
                        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
                        for file in os.listdir(folder_path):
                            if file.lower().endswith(('.png', '.jpg', '.jpeg')):
                                template_path = os.path.join(folder_path, file)
                                
                                # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                                template_img = cv2.imread(template_path)
                                if template_img is not None:
                                    # ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
                                    template_gray = cv2.cvtColor(template_img, cv2.COLOR_BGR2GRAY)
                                    
                                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á feature detector
                                    orb = cv2.ORB_create()
                                    kp, des = orb.detectAndCompute(template_gray, None)
                                    
                                    self.templates[pad_id] = {
                                        'image_color': template_img,
                                        'image_gray': template_gray,
                                        'path': template_path,
                                        'name': file,
                                        'keypoints': kp,
                                        'descriptors': des
                                    }
                                    print(f"  ‚úÖ Loaded template {pad_id}: {file}")
                                break
                                
                    except (ValueError, IndexError):
                        print(f"  ‚ö†Ô∏è Cannot parse folder name: {item}")
                        continue
            
            print(f"‚úÖ Loaded {len(self.templates)} mission pad templates")
            
        except Exception as e:
            print(f"‚ùå Failed to load templates: {e}")
            self.templates = {}
    
    def enable_mission_pad_detection(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Mission Pad detection"""
        self.detection_enabled = True
        print("‚úÖ Mission Pad detection enabled")
    
    def disable_mission_pad_detection(self):
        """‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Mission Pad detection"""
        self.detection_enabled = False
        print("‚úÖ Mission Pad detection disabled")
    
    def get_mission_pad_id(self, image_path=None):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ID ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
        
        Args:
            image_path (str): path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            
        Returns:
            int: Mission Pad ID ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
        """
        if not self.detection_enabled:
            print("‚ö†Ô∏è Mission Pad detection is disabled")
            return None
        
        if not self.templates:
            print("‚ùå No templates loaded")
            return None
        
        if not image_path or not os.path.exists(image_path):
            print("‚ùå No valid image path provided")
            return None
        
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            query_img = cv2.imread(image_path)
            if query_img is None:
                print(f"‚ùå Cannot load image: {image_path}")
                return None
            
            query_gray = cv2.cvtColor(query_img, cv2.COLOR_BGR2GRAY)
            
            print(f"üîç Analyzing image: {image_path}")
            print(f"üìè Image size: {query_img.shape}")
            
            # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            results = {}
            
            # Method 1: Template Matching
            template_result = self._template_matching(query_gray)
            if template_result:
                results['template_matching'] = template_result
            
            # Method 2: Feature Matching
            feature_result = self._feature_matching(query_gray)
            if feature_result:
                results['feature_matching'] = feature_result
            
            # Method 3: Contour Detection
            contour_result = self._contour_detection(query_gray)
            if contour_result:
                results['contour_detection'] = contour_result
            
            # Method 4: Multi-scale Template Matching
            multiscale_result = self._multiscale_template_matching(query_gray)
            if multiscale_result:
                results['multiscale_template'] = multiscale_result
            
            # ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ
            final_result = self._combine_results(results)
            
            if final_result:
                print(f"‚úÖ Mission Pad detected: {final_result['id']} (confidence: {final_result['confidence']:.3f})")
                return final_result['id']
            else:
                print("‚ùå No mission pad detected with all methods")
                return None
                
        except Exception as e:
            print(f"‚ùå Mission Pad detection error: {e}")
            return None
    
    def _template_matching(self, query_gray):
        """‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Template Matching ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥"""
        try:
            best_match = None
            best_confidence = 0
            
            for pad_id, template_data in self.templates.items():
                template_gray = template_data['image_gray']
                
                # Template matching
                result = cv2.matchTemplate(query_gray, template_gray, cv2.TM_CCOEFF_NORMED)
                _, max_val, _, _ = cv2.minMaxLoc(result)
                
                if max_val > best_confidence:
                    best_confidence = max_val
                    best_match = pad_id
            
            if best_match and best_confidence >= self.confidence_threshold:
                print(f"  üìã Template Matching: {best_match} ({best_confidence:.3f})")
                return {'id': best_match, 'confidence': best_confidence, 'method': 'template_matching'}
            
            return None
            
        except Exception as e:
            print(f"‚ùå Template matching error: {e}")
            return None
    
    def _feature_matching(self, query_gray):
        """‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Feature Matching ‡∏î‡πâ‡∏ß‡∏¢ ORB"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á ORB detector
            orb = cv2.ORB_create()
            kp_query, des_query = orb.detectAndCompute(query_gray, None)
            
            if des_query is None:
                return None
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á matcher
            bf = cv2.BFMatcher(cv2.NORM_HAMMING, crossCheck=True)
            
            best_match = None
            best_score = 0
            
            for pad_id, template_data in self.templates.items():
                des_template = template_data['descriptors']
                
                if des_template is None:
                    continue
                
                # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà features
                matches = bf.match(des_query, des_template)
                
                if len(matches) > 0:
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
                    matches = sorted(matches, key=lambda x: x.distance)
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á matches
                    good_matches = [m for m in matches if m.distance < 50]
                    score = len(good_matches) / len(matches) if len(matches) > 0 else 0
                    
                    if score > best_score and len(good_matches) > 10:
                        best_score = score
                        best_match = pad_id
            
            if best_match and best_score > 0.3:
                print(f"  üîç Feature Matching: {best_match} ({best_score:.3f})")
                return {'id': best_match, 'confidence': best_score, 'method': 'feature_matching'}
            
            return None
            
        except Exception as e:
            print(f"‚ùå Feature matching error: {e}")
            return None
    
    def _contour_detection(self, query_gray):
        """‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Contour Detection"""
        try:
            # ‡∏´‡∏≤ contours
            edges = cv2.Canny(query_gray, 50, 150)
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            # ‡∏´‡∏≤ contour ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
            for contour in contours:
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á
                epsilon = 0.02 * cv2.arcLength(contour, True)
                approx = cv2.approxPolyDP(contour, epsilon, True)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if len(approx) == 4:
                    area = cv2.contourArea(contour)
                    if area > 1000:  # ‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                        # ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç
                        print(f"  üìê Contour Detection: Found potential mission pad")
                        return {'id': 1, 'confidence': 0.5, 'method': 'contour_detection'}
            
            return None
            
        except Exception as e:
            print(f"‚ùå Contour detection error: {e}")
            return None
    
    def _multiscale_template_matching(self, query_gray):
        """‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Multi-scale Template Matching"""
        try:
            best_match = None
            best_confidence = 0
            
            scales = [0.5, 0.75, 1.0, 1.25, 1.5, 2.0]
            
            for pad_id, template_data in self.templates.items():
                template_gray = template_data['image_gray']
                
                for scale in scales:
                    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î template
                    width = int(template_gray.shape[1] * scale)
                    height = int(template_gray.shape[0] * scale)
                    
                    if width > query_gray.shape[1] or height > query_gray.shape[0]:
                        continue
                    
                    resized_template = cv2.resize(template_gray, (width, height))
                    
                    # Template matching
                    result = cv2.matchTemplate(query_gray, resized_template, cv2.TM_CCOEFF_NORMED)
                    _, max_val, _, _ = cv2.minMaxLoc(result)
                    
                    if max_val > best_confidence:
                        best_confidence = max_val
                        best_match = pad_id
            
            if best_match and best_confidence >= self.confidence_threshold:
                print(f"  üìè Multi-scale Template: {best_match} ({best_confidence:.3f})")
                return {'id': best_match, 'confidence': best_confidence, 'method': 'multiscale_template'}
            
            return None
            
        except Exception as e:
            print(f"‚ùå Multi-scale template matching error: {e}")
            return None
    
    def _combine_results(self, results):
        """‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ"""
        if not results:
            return None
        
        # ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ ID
        id_scores = {}
        
        for method, result in results.items():
            pad_id = result['id']
            confidence = result['confidence']
            
            if pad_id not in id_scores:
                id_scores[pad_id] = {'total_score': 0, 'count': 0, 'methods': []}
            
            id_scores[pad_id]['total_score'] += confidence
            id_scores[pad_id]['count'] += 1
            id_scores[pad_id]['methods'].append(method)
        
        # ‡∏´‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        best_id = None
        best_score = 0
        
        for pad_id, score_data in id_scores.items():
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
            avg_score = score_data['total_score'] / score_data['count']
            method_bonus = score_data['count'] * 0.1  # ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
            final_score = avg_score + method_bonus
            
            if final_score > best_score:
                best_score = final_score
                best_id = pad_id
        
        if best_id:
            print(f"üéØ Combined result: ID {best_id} from {len(id_scores[best_id]['methods'])} methods")
            return {'id': best_id, 'confidence': best_score, 'method': 'combined'}
        
        return None
    
    def set_confidence_threshold(self, threshold):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô"""
        self.confidence_threshold = max(0.0, min(1.0, threshold))
        print(f"üîß Confidence threshold set to: {self.confidence_threshold}")
    
    def get_template_info(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á templates ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ"""
        info = {}
        for pad_id, template_data in self.templates.items():
            info[pad_id] = {
                'name': template_data['name'],
                'path': template_data['path'],
                'size': template_data['image_gray'].shape,
                'has_features': template_data['descriptors'] is not None
            }
        return info
    
    def test_detection(self, test_image_path):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        print(f"üß™ Testing improved mission pad detection with: {test_image_path}")
        
        if not os.path.exists(test_image_path):
            print("‚ùå Test image not found")
            return None
        
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        was_enabled = self.detection_enabled
        self.enable_mission_pad_detection()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        result = self.get_mission_pad_id(test_image_path)
        
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
        self.detection_enabled = was_enabled
        
        return result
    
    def debug_image_analysis(self, image_path):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug"""
        if not os.path.exists(image_path):
            print("‚ùå Image not found")
            return
        
        try:
            img = cv2.imread(image_path)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            print(f"üìä Image Analysis for: {image_path}")
            print(f"üìè Size: {img.shape}")
            print(f"üî¢ Pixel range: {gray.min()} - {gray.max()}")
            print(f"üìà Mean brightness: {gray.mean():.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• templates
            print("\nüóÇÔ∏è Available Templates:")
            for pad_id, template_data in self.templates.items():
                t_shape = template_data['image_gray'].shape
                print(f"  Template {pad_id}: {t_shape}")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            print("\nüîç Detection Test:")
            result = self.get_mission_pad_id(image_path)
            
            if result:
                print(f"‚úÖ Final result: Mission Pad {result}")
            else:
                print("‚ùå No mission pad detected")
                
        except Exception as e:
            print(f"‚ùå Debug analysis error: {e}")
    
    def create_test_report(self, test_images_folder):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        if not os.path.exists(test_images_folder):
            print("‚ùå Test images folder not found")
            return
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'templates_loaded': len(self.templates),
            'confidence_threshold': self.confidence_threshold,
            'test_results': []
        }
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        for file in os.listdir(test_images_folder):
            if file.lower().endswith(('.png', '.jpg', '.jpeg')):
                image_path = os.path.join(test_images_folder, file)
                
                print(f"üß™ Testing: {file}")
                result = self.test_detection(image_path)
                
                report['test_results'].append({
                    'image': file,
                    'detected_id': result,
                    'success': result is not None
                })
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report_path = 'mission_pad_test_report.json'
        with open(report_path, 'w') as f:
            json.dump(report, f, indent=2)
        
        print(f"üìã Test report saved to: {report_path}")
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        total_tests = len(report['test_results'])
        successful_tests = sum(1 for r in report['test_results'] if r['success'])
        
        print(f"üìä Test Summary: {successful_tests}/{total_tests} successful")
        
        return report
