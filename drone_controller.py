#‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÜ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
#!/usr/bin/env python3
"""
Complete Natural Drone Controller - Fixed Version
‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤ + ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
"""
from djitellopy import Tello
import time
import numpy as np
import cv2
import os
import sys
import math
from datetime import datetime
import threading
from collections import Counter

def get_resource_path(relative_path):
    """‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PyInstaller"""
    try:
        # PyInstaller ‡∏™‡∏£‡πâ‡∏≤‡∏á temp folder ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö path ‡πÉ‡∏ô _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà PyInstaller ‡∏à‡∏∞‡πÉ‡∏ä‡πâ current directory
        base_path = os.path.abspath(".")
    
    return os.path.join(base_path, relative_path)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö libraries ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
try:
    import zxingcpp
    QR_SCANNER_AVAILABLE = True
except ImportError:
    QR_SCANNER_AVAILABLE = False
    print("‚ö†Ô∏è zxing-cpp not available - QR scanning disabled")

try:
    from djitellopy import Tello
    REAL_DRONE_AVAILABLE = True
except ImportError:
    REAL_DRONE_AVAILABLE = False
    print("‚ö†Ô∏è DJI Tello library not available - Simulation mode only")

try:
    from coppeliasim_zmqremoteapi_client import RemoteAPIClient
    SIMULATION_MODE = True
except ImportError:
    SIMULATION_MODE = False
    print("‚ö†Ô∏è CoppeliaSim not available - Real drone mode only")

class DroneCamera:
    def __init__(self, sim):
        self.sim = sim
        self.image_folder = 'D:/pythonforcoppelia/captured_images'
        if not os.path.exists(self.image_folder):
            os.makedirs(self.image_folder)

    def simcapture(self, timeout=5.0):
        """‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Lua ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå"""
        self.sim.clearStringSignal('image_saved')
        self.sim.setStringSignal('capture_image', '1')
        
        start = time.time()
        while time.time() - start < timeout:
            signal_data = self.sim.getStringSignal('image_saved')
            if signal_data and isinstance(signal_data, str) and signal_data != '':
                self.sim.clearStringSignal('image_saved')
                return os.path.join(self.image_folder, signal_data)
            time.sleep(0.05)
        raise TimeoutError('No image_saved signal received')
    
    def simcapturebottom(self, timeout=5.0):
        """‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ Lua ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏á - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö proximity sensor"""
        # Use the updated signal name
        self.sim.clearStringSignal('bottom_camera_image_saved')
        # Set the signal to '1' as expected by the new script
        self.sim.setStringSignal('capture_bottom_image', '1')
        
        start = time.time()
        while time.time() - start < timeout:
            # Check for the updated signal name
            signal_data = self.sim.getStringSignal('bottom_camera_image_saved')
            if signal_data and isinstance(signal_data, str) and signal_data != '':
                self.sim.clearStringSignal('bottom_camera_image_saved')
                return os.path.join(self.image_folder, signal_data)
            time.sleep(0.05)
        raise TimeoutError('No bottom_camera_image_saved signal received')
    
class QRCodeScanner:
    def __init__(self):
        self.last_detected_codes = []
    
    def scan_qr_code(self, image_path):
        """‡πÅ‡∏™‡∏Å‡∏ô QR Code ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û"""
        if not QR_SCANNER_AVAILABLE:
            print("‚ùå QR Scanner not available")
            return None
            
        try:
            image = cv2.imread(image_path)
            if image is None:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û: {image_path}")
                return None
            
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            
            # ‡πÉ‡∏ä‡πâ zxing-cpp ‡πÅ‡∏ó‡∏ô pyzbar
            results_zxing = zxingcpp.read_barcodes(gray)
            
            results = []
            for result in results_zxing:
                qr_data = result.text
                qr_type = result.format.name
                
                # ‡πÅ‡∏õ‡∏•‡∏á position ‡∏à‡∏≤‡∏Å zxing format
                position = result.position
                # zxing ‡πÉ‡∏´‡πâ position ‡πÄ‡∏õ‡πá‡∏ô 4 ‡∏à‡∏∏‡∏î [top-left, top-right, bottom-right, bottom-left]
                x = min([p.x for p in position])
                y = min([p.y for p in position]) 
                w = max([p.x for p in position]) - x
                h = max([p.y for p in position]) - y
                
                # ‡πÉ‡∏ä‡πâ position ‡∏à‡∏≤‡∏Å zxing ‡πÅ‡∏ó‡∏ô polygon ‡∏à‡∏≤‡∏Å pyzbar
                if len(position) == 4:
                    center_x = sum([p.x for p in position]) // 4
                    center_y = sum([p.y for p in position]) // 4
                    
                    result = {
                        'data': qr_data,
                        'type': qr_type,
                        'center': (center_x, center_y),
                        'points': [(p.x, p.y) for p in position]
                    }
                    results.append(result)
                    
                    print(f"üîç ‡∏û‡∏ö QR Code: {qr_data}")
                    print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ({center_x}, {center_y})")
            
            self.last_detected_codes = results
            return results
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏Å‡∏ô QR Code: {e}")
            return None
    
    def draw_qr_detection(self, image_path, output_path=None):
        """‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö QR Code ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö"""
        try:
            image = cv2.imread(image_path)
            if image is None:
                return None
            
            # ‡πÅ‡∏™‡∏Å‡∏ô QR Code
            qr_codes = self.scan_qr_code(image_path)
            if not qr_codes:
                return image
            
            # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö QR Code
            for qr_code in qr_codes:
                points = qr_code['points']
                center = qr_code['center']
                data = qr_code['data']
                
                # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
                pts = np.array(points, np.int32)
                pts = pts.reshape((-1, 1, 2))
                cv2.polylines(image, [pts], True, (0, 255, 0), 3)
                
                # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
                cv2.circle(image, center, 5, (0, 0, 255), -1)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code
                cv2.putText(image, data, (center[0] - 50, center[1] - 20),
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ path)
            if output_path:
                cv2.imwrite(output_path, image)
                print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö QR Code: {output_path}")
            
            return image
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö QR Code: {e}")
            return None


#class ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏π‡∏ô‡∏ä‡∏≤‡∏¢
class DroneTello(Tello):
    """
    Enhanced Tello drone class with camera display and mission pad support.
    
    Usage:
        drone = DroneTello(show_cam=True, enable_mission_pad=True)
        drone.takeoff()
        drone.capture("photo.jpg")
        data = drone.scan_qr("photo.jpg")
        drone.land()
    """
    def __init__(self, show_cam=False, enable_mission_pad=False):
        """
        Initialize DroneTello with optional camera display and mission pads.
        
        Args:
            show_cam (bool): If True, shows live camera feed in a window
            enable_mission_pad (bool): If True, enables mission pad detection
            
        Usage:
            drone = DroneTello()  # Basic connection to default IP
            drone = DroneTello(show_cam=True)  # With camera display
            drone = DroneTello(show_cam=True, enable_mission_pad=True)  # Full features
        """
        super().__init__()

        # Initialize state variables first
        self.show_camera = False
        self._camera_thread = None
        self._stream_active = False
        self._display_active = False
        self.is_land = True  # Drone starts on ground
        self.is_connected = False

        # Try to connect to the Tello drone
        try:
            print(f"Connecting to Tello drone at {getattr(self, 'TELLO_IP', '192.168.10.1')}...")
            self.connect()
            print("‚úÖ Connected to Tello drone successfully!")
            
            # Get basic drone info
            try:
                battery = self.get_battery()
                print(f"Battery: {battery}%")
            except Exception as e:
                print(f"Warning: Could not get battery info: {e}")
                
            try:
                temperature = self.get_temperature()
                print(f"Temperature: {temperature}¬∞C")
            except Exception as e:
                print(f"Warning: Could not get temperature info: {e}")
                
            self.is_connected = True
            
            # show camera in realtime if requested
            if show_cam:
                # start video stream
                self._start_video_stream()
                if self._stream_active:
                    self.start_camera_display()
            
            time.sleep(2)  # Give some time for connection to stabilize

            # enable mission pads if requested
            if enable_mission_pad:
                print("Enabling mission pads...")
                try:
                    self.enable_mission_pads()
                    print("Mission pads enabled successfully")
                except Exception as e:
                    print(f"Warning: Could not enable mission pads: {e}")
            
            print("Drone Tello initialized successfully.")
            
        except KeyboardInterrupt:
            print("\n‚ùå Connection cancelled by user")
            self.is_connected = False
        except Exception as e:
            print(f"‚ùå Warning: Could not connect to Tello drone: {e}")
            print("You can still use WiFi configuration methods without a connected drone.")
            self.is_connected = False

    def __del__(self):
        """
        Destructor to ensure cleanup when object is deleted.
        
        Usage: Automatically called when drone object goes out of scope
        """
        try:
            self.cleanup()
        except:
            pass
    
    def _start_video_stream(self):
        """
        Start video stream with error handling and retry mechanism.
        
        Usage: Internal method called automatically when needed
        """
        try:
            print("Starting video stream...")
            self.streamon()
            time.sleep(5)  # Wait longer for stream to initialize
            
            # Try multiple times to get frame
            for _ in range(3):
                try:
                    test_frame = self.get_frame_read().frame

                    test_frame = cv2.cvtColor(test_frame, cv2.COLOR_BGR2RGB)  # Convert to RGB
                    
                    if test_frame is not None:
                        self._stream_active = True
                        print("Video stream started successfully")
                        return
                except Exception as e:
                    print(f"Frame test attempt failed: {e}")
                    time.sleep(1)
                    continue
                    
            print("Warning: Video stream started but no frames available")
            self._stream_active = False
        except Exception as e:
            print(f"Failed to start video stream: {e}")
            self._stream_active = False


    def start_camera_display(self):
        """
        Start displaying camera feed in a GUI window.
        
        Usage:
            drone.start_camera_display()  # Opens camera window
            # Press 'q' in the window to close it
        """
        if not self._stream_active:
            self._start_video_stream()
            
        if self._stream_active:
            self.show_camera = True
            self._camera_thread = threading.Thread(target=self._camera_loop)
            self._camera_thread.daemon = True
            self._camera_thread.start()
        
    def stop_camera_display(self):
        """
        Stop displaying camera feed and close the window.
        
        Usage:
            drone.stop_camera_display()  # Closes camera window
        """
        self.show_camera = False
        if self._camera_thread and self._camera_thread.is_alive():
            self._camera_thread.join(timeout=2)
        cv2.destroyAllWindows()
        
    def _camera_loop(self):
        """
        Internal method to continuously display camera feed.
        
        Usage: Called automatically by start_camera_display()
        """
        while self.show_camera and self._stream_active:
            try:
                frame = self.get_frame_read().frame

                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert to RGB
                
                if frame is not None:
                    # OpenCV expects BGR format, no need to convert
                    cv2.imshow("Tello Camera Feed", frame)
                    if cv2.waitKey(1) & 0xFF == ord('q'):
                        self.stop_camera_display()
                        break
                else:
                    time.sleep(0.1)
            except Exception as e:
                print(f"Camera error: {e}")
                self._stream_active = False
                break


    def capture(self, filename="tello_picture.jpg"):
        """
        Capture current frame and save it to pictures/ folder in RGB format.
        
        Args:
            filename (str): Name of the image file to save
            
        Returns:
            str: Full path of saved image file, or None if failed
            
        Usage:
            drone.capture()  # Saves as "tello_picture.jpg"
            drone.capture("my_photo.jpg")  # Saves with custom name
        """
        if not self._stream_active:
            self._start_video_stream()
            
        if not self._stream_active:
            print("Cannot capture: Video stream not available")
            return None
            
        try:
            frame = self.get_frame_read().frame

            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert to RGB
            
            if frame is None:
                print("No frame available for capture")
                return None
                
            path = "pictures/"
            if not os.path.exists(path):
                os.makedirs(path)
                
            full_path = path + filename
            # Save in original BGR format (OpenCV default)
            cv2.imwrite(full_path, frame)
            print(f"Picture saved as {full_path}")
            return full_path
        except Exception as e:
            print(f"Capture error: {e}")
            return None
    
    def scan_qr(self, filename):
        """
        Scan QR code from saved image file and return decoded data.
        
        Args:
            filename (str): Name of the image file in pictures/ folder
            
        Returns:
            str: Decoded QR code data, or None if no QR code found
            
        Usage:
            data = drone.scan_qr("my_photo.jpg")
            if data:
                print(f"QR code says: {data}")
        """
        path = "pictures/"
        full_path = path + filename
        
        if not os.path.exists(full_path):
            print(f"File {full_path} not found")
            return None
            
        try:
            # ‡πÉ‡∏ä‡πâ zxing-cpp ‡πÅ‡∏ó‡∏ô pyzbar
            import zxingcpp
            image = cv2.imread(full_path)
            if image is None:
                print(f"Cannot read image: {full_path}")
                return None
                
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            results = zxingcpp.read_barcodes(gray)
            
            if results:
                # Return first QR code data
                data = results[0].text
                print(f"QR Code detected in {filename}: {data}")
                return data
            else:
                print(f"No QR code detected in {filename}")
                return None
        except ImportError:
            print("zxing-cpp not available, using OpenCV QR detector")
            try:
                image = cv2.imread(full_path)
                gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                qcd = cv2.QRCodeDetector()
                data, points, _ = qcd.detectAndDecode(gray)
                
                if points is not None and data:
                    print(f"QR Code detected in {filename}: {data}")
                    return data
                else:
                    print(f"No QR code detected in {filename}")
                    return None
            except Exception as e:
                print(f"QR scan error: {e}")
                return None
        except Exception as e:
            print(f"QR scan error: {e}")
            return None
        
    def wait(self, seconds):
        """
        Wait for a specified number of seconds with status messages.
        
        Args:
            seconds (int/float): Number of seconds to wait
            
        Usage:
            drone.wait(2)      # Wait 2 seconds
            drone.wait(0.5)    # Wait half a second
        """
        print(f"Waiting for {seconds} seconds...")
        time.sleep(seconds)
        print("Wait complete.")
        
    def takeoff(self):
        """
        Take off and update landing status.
        
        Usage:
            drone.takeoff()  # Drone takes off and is_land becomes False
        """
        super().takeoff()
        self.is_land = False
        
    def land(self):
        """
        Land and update landing status.
        
        Usage:
            drone.land()  # Drone lands and is_land becomes True
        """
        super().land()
        self.is_land = True
        
    def cleanup(self):
        """
        Clean shutdown of drone resources to prevent errors.
        
        Usage:
            drone.cleanup()  # Call before ending program
            # Or use in finally block for automatic cleanup
        """
        try:
            self.stop_camera_display()
            
            # Land if drone is still flying
            if not self.is_land:
                print("Landing drone before cleanup...")
                try:
                    self.land()
                except Exception as e:
                    print(f"Warning: Could not land drone: {e}")
            
            # Stop video stream
            if hasattr(self, '_stream_active') and self._stream_active:
                try:
                    self.streamoff()
                    print("Video stream stopped")
                except Exception as e:
                    print(f"Warning: Could not stop video stream: {e}")
                    
        except Exception as e:
            print(f"Cleanup error: {e}")

class ProximitySensorManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Proximity Sensor ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ"""
    
    def __init__(self, sim, drone_handle):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ProximitySensorManager
        
        Args:
            sim: CoppeliaSim object
            drone_handle: handle ‡∏Ç‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô
        """
        self.sim = sim
        self.drone_handle = drone_handle
        self.sensor_handle = None
        self.is_initialized = False
        
    def setup(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ proximity sensor"""
        try:
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ proximity sensor ‡πÉ‡∏ô‡πÇ‡∏î‡∏£‡∏ô
            sensor_names = [
                '/Quadcopter/proximitySensor',
                'proximitySensor',
                '/proximitySensor'
            ]
            
            for name in sensor_names:
                try:
                    self.sensor_handle = self.sim.getObject(name)
                    print(f"‚úÖ ‡πÄ‡∏à‡∏≠ proximity sensor: {name}")
                    self.is_initialized = True
                    return True
                except:
                    continue
            
            print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ proximity sensor")
            return False
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ sensor: {e}")
            return False
    
    def read_distance(self):
        """‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å sensor
        
        Returns:
            float: ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á (‡πÄ‡∏°‡∏ï‡∏£) ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
        """
        if not self.is_initialized:
            print("‚ùå Sensor ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
            return None
        
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å proximity sensor
            result, distance, point, object_handle, normal = self.sim.readProximitySensor(self.sensor_handle)
            
            if result:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
                return distance
            else:
                return None
                
        except Exception as e:
            print(f"‚ùå ‡∏≠‡πà‡∏≤‡∏ô sensor ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
            return None
    
    def get_height(self):
        """‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô
        
        Returns:
            float: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (‡πÄ‡∏°‡∏ï‡∏£) ‡∏´‡∏£‡∏∑‡∏≠ None
        """
        distance = self.read_distance()
        if distance is not None:
            print(f"üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á: {distance:.2f} ‡πÄ‡∏°‡∏ï‡∏£")
            return distance
        else:
            print("‚ùå ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            return None
    
    def is_close_to_ground(self, threshold=0.3):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        
        Args:
            threshold: ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏∑‡πâ‡∏ô (‡πÄ‡∏°‡∏ï‡∏£)
            
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏∑‡πâ‡∏ô
        """
        height = self.get_height()
        if height is not None:
            return height <= threshold
        return False
    
    def wait_until_height(self, target_height, timeout=10):
        """‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        
        Args:
            target_height: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏°‡∏ï‡∏£)
            timeout: ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏≠ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
            
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        """
        import time
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            height = self.get_height()
            if height is not None and abs(height - target_height) < 0.1:
                print(f"‚úÖ ‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á {target_height:.2f} ‡πÄ‡∏°‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß")
                return True
            
            time.sleep(0.1)
        
        print(f"‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠ ({timeout} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
        return False
    
    def monitor_height(self, duration=5):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
        
        Args:
            duration: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        """
        import time
        start_time = time.time()
        
        print(f"üì° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
        
        while time.time() - start_time < duration:
            height = self.get_height()
            if height is not None:
                print(f"  ‚è±Ô∏è {time.time() - start_time:.1f}s: {height:.2f}m")
            else:
                print(f"  ‚è±Ô∏è {time.time() - start_time:.1f}s: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            
            time.sleep(0.5)
        
        print("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á")

    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    def get_sensor_info(self):
        """‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå"""
        if not self.is_initialized:
            return "‚ùå Sensor ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"
        
        try:
            result, distance, point, object_handle, normal = self.sim.readProximitySensor(self.sensor_handle)
            
            info = {
                'detected': result,
                'distance': distance if result else None,
                'detection_point': point if result else None,
                'object_handle': object_handle if result else None
            }
            
            return info
            
        except Exception as e:
            return f"‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}"

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô NaturalDroneController class

    def _init_proximity_sensors(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô proximity sensors"""
        if self.use_simulation and self.sim and self.drone_handle:
            try:
                self.proximity_manager = ProximitySensorManager(self.sim, self.drone_handle)
                success = self.proximity_manager.initialize_sensors()
                if success:
                    print("‚úÖ Proximity sensors ready")
                    return True
                else:
                    print("‚ö†Ô∏è Proximity sensors not available")
                    return False
            except Exception as e:
                print(f"‚ùå Proximity sensor initialization error: {e}")
                return False
        return False
    
    def get_altitude(self):
        """‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô"""
        if hasattr(self, 'proximity_manager'):
            return self.proximity_manager.get_height_from_ground()
        else:
            print("‚ùå Proximity sensors not initialized")
            return None
    
    def read_proximity_sensor(self, sensor_name='bottom'):
        """‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å proximity sensor"""
        if hasattr(self, 'proximity_manager'):
            return self.proximity_manager.read_distance(sensor_name)
        else:
            print("‚ùå Proximity sensors not initialized")
            return None
    
    def is_safe_altitude(self, min_height=0.3):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        altitude = self.get_altitude()
        if altitude is not None:
            return altitude >= min_height
        return False
    
    def auto_maintain_altitude(self, target_height=1.0, tolerance=0.1, max_time=30):
        """‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        if not self.is_flying:
            print("‚ùå Drone must be flying first")
            return False
        
        if not hasattr(self, 'proximity_manager'):
            print("‚ùå Proximity sensors not available")
            return False
        
        print(f"üéØ Maintaining altitude at {target_height}m (¬±{tolerance}m)")
        
        start_time = time.time()
        successful_readings = 0
        
        while time.time() - start_time < max_time:
            current_height = self.get_altitude()
            
            if current_height is not None:
                successful_readings += 1
                height_error = target_height - current_height
                
                print(f"üìè Current: {current_height:.2f}m, Target: {target_height:.2f}m, Error: {height_error:.2f}m")
                
                if abs(height_error) > tolerance:
                    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
                    if height_error > 0:
                        # ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
                        adjust_distance = min(height_error, 0.3)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30cm
                        print(f"‚¨ÜÔ∏è Moving up {adjust_distance:.2f}m")
                        self.move_up(adjust_distance)
                    else:
                        # ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ï‡πà‡∏≥‡∏•‡∏á
                        adjust_distance = min(abs(height_error), 0.3)
                        print(f"‚¨áÔ∏è Moving down {adjust_distance:.2f}m")
                        self.move_down(adjust_distance)
                    
                    time.sleep(1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏£‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
                else:
                    print(f"‚úÖ Altitude maintained at {current_height:.2f}m")
                    return True
            else:
                print("‚ö†Ô∏è No altitude reading")
            
            time.sleep(0.5)
        
        print(f"‚è∞ Altitude maintenance timeout ({successful_readings} successful readings)")
        return False
    
    def smart_landing(self, check_interval=0.5, safe_height=0.15):
        """‡∏•‡∏á‡∏à‡∏≠‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á"""
        if not self.is_flying:
            print("‚ö†Ô∏è Drone is not flying")
            return True
        
        if not hasattr(self, 'proximity_manager'):
            print("‚ùå Proximity sensors not available - using standard landing")
            return self.land()
        
        print("üõ¨ Starting smart landing with altitude monitoring...")
        
        while self.is_flying:
            current_height = self.get_altitude()
            
            if current_height is not None:
                print(f"üìè Current height: {current_height:.2f}m")
                
                if current_height <= safe_height:
                    print("‚úÖ Safe landing height reached")
                    break
                
                # ‡∏•‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ô‡∏¥‡∏î
                descent_step = min(0.2, current_height - safe_height)
                print(f"‚¨áÔ∏è Descending {descent_step:.2f}m")
                self.move_down(descent_step)
                
            else:
                print("‚ö†Ô∏è No height reading - continuing descent")
                self.move_down(0.1)
            
            time.sleep(check_interval)
        
        # ‡∏•‡∏á‡∏à‡∏≠‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        print("üõ¨ Final landing...")
        success = self.land()
        
        if success:
            print("‚úÖ Smart landing complete")
        
        return success
    
    def scan_surroundings_with_altitude(self, points=8):
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á"""
        if not self.is_flying:
            print("‚ùå Drone must be flying first")
            return []
        
        if not hasattr(self, 'proximity_manager'):
            print("‚ùå Proximity sensors not available")
            return []
        
        print(f"üîÑ Scanning surroundings at {points} points...")
        
        results = []
        rotation_step = 360 / points
        
        for i in range(points):
            angle = i * rotation_step
            print(f"üìç Point {i+1}/{points} (angle: {angle:.0f}¬∞)")
            
            # ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
            altitude = self.get_altitude()
            
            # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
            image_path = self.take_picture()
            
            result = {
                'point': i + 1,
                'angle': angle,
                'altitude': altitude,
                'image': image_path,
                'timestamp': time.time()
            }
            
            results.append(result)
            
            # ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
            if i < points - 1:
                self.rotate_clockwise(rotation_step)
                time.sleep(1)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏£‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
        
        print("‚úÖ Surroundings scan complete")
        return results
    
    def monitor_flight_safety(self, min_altitude=0.3, max_altitude=3.0, check_interval=1.0):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        if not self.is_flying:
            print("‚ùå Drone must be flying first")
            return False
        
        if not hasattr(self, 'proximity_manager'):
            print("‚ùå Proximity sensors not available")
            return False
        
        print(f"üõ°Ô∏è Flight safety monitoring active (altitude: {min_altitude}-{max_altitude}m)")
        
        try:
            while self.is_flying:
                altitude = self.get_altitude()
                
                if altitude is not None:
                    if altitude < min_altitude:
                        print(f"‚ö†Ô∏è ALTITUDE WARNING: Too low! ({altitude:.2f}m < {min_altitude}m)")
                        print("‚¨ÜÔ∏è Auto-ascending for safety...")
                        self.move_up(min_altitude - altitude + 0.1)
                        
                    elif altitude > max_altitude:
                        print(f"‚ö†Ô∏è ALTITUDE WARNING: Too high! ({altitude:.2f}m > {max_altitude}m)")
                        print("‚¨áÔ∏è Auto-descending for safety...")
                        self.move_down(altitude - max_altitude + 0.1)
                        
                    else:
                        print(f"‚úÖ Altitude OK: {altitude:.2f}m")
                
                else:
                    print("‚ö†Ô∏è No altitude reading")
                
                time.sleep(check_interval)
                
        except KeyboardInterrupt:
            print("üõë Safety monitoring stopped by user")
        except Exception as e:
            print(f"‚ùå Safety monitoring error: {e}")
        
        return True

#class ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å
class NaturalDroneController:
    def __init__(self, use_simulation=True):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Drone Controller"""
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        self.use_simulation = use_simulation and SIMULATION_MODE
        self.use_real_drone = not use_simulation and REAL_DRONE_AVAILABLE

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.is_flying = False
        self.current_position = [0.0, 0.0, 0.0]
        self.target_position = [0.0, 0.0, 0.0]
        self.is_moving = False
        self.current_heading = 0.0
        self.orientation_matrix = [0, 0, 0]
        
        # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏ô
        self.max_speed = 0.5
        self.acceleration = 0.2
        self.position_tolerance = 0.05
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        self.client = None
        self.sim = None
        self.drone_handle = None
        self.camera = None
        self.qr_scanner = None
        self.mission_pad_detector = None
        self.bottom_camera_handle = None
        self.image_folder = './captured_images'
        self.simulation_running = False
        self.detected_mission_pads = []
        # Wind system variables
        self.wind_settings = {
            'strength': 0,
            'direction': [0, 0, 0],
            'turbulence': True,
            'gusts': True,
            'zones': []
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if not os.path.exists(self.image_folder):
            os.makedirs(self.image_folder)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        print("üîß Initializing connection...")
        self._initialize_connection()
        
        # ‚úÖ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô mission pads ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏á
        print("üîß Mission pads disabled by default - call enable_mission_pads() manually if needed")
        
        print(f"üöÅ Drone Controller initialized - Mode: {'Simulation' if self.use_simulation else 'Real Drone'}")

    def _initialize_connection(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ - ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        if self.use_simulation:
            success = self._init_simulation()
            if success:
                print("‚úÖ Simulation connected - camera system ready but not started")
                # ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å _init_camera_system() ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        elif self.use_real_drone:
            self._init_real_drone()
        else:
            print("‚ùå No drone interface available")

    def _init_simulation(self):
        try:
            print("üîÑ Connecting to CoppeliaSim...")
            self.client = RemoteAPIClient()
            self.sim = self.client.getObject('sim')      
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏£‡∏ô
            self.drone_handle = self.sim.getObject('/Quadcopter')
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° simulation
            self.sim.startSimulation()
            self.simulation_running = True
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            self._update_current_position()
            
            print("‚úÖ Connected to CoppeliaSim")
            

            self._init_camera_system()
            # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ simulation ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
            time.sleep(2)
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏°
            print("üå™Ô∏è Setting up wind system...")
            wind_success = self.setup_wind_system()
            if wind_success:
                print("‚úÖ Wind system ready")
            else:
                print("‚ö†Ô∏è Wind system setup failed - continuing without wind effects")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to connect to CoppeliaSim: {e}")
            self.use_simulation = False
            return False
    
    def stop_simulation(self):
        """Stop the CoppeliaSim simulation if it's running"""
        if hasattr(self, 'sim') and self.simulation_running:
            try:
                self.sim.stopSimulation()
                self.simulation_running = False
                print("üõë Simulation stopped")
            except Exception as e:
                print(f"‚ùå Error stopping simulation: {e}")
                
    # ---------------- WIND SYSTEM ----------------
    def setup_wind_system(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"""
        try:
            if not self.use_simulation or not self.sim or not self.drone_handle:
                print("‚ö†Ô∏è Simulation not ready for wind system")
                return False
            print("üå™Ô∏è Initializing wind system...")
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            self.wind_settings = {
                'strength': 0,
                'direction': [0, 0, 0],
                'turbulence': True,
                'gusts': True,
                'zones': []
            }
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Lua functions
            try:
                test_result = self.sim.callScriptFunction('setWindStrength', self.drone_handle, 0)
                print("‚úÖ Wind Lua functions accessible")
            except Exception as lua_error:
                print(f"‚ö†Ô∏è Wind Lua functions not available: {lua_error}")
                print("üí° Make sure you've added the wind code to the drone's Lua script")
            print("‚úÖ Wind system ready")
            return True
        except Exception as e:
            print(f"‚ùå Wind system setup failed: {e}")
            return False

    def set_wind_strength(self, strength):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏•‡∏° (0-10)"""
        try:
            if not (0 <= strength <= 10):
                print("‚ùå Wind strength must be between 0-10")
                return False
            result = self.sim.callScriptFunction('setWindStrength', self.drone_handle, strength)
            self.wind_settings['strength'] = strength
            print(f"üå™Ô∏è Wind strength set to: {strength}")
            return True
        except Exception as e:
            print(f"‚ùå Failed to set wind strength: {e}")
            return False

    def set_wind_direction(self, x=0, y=0, z=0):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏•‡∏° (m/s)"""
        try:
            result = self.sim.callScriptFunction('setWindDirection', self.drone_handle, [x, y, z])
            self.wind_settings['direction'] = [x, y, z]
            print(f"üß≠ Wind direction set to: ({x:.1f}, {y:.1f}, {z:.1f}) m/s")
            return True
        except Exception as e:
            return False

    def enable_turbulence(self, enable=True):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î turbulence"""
        try:
            result = self.sim.callScriptFunction('enableTurbulence', self.drone_handle, enable)
            self.wind_settings['turbulence'] = enable
            print(f"üåä Turbulence {'enabled' if enable else 'disabled'}")
            return True
        except Exception as e:
            return False

    def enable_wind_gusts(self, enable=True):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î wind gusts"""
        try:
            result = self.sim.callScriptFunction('enableWindGusts', self.drone_handle, enable)
            self.wind_settings['gusts'] = enable
            print(f"üí® Wind gusts {'enabled' if enable else 'disabled'}")
            return True
        except Exception as e:
            return False

    def create_wind_zone(self, name, x_min, y_min, x_max, y_max, wind_multiplier=1.0, turbulence_level=0.1):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á wind zone ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á"""
        try:
            result = self.sim.callScriptFunction('createCustomWindZone', self.drone_handle, [name, x_min, y_min, x_max, y_max, wind_multiplier, turbulence_level])
            zone = {
                'name': name,
                'bounds': [x_min, y_min, x_max, y_max],
                'wind_multiplier': wind_multiplier,
                'turbulence_level': turbulence_level
            }
            self.wind_settings['zones'].append(zone)
            print(f"üìç Wind zone '{name}' created: Wind x{wind_multiplier}, Turbulence {turbulence_level}")
            return True
        except Exception as e:
            print(f"‚ùå Failed to create wind zone: {e}")
            return False

    def get_wind_status(self):
        """‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            status = self.sim.callScriptFunction('getWindStatus', self.drone_handle)
            print("üå™Ô∏è Wind Status:")
            print(f"  Strength: {status.get('strength', 0)}")
            print(f"  Direction: {status.get('global_wind', [0,0,0])}")
            print(f"  Gust Active: {status.get('gust_active', False)}")
            print(f"  Current Zone: {status.get('current_zone', 'None')}")
            print(f"  Turbulence: {status.get('turbulence_enabled', False)}")
            return status
        except Exception as e:
            print(f"‚ùå Failed to get wind status: {e}")
            return None

    # Wind presets
    def set_calm_conditions(self):
        self.set_wind_strength(0)
        self.enable_turbulence(False)
        self.enable_wind_gusts(False)
        print("üòå Calm weather conditions set")

    def set_light_breeze(self):
        self.set_wind_strength(2)
        self.set_wind_direction(1, 0.5, 0)
        self.enable_turbulence(True)
        self.enable_wind_gusts(False)
        print("üçÉ Light breeze conditions set")

    def set_moderate_wind(self):
        self.set_wind_strength(4)
        self.set_wind_direction(2, 1, 0)
        self.enable_turbulence(True)
        self.enable_wind_gusts(True)
        print("üí® Moderate wind conditions set")

    def set_strong_wind(self):
        self.set_wind_strength(7)
        self.set_wind_direction(3, 2, 0.5)
        self.enable_turbulence(True)
        self.enable_wind_gusts(True)
        print("‚ö†Ô∏è Strong wind conditions set - Be careful!")

    def create_realistic_wind_scenario(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        try:
            print("üèüÔ∏è Creating realistic wind scenario...")
            self.create_wind_zone("Launch_Area", -0.5, -0.5, 0.5, 0.5, 0.5, 0.02)
            self.create_wind_zone("Obstacle_Area", 1, 1, 3, 3, 1.2, 0.15)
            self.create_wind_zone("Mission_Area", 2, 4, 3, 5, 1.8, 0.25)
            self.set_wind_strength(3)
            self.set_wind_direction(1, 0.5, 0)
            print("‚úÖ Realistic wind scenario for Drone Odyssey field created!")
            return True
        except Exception as e:
            print(f"‚ùå Failed to create wind scenario: {e}")
            return False

    def test_wind_effects_simple(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö wind effects ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        if not self.is_flying:
            print("‚ùå Drone must be flying to test wind effects")
            return False
        print("üß™ Testing simple wind effects...")
        try:
            start_pos = self.get_position()
            print("\n1. üòå Testing calm conditions...")
            self.set_calm_conditions()
            self.hover(3)
            pos_calm = self.get_position()
            drift_calm = self._calculate_drift(start_pos, pos_calm)
            print("\n2. üçÉ Testing light breeze...")
            self.move_to_position(*start_pos)
            time.sleep(1)
            self.set_light_breeze()
            self.hover(3)
            pos_breeze = self.get_position()
            drift_breeze = self._calculate_drift(start_pos, pos_breeze)
            print("\n3. üí® Testing moderate wind...")
            self.move_to_position(*start_pos)
            time.sleep(1)
            self.set_moderate_wind()
            self.hover(3)
            pos_wind = self.get_position()
            drift_wind = self._calculate_drift(start_pos, pos_wind)
            self.set_calm_conditions()
            self.move_to_position(*start_pos)
            print("\nüìä Wind Test Results:")
            print(f"  Calm conditions: {drift_calm:.3f}m drift")
            print(f"  Light breeze: {drift_breeze:.3f}m drift")
            print(f"  Moderate wind: {drift_wind:.3f}m drift")
            if drift_wind > drift_breeze > drift_calm:
                print("‚úÖ Wind effects working correctly!")
                return True
            else:
                print("‚ö†Ô∏è Wind effects may not be working as expected")
                return False
        except Exception as e:
            print(f"‚ùå Wind test failed: {e}")
            return False

    def _calculate_drift(self, start_pos, end_pos):
        try:
            dx = end_pos[0] - start_pos[0]
            dy = end_pos[1] - start_pos[1]
            return math.sqrt(dx*dx + dy*dy)
        except:
            return 0.0

    def start_wind_demo(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° demo wind effects ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°"""
        print("üå™Ô∏è Starting comprehensive wind demonstration...")
        if not self.takeoff(height=1.5):
            return False
        try:
            print("\nüìà Demo 1: Wind Strength Progression")
            strengths = [0, 2, 4, 6, 8]
            for strength in strengths:
                print(f"  Setting wind strength to {strength}...")
                self.set_wind_strength(strength)
                self.set_wind_direction(1, 0, 0)
                self.hover(2)
                pos = self.get_position()
                print(f"    Position after wind {strength}: ({pos[0]:.2f}, {pos[1]:.2f}, {pos[2]:.2f})")
            print("\nüß≠ Demo 2: Wind Direction Changes")
            self.set_wind_strength(4)
            directions = [([1, 0, 0], "East"), ([0, 1, 0], "North"), ([-1, 0, 0], "West"), ([0, -1, 0], "South")]
            center_pos = self.get_position()
            for direction, name in directions:
                print(f"  Wind from {name}...")
                self.move_to_position(*center_pos)
                time.sleep(1)
                self.set_wind_direction(*direction)
                self.hover(3)
                pos = self.get_position()
                print(f"    Position: ({pos[0]:.2f}, {pos[1]:.2f}, {pos[2]:.2f})")
            print("\nüìç Demo 3: Wind Zones")
            self.create_realistic_wind_scenario()
            zones_to_visit = [([0, 0, 1.5], "Launch Area (Calm)"), ([2, 2, 1.5], "Obstacle Area (Moderate)"), ([2.5, 4.5, 1.5], "Mission Area (Strong)")]
            for pos, zone_name in zones_to_visit:
                print(f"  Flying to {zone_name}...")
                self.move_to_position(*pos)
                self.hover(2)
                final_pos = self.get_position()
                print(f"    Final position: ({final_pos[0]:.2f}, {final_pos[1]:.2f}, {final_pos[2]:.2f})")
            self.set_calm_conditions()
            self.land()
            print("‚úÖ Wind demonstration complete")
            return True
        except Exception as e:
            print(f"‚ùå Wind demonstration failed: {e}")
            self.set_calm_conditions()
            self.land()
            return False

    def _init_real_drone(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏î‡∏£‡∏ô‡∏à‡∏£‡∏¥‡∏á"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ drone instance ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if hasattr(self, 'drone') and self.drone is not None:
                try:
                    self.drone.cleanup()
                except:
                    pass
                    
            print("üîß Initializing DroneTello...")
            self.drone = DroneTello(show_cam=False, enable_mission_pad=False)  # ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á show_cam ‡πÅ‡∏•‡∏∞ mission_pad
            time.sleep(3)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
            
            battery = self.drone.get_battery()
            print(f"‚úÖ Connected to real drone - Battery: {battery}%")
            return True
        
        except Exception as e:
            print(f"‚ùå Failed to connect to real drone: {e}")
            self.use_real_drone = False
            return False

    def _init_camera_system(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ QR Scanner"""
        if self.use_simulation and self.sim is not None:
            try:
                self.camera = DroneCamera(self.sim)
                self.qr_scanner = QRCodeScanner()
                
                # ‡πÉ‡∏ä‡πâ ImprovedMissionPadDetector ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if IMPROVED_MISSION_PAD_AVAILABLE:
                    self.mission_pad_detector = ImprovedMissionPadDetector()
                    print("‚úÖ Using ImprovedMissionPadDetector")
                elif MISSION_PAD_AVAILABLE:
                    self.mission_pad_detector = MissionPadDetector()
                    print("‚úÖ Using standard MissionPadDetector")
                else:
                    self.mission_pad_detector = MissionPadDetector()  # Fallback
                    print("‚ö†Ô∏è Using fallback MissionPadDetector")
                
                print("‚úÖ Camera system initialized")
            except Exception as e:
                print(f"‚ö†Ô∏è Camera system initialization failed: {e}")
                
        elif self.use_real_drone:
            try:
                self.qr_scanner = QRCodeScanner()
                
                # ‡πÉ‡∏ä‡πâ ImprovedMissionPadDetector ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if IMPROVED_MISSION_PAD_AVAILABLE:
                    self.mission_pad_detector = ImprovedMissionPadDetector()
                    print("‚úÖ Using ImprovedMissionPadDetector")
                elif MISSION_PAD_AVAILABLE:
                    self.mission_pad_detector = MissionPadDetector()
                    print("‚úÖ Using standard MissionPadDetector")
                else:
                    self.mission_pad_detector = MissionPadDetector()  # Fallback
                    print("‚ö†Ô∏è Using fallback MissionPadDetector")
                
                print("‚úÖ QR Scanner and Mission Pad Detector initialized")
            except Exception as e:
                print(f"‚ö†Ô∏è Scanner system initialization failed: {e}")

#‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏ß‡πÑ‡∏õ
    def _update_current_position(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô"""
        if self.use_simulation and self.drone_handle is not None:
            try:
                pos = self.sim.getObjectPosition(self.drone_handle, -1)
                self.current_position = list(pos)
            except Exception as e:
                print(f"‚ö†Ô∏è Failed to update position: {e}")

    def get_orientation(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• orientation ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô"""
        try:
            if self.use_simulation and self.drone_handle is not None:
                orientation = self.sim.getObjectOrientation(self.drone_handle, -1)
                self.orientation_matrix = orientation
                self.current_heading = math.degrees(orientation[2]) % 360
                
                return {
                    'heading': self.current_heading,
                    'roll': math.degrees(orientation[0]),
                    'pitch': math.degrees(orientation[1]),
                    'yaw': math.degrees(orientation[2])
                }
            else:
                return {
                    'heading': self.current_heading,
                    'roll': 0.0,
                    'pitch': 0.0,
                    'yaw': self.current_heading
                }
                
        except Exception as e:
            print(f"‚ùå Failed to get orientation: {e}")
            return {
                'heading': self.current_heading,
                'roll': 0.0,
                'pitch': 0.0,
                'yaw': self.current_heading
            }

    def update_orientation(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï orientation ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            orientation_data = self.get_orientation()
            self.current_heading = orientation_data['heading']
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to update orientation: {e}")

    def _move_to_position_naturally(self, target_pos, duration=None):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥"""
        if self.is_moving:
            print("‚ö†Ô∏è Drone is already moving")
            return False
        
        if not self.use_simulation or self.drone_handle is None:
            print("‚ùå Simulation not available")
            return False
        
        self.is_moving = True
        self.target_position = target_pos.copy()
        
        try:
            start_pos = self.current_position.copy()
            
            dx = target_pos[0] - start_pos[0]
            dy = target_pos[1] - start_pos[1]
            dz = target_pos[2] - start_pos[2]
            distance = math.sqrt(dx*dx + dy*dy + dz*dz)
            
            if distance < self.position_tolerance:
                self.is_moving = False
                return True
            
            if duration is None:
                move_duration = distance / self.max_speed
            else:
                move_duration = duration
            
            steps = max(10, int(move_duration * 20))
            dt = move_duration / steps
            
            print(f"üéØ Moving to ({target_pos[0]:.2f}, {target_pos[1]:.2f}, {target_pos[2]:.2f}) - Distance: {distance:.2f}m, Time: {move_duration:.2f}s")
            
            for i in range(steps + 1):
                if not self.is_moving:
                    break
                
                t = i / steps
                smooth_t = 3*t*t - 2*t*t*t
                
                current_x = start_pos[0] + dx * smooth_t
                current_y = start_pos[1] + dy * smooth_t
                current_z = start_pos[2] + dz * smooth_t
                
                self.sim.setObjectPosition(self.drone_handle, -1, [current_x, current_y, current_z])
                self.current_position = [current_x, current_y, current_z]
                
                time.sleep(dt)
            
            self._update_current_position()
            final_distance = math.sqrt(
                (self.current_position[0] - target_pos[0])**2 +
                (self.current_position[1] - target_pos[1])**2 +
                (self.current_position[2] - target_pos[2])**2
            )
            
            success = final_distance < self.position_tolerance
            if success:
                print(f"‚úÖ Reached target position")
            else:
                print(f"‚ö†Ô∏è Close to target (error: {final_distance:.3f}m)")
            
            self.is_moving = False
            return success
            
        except Exception as e:
            print(f"‚ùå Movement failed: {e}")
            self.is_moving = False
            return False

    def takeoff(self, height=100):
        """‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏¥‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢: cm)"""
        if self.is_flying:
            print("‚ö†Ô∏è Drone is already flying")
            return True
        
        print(f"üöÅ Taking off to {height}cm...")
        
        if self.use_simulation and self.drone_handle is not None:
            self._update_current_position()
            target_pos = self.current_position.copy()
            target_pos[2] = height / 100.0  # ‡πÅ‡∏õ‡∏•‡∏á cm ‡πÄ‡∏õ‡πá‡∏ô m ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏¥‡∏°
            
            success = self._move_to_position_naturally(target_pos, duration=3.0)
            
        elif self.use_real_drone:
            try:
                self.drone.takeoff()
                time.sleep(3)
                success = True
            except Exception as e:
                print(f"‚ùå Takeoff failed: {e}")
                success = False
        else:
            print("‚ùå No drone interface available")
            success = False
        
        if success:
            self.is_flying = True
            print("‚úÖ Takeoff complete")
        
        return success

    def land(self):
        """‡∏•‡∏á‡∏à‡∏≠‡∏î"""
        if not self.is_flying:
            print("‚ö†Ô∏è Drone is not flying")
            return True
        
        print("üõ¨ Landing...")
        
        if self.use_simulation and self.drone_handle is not None:
            self._update_current_position()
            target_pos = self.current_position.copy()
            target_pos[2] = 0.1
            
            success = self._move_to_position_naturally(target_pos, duration=3.0)
            
        elif self.use_real_drone:
            try:
                self.drone.land()
                time.sleep(3)
                success = True
            except Exception as e:
                print(f"‚ùå Landing failed: {e}")
                success = False
        else:
            success = False
        
        if success:
            self.is_flying = False
            print("‚úÖ Landing complete")
        
        return success

    def hover(self, duration):
        """‡πÇ‡∏Æ‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏•‡∏≠‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà)"""
        if not self.is_flying:
            print("‚ö†Ô∏è Drone must be flying first")
            return False
        
        print(f"üöÅ Hovering for {duration} seconds...")
        time.sleep(duration)
        print("‚úÖ Hover complete")
        return True

    def move_forward(self, distance):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢: cm)"""
        return self._move_relative([distance/100.0, 0, 0])

    def move_back(self, distance):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á (‡∏´‡∏ô‡πà‡∏ß‡∏¢: cm)"""
        return self._move_relative([-distance/100.0, 0, 0])

    def move_left(self, distance):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (‡∏´‡∏ô‡πà‡∏ß‡∏¢: cm)"""
        return self._move_relative([0, distance/100.0, 0])

    def move_right(self, distance):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ (‡∏´‡∏ô‡πà‡∏ß‡∏¢: cm)"""
        return self._move_relative([0, -distance/100.0, 0])

    def move_up(self, distance):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢: cm)"""
        return self._move_relative([0, 0, distance/100.0])

    def move_down(self, distance):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á (‡∏´‡∏ô‡πà‡∏ß‡∏¢: cm)"""
        return self._move_relative([0, 0, -distance/100.0])

    def _move_relative(self, relative_pos):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏£‡∏ô‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ"""
        if not self.is_flying:
            print("‚ö†Ô∏è Drone must be flying first")
            return False
        
        self._update_current_position()
        
        # ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô
        if self.use_simulation and self.drone_handle is not None:
            try:
                current_orientation = self.sim.getObjectOrientation(self.drone_handle, -1)
                yaw = current_orientation[2]  # ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏Å‡∏ô Z
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å local coordinates ‡πÄ‡∏õ‡πá‡∏ô global coordinates
                cos_yaw = math.cos(yaw)
                sin_yaw = math.sin(yaw)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô global coordinates
                global_x = relative_pos[0] * cos_yaw - relative_pos[1] * sin_yaw
                global_y = relative_pos[0] * sin_yaw + relative_pos[1] * cos_yaw
                global_z = relative_pos[2]
                
                target_pos = [
                    self.current_position[0] + global_x,
                    self.current_position[1] + global_y,
                    self.current_position[2] + global_z
                ]
                
            except Exception as e:
                print(f"‚ùå Failed to get orientation: {e}")
                # fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
                target_pos = [
                    self.current_position[0] + relative_pos[0],
                    self.current_position[1] + relative_pos[1],
                    self.current_position[2] + relative_pos[2]
                ]
        else:
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏£‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á orientation ‡πÑ‡∏î‡πâ
            target_pos = [
                self.current_position[0] + relative_pos[0],
                self.current_position[1] + relative_pos[1],
                self.current_position[2] + relative_pos[2]
            ]
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        target_pos[2] = max(0.1, target_pos[2])
        
        if self.use_real_drone:
            # ‡πÇ‡∏î‡∏£‡∏ô‡∏à‡∏£‡∏¥‡∏á: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
            try:
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô cm ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤
                x_cm = max(-500, min(500, int(relative_pos[0] * 100)))
                y_cm = max(-500, min(500, int(relative_pos[1] * 100)))
                z_cm = max(-500, min(500, int(relative_pos[2] * 100)))
                
                if abs(x_cm) > 20 or abs(y_cm) > 20 or abs(z_cm) > 20:
                    self.drone.go_xyz_speed(x_cm, y_cm, z_cm, 50)
                    time.sleep(abs(max(x_cm, y_cm, z_cm)) / 50 + 1)
                
                return True
            except Exception as e:
                print(f"‚ùå Real drone movement failed: {e}")
                return False
        else:
            return self._move_to_position_naturally(target_pos)

    def rotate_clockwise(self, degrees):
        """‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤"""
        return self._rotate(degrees)

    def rotate_counter_clockwise(self, degrees):
        """‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏ß‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤"""
        return self._rotate(-degrees)

    def _rotate(self, degrees):
        """‡∏´‡∏°‡∏∏‡∏ô‡πÇ‡∏î‡∏£‡∏ô"""
        if not self.is_flying:
            print("‚ö†Ô∏è Drone must be flying first")
            return False
        
        print(f"üîÑ Rotating {degrees} degrees...")
        
        if self.use_simulation:
            try:
                # ‡πÉ‡∏ô‡∏ã‡∏¥‡∏°: ‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö smooth
                current_orient = self.sim.getObjectOrientation(self.drone_handle, -1)
                target_orient = list(current_orient)
                target_orient[2] += math.radians(degrees)
                
                # ‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö smooth
                steps = max(10, int(abs(degrees) / 10))
                for i in range(steps + 1):
                    t = i / steps
                    smooth_t = 3*t*t - 2*t*t*t
                    
                    current_yaw = current_orient[2] + math.radians(degrees) * smooth_t
                    orient = [current_orient[0], current_orient[1], current_yaw]
                    
                    self.sim.setObjectOrientation(self.drone_handle, -1, orient)
                    time.sleep(0.05)
                
                print("‚úÖ Rotation complete")
                return True
                
            except Exception as e:
                print(f"‚ùå Rotation failed: {e}")
                return False
                
        elif self.use_real_drone:
            try:
                if degrees > 0:
                    self.drone.rotate_clockwise(int(degrees))
                else:
                    self.drone.rotate_counter_clockwise(int(abs(degrees)))
                time.sleep(abs(degrees) / 90 + 1)
                return True
            except Exception as e:
                print(f"‚ùå Real drone rotation failed: {e}")
                return False
        
        return False

    def move_to_position(self, x, y, z):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        if not self.is_flying:
            print("‚ö†Ô∏è Drone must be flying first")
            return False
        
        target_pos = [x, y, max(0.1, z)]
        return self._move_to_position_naturally(target_pos)

    def get_position(self):
        """‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        self._update_current_position()
        return self.current_position.copy()

    def get_battery(self):
        """‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà"""
        if self.use_real_drone:
            try:
                return self.drone.get_battery()
            except:
                return -1
        else:
            # ‡πÉ‡∏ô‡∏ã‡∏¥‡∏°: ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
            return 85

    def capture(self, count=3, delay=1.5):
        """‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"""
        if self.use_simulation:
            print("üöÅ Using camera in simulator")
            if not self.camera:
                print("‚ùå Camera not initialized")
                return None
            try:
                img_path = self.camera.simcapture()
                print(f"üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {img_path}")
                return img_path
            except Exception as e:
                print(f"‚ùå ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                return None
        
        elif self.use_real_drone:
            print("üöÅ ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô‡∏à‡∏£‡∏¥‡∏á")
            try:
                return self.drone.capture(count=count, delay=delay)
            except Exception as e:
                print(f"‚ùå ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                return []
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏Å‡∏•‡πâ‡∏≠‡∏á")
            return []

    def take_bottom_picture(self):
        """‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏á - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"""
        if self.use_simulation:
            print("üöÅ Using bottom camera in simulator")
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if not self.camera:
                print("üì∏ Initializing camera system...")
                self._init_camera_system()
            
            if not self.camera:
                print("‚ùå Camera not initialized")
                return None
                
            try:
                print("üì∏ Taking bottom picture...")
                img_path = self.camera.simcapturebottom()
                print(f"üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {img_path}")
                return img_path
            except Exception as e:
                print(f"‚ùå ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                return None
        elif self.use_real_drone:
            print("üöÅ Using Real Camera Drone (bottom)")
            # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏£‡∏ô‡∏à‡∏£‡∏¥‡∏á - ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            return self.take_picture()
        else:
            print("‚ùå No camera interface available")
            return None

    def scan_qr(self, image_path=None):
        """‡πÅ‡∏™‡∏Å‡∏ô QR Code ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û - ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á image_path ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡πà‡∏≠‡∏ô"""
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if not self.camera and self.use_simulation:
            print("üì∏ Initializing camera system for QR scanning...")
            self._init_camera_system()
        
        if not self.camera or not self.qr_scanner:
            print("‚ùå Camera or QR Scanner not initialized")
            return None
        
        try:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ image_path ‡πÉ‡∏´‡πâ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
            if not image_path:
                print("üì∏ No image provided, taking new picture...")
                img_paths = self.take_picture(count=1)
                if not img_paths:
                    print("‚ùå Failed to take picture for QR scanning")
                    return None
                image_path = img_paths[0]
            
            print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏Å‡∏ô QR Code ‡∏à‡∏≤‡∏Å: {image_path}")
            qr_results = self.qr_scanner.scan_qr_code(image_path)
            
            if qr_results:
                print(f"‚úÖ ‡∏û‡∏ö QR Code ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(qr_results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                return qr_results
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏†‡∏≤‡∏û")
                return None
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏Å‡∏ô QR Code: {e}")
            return None

    def scan_mission_pad(self):
        """‡πÅ‡∏™‡∏Å‡∏ô Mission Pad"""
        try:
            # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡πà‡∏≠‡∏ô
            img_path = self.take_picture()
            if img_path:
                print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Mission Pad...")
                # ‡πÉ‡∏ä‡πâ mission_pad_detector ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                pad_id = self.mission_pad_detector.get_mission_pad_id()
                if pad_id:
                    print(f"‚úÖ ‡∏û‡∏ö Mission Pad: {pad_id}")
                    return pad_id
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Mission Pad")
                    return None
            else:
                print("‚ùå Cannot capture image for mission pad scanning")
                return None
        except Exception as e:
            print(f"‚ùå Mission pad scanning error: {e}")
            return None

    def get_mission_pad_id(self):
        """‡∏î‡∏∂‡∏á Mission Pad ID ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏Å‡∏ô‡∏à‡∏£‡∏¥‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ mission_pad_detector ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            if not hasattr(self, 'mission_pad_detector') or not self.mission_pad_detector:
                print("‚ùå Mission Pad Detector not found - call enable_mission_pads() first")
                return None
            
            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ detection ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.mission_pad_detector.detection_enabled:
                print("‚ö†Ô∏è Mission Pad detection disabled - call enable_mission_pads() first")
                return None
            
            if self.use_simulation:
                # ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå - ‡πÅ‡∏Ñ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                print("üì∏ Taking picture for mission pad detection...")
                image_path = self.take_bottom_picture()
                return self.mission_pad_detector.get_mission_pad_id(image_path)
            else:
                # ‡πÉ‡∏ä‡πâ djitellopy ‡∏Å‡∏±‡∏ö‡πÇ‡∏î‡∏£‡∏ô‡∏à‡∏£‡∏¥‡∏á
                return self.mission_pad_detector.get_mission_pad_id()
                
        except Exception as e:
            print(f"‚ùå Mission Pad detection error: {e}")
            return None

    def enable_mission_pads(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Mission Pad detection"""
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°
            if not self.mission_pad_detector:
                print("üì∏ Initializing Mission Pad Detector...")
                self._init_camera_system()
            
            if self.mission_pad_detector:
                self.mission_pad_detector.enable_mission_pad_detection()
                print("‚úÖ Mission Pad detection enabled")
            else:
                print("‚ùå Mission Pad Detector not initialized")
                
        except Exception as e:
            print(f"‚ùå Failed to enable mission pads: {e}")

    def disable_mission_pads(self):
        """‡∏õ‡∏¥‡∏î Mission Pad detection"""
        try:
            if self.mission_pad_detector:
                self.mission_pad_detector.disable_mission_pad_detection()
                print("‚úÖ Mission Pad detection disabled")
            else:
                print("‚ö†Ô∏è Mission Pad Detector not initialized")
        except Exception as e:
            print(f"‚ùå Failed to disable mission pads: {e}")
            
    def set_mission_pad_confidence(self, threshold):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mission Pad detection"""
        try:
            if self.mission_pad_detector:
                self.mission_pad_detector.set_confidence_threshold(threshold)
            else:
                print("‚ö†Ô∏è Mission Pad Detector not initialized")
        except Exception as e:
            print(f"‚ùå Failed to set confidence threshold: {e}")
            
    def get_mission_pad_templates_info(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Mission Pad templates"""
        try:
            if self.mission_pad_detector:
                return self.mission_pad_detector.get_template_info()
            else:
                print("‚ö†Ô∏è Mission Pad Detector not initialized")
                return {}
        except Exception as e:
            print(f"‚ùå Failed to get template info: {e}")
            return {}
            
    def test_mission_pad_detection(self, test_image_path):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        try:
            if not self.mission_pad_detector:
                print("üì∏ Initializing Mission Pad Detector...")
                self._init_camera_system()
            
            if self.mission_pad_detector:
                return self.mission_pad_detector.test_detection(test_image_path)
            else:
                print("‚ùå Mission Pad Detector not initialized")
                return None
        except Exception as e:
            print(f"‚ùå Test detection failed: {e}")
            return None

    def smart_mission_pad_scan(self, image_path=None, use_multiple_methods=True):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        
        Args:
            image_path (str): path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà)
            use_multiple_methods (bool): ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            
        Returns:
            int: Mission Pad ID ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
        """
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°
            if not self.mission_pad_detector:
                print("üì∏ Initializing Mission Pad Detector...")
                self._init_camera_system()
            
            if not self.mission_pad_detector:
                print("‚ùå Mission Pad Detector not available")
                return None
            
            # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            if not self.mission_pad_detector.detection_enabled:
                self.mission_pad_detector.enable_mission_pad_detection()
            
            # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ image_path
            if not image_path:
                print("üì∏ Taking new picture for mission pad detection...")
                image_path = self.take_bottom_picture()
                if not image_path:
                    print("‚ùå Failed to take picture")
                    return None
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            if not os.path.exists(image_path):
                print(f"‚ùå Image file not found: {image_path}")
                return None
            
            print(f"üîç Analyzing image: {image_path}")
            
            # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            if hasattr(self.mission_pad_detector, 'debug_image_analysis'):
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ImprovedMissionPadDetector
                result = self.mission_pad_detector.get_mission_pad_id(image_path)
                if result is None and use_multiple_methods:
                    print("üîß Running detailed analysis...")
                    self.mission_pad_detector.debug_image_analysis(image_path)
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô MissionPadDetector ‡∏õ‡∏Å‡∏ï‡∏¥
                result = self.mission_pad_detector.get_mission_pad_id(image_path)
            
            return result
            
        except Exception as e:
            print(f"‚ùå Smart mission pad scan error: {e}")
            return None

    def test_mission_pad_detection_simple(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ"""
        try:
            print("üß™ Testing Mission Pad Detection (Simple Method)")
            
            # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            print("üì∏ Taking test picture...")
            image_path = self.take_bottom_picture()
            
            if not image_path:
                print("‚ùå Failed to take test picture")
                return None
            
            # ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            result = self.smart_mission_pad_scan(image_path)
            
            if result:
                print(f"‚úÖ Test successful! Detected Mission Pad: {result}")
                return result
            else:
                print("‚ùå No Mission Pad detected in test")
                
                # ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
                print("üîÑ Trying alternative detection methods...")
                
                # ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ threshold
                original_threshold = self.mission_pad_detector.confidence_threshold
                self.mission_pad_detector.set_confidence_threshold(0.1)  # ‡∏•‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå
                
                result2 = self.smart_mission_pad_scan(image_path)
                
                # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
                self.mission_pad_detector.set_confidence_threshold(original_threshold)
                
                if result2:
                    print(f"‚úÖ Alternative method successful! Detected Mission Pad: {result2}")
                    return result2
                else:
                    print("‚ùå All detection methods failed")
                    return None
                    
        except Exception as e:
            print(f"‚ùå Test error: {e}")
            return None

    def scan_mission_pad_enhanced(self, attempts=3, delay=1.0):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡πÅ‡∏ö‡∏ö Enhanced - ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        
        Args:
            attempts (int): ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≠‡∏á
            delay (float): ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á
            
        Returns:
            int: Mission Pad ID ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
        """
        try:
            print(f"üîç Enhanced Mission Pad scanning ({attempts} attempts)...")
            
            results = []
            
            for attempt in range(attempts):
                print(f"  Attempt {attempt + 1}/{attempts}")
                
                # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                image_path = self.take_bottom_picture()
                
                if image_path:
                    result = self.smart_mission_pad_scan(image_path)
                    if result:
                        results.append(result)
                        print(f"    ‚úÖ Found: {result}")
                    else:
                        print(f"    ‚ùå No result")
                
                if attempt < attempts - 1:
                    time.sleep(delay)
            
            if results:
                # ‡∏´‡∏≤ result ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                from collections import Counter
                most_common = Counter(results).most_common(1)[0]
                final_result = most_common[0]
                confidence = most_common[1] / len(results)
                
                print(f"üéØ Final result: Mission Pad {final_result} (found {most_common[1]}/{len(results)} times)")
                return final_result
            else:
                print("‚ùå No Mission Pad detected in any attempt")
                return None
                
        except Exception as e:
            print(f"‚ùå Enhanced scan error: {e}")
            return None

    def debug_mission_pad_system(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Mission Pad ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            print("üîß === Mission Pad System Debug ===")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            if not self.mission_pad_detector:
                print("‚ùå Mission Pad Detector not initialized")
                print("üîÑ Trying to initialize...")
                self._init_camera_system()
            
            if not self.mission_pad_detector:
                print("‚ùå Still no Mission Pad Detector")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö templates
            if hasattr(self.mission_pad_detector, 'get_template_info'):
                template_info = self.mission_pad_detector.get_template_info()
                print(f"üìã Templates loaded: {len(template_info)}")
                for pad_id, info in template_info.items():
                    print(f"  - Template {pad_id}: {info['name']} ({info['size']})")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            if hasattr(self.mission_pad_detector, 'detection_enabled'):
                print(f"üîò Detection enabled: {self.mission_pad_detector.detection_enabled}")
                if not self.mission_pad_detector.detection_enabled:
                    print("üîÑ Enabling detection...")
                    self.mission_pad_detector.enable_mission_pad_detection()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö confidence threshold
            if hasattr(self.mission_pad_detector, 'confidence_threshold'):
                print(f"üéØ Confidence threshold: {self.mission_pad_detector.confidence_threshold}")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
            print("üì∏ Testing camera...")
            test_image = self.take_bottom_picture()
            
            if test_image:
                print(f"‚úÖ Camera working: {test_image}")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                if hasattr(self.mission_pad_detector, 'debug_image_analysis'):
                    print("üîç Running detailed analysis...")
                    self.mission_pad_detector.debug_image_analysis(test_image)
                
                return True
            else:
                print("‚ùå Camera not working")
                return False
                
        except Exception as e:
            print(f"‚ùå Debug error: {e}")
            return False

    def disconnect(self):
        if self.is_flying:
            self.land()
        
        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î simulation
        if self.use_simulation and hasattr(self, 'wind_settings'):
            try:
                self.set_calm_conditions()
                print("üå™Ô∏è Wind effects reset to calm")
            except:
                pass
        
        if self.use_simulation:
            self.stop_simulation()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ cleanup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏£‡∏ô‡∏à‡∏£‡∏¥‡∏á
        if self.use_real_drone and hasattr(self, 'drone'):
            try:
                self.drone.cleanup()
            except Exception as e:
                print(f"‚ö†Ô∏è Drone cleanup error: {e}")
        
        print("üëã Drone controller disconnected")
# Import MissionPadDetector from separate file
try:
    from mission_pad_detector import MissionPadDetector
    MISSION_PAD_AVAILABLE = True
except ImportError:
    MISSION_PAD_AVAILABLE = False
    print("‚ö†Ô∏è MissionPadDetector not available")

# Import improved mission pad detector
try:
    from improved_mission_pad_detector import ImprovedMissionPadDetector
    IMPROVED_MISSION_PAD_AVAILABLE = True
    print("‚úÖ ImprovedMissionPadDetector available")
except ImportError:
    IMPROVED_MISSION_PAD_AVAILABLE = False
    print("‚ö†Ô∏è ImprovedMissionPadDetector not available")
    
    # Fallback class
    class ImprovedMissionPadDetector:
        def __init__(self, template_folder='mission_pad_templates'):
            # ‡πÉ‡∏ä‡πâ resource path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PyInstaller
            self.template_folder = get_resource_path(template_folder)
            self.templates = {}
            self.detection_enabled = False
            self.confidence_threshold = 0.3
            print("‚ö†Ô∏è Using fallback ImprovedMissionPadDetector")
        
        def enable_mission_pad_detection(self):
            self.detection_enabled = True
            print("‚úÖ Mission Pad detection enabled (fallback)")
        
        def get_mission_pad_id(self, image_path):
            print("‚ùå Mission pad detection not available (fallback)")
            return None

# Fallback MissionPadDetector class
if not MISSION_PAD_AVAILABLE:
    class MissionPadDetector:
        def __init__(self, template_folder='mission_pad_templates'):
            # ‡πÉ‡∏ä‡πâ resource path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PyInstaller
            self.template_folder = get_resource_path(template_folder)
            self.templates = {}
            self.detection_enabled = False
            self.confidence_threshold = 0.3
            print("‚ö†Ô∏è Using fallback MissionPadDetector")
        
        def enable_mission_pad_detection(self):
            self.detection_enabled = True
            print("‚úÖ Mission Pad detection enabled (fallback)")
        
        def get_mission_pad_id(self, image_path):
            print("‚ùå Mission pad detection not available (fallback)")
            return None
