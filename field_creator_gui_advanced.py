#!/usr/bin/env python3
"""
Drone Odyssey Challenge Field Creator - Advanced GUI Version
‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° GUI ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° Visual Field Designer Tools

Available Tools:
- B.80, B.160, B.240 = ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
- B.[P = ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≤‡∏¢ (Box Left Image)
- B.P] = ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏ß‡∏≤ (Box Right Image)  
- B.P^ = ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ö‡∏ô (Box Top Image)
- B.P_ = ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏á (Box Bottom Image)
- Q = ‡∏Å‡∏•‡πà‡∏≠‡∏á QR Code 230cm (QR Code Box)
- M1-M8 = Mission Pads
- H, H. = Pingpong Zones
- D = Drone
- 0 = Empty Space
"""
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import sys
import os
import threading
import json
from datetime import datetime
import random

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from create_field import FieldManager
except ImportError as e:
    print(f"‚ùå Error importing field manager: {e}")
    sys.exit(1)

try:
    from drone_gui_connector import DroneGUIConnector, create_drone_control_tab
except ImportError as e:
    print(f"‚ùå Error importing drone connector: {e}")
    print("‚ö†Ô∏è Drone control features will be disabled")
    DroneGUIConnector = None
    create_drone_control_tab = None

class AdvancedFieldCreatorGUI:
    """GUI ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏≤‡∏° Drone Odyssey Challenge"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("üèüÔ∏è sDrone Simulator")
        self.root.geometry("1400x900")
        self.root.configure(bg='#2c3e50')
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ style
        self.setup_styles()
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.field_manager = None
        self.is_simulation_running = False
        self.field_grid = [['0' for _ in range(5)] for _ in range(5)]  # 5x5 grid
        self.selected_tool = 'B.80'  # ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏£‡∏ô
        self.drone_connector = None
        if DroneGUIConnector:
            self.drone_connector = DroneGUIConnector()
            # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á callback ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÅ‡∏•‡πâ‡∏ß
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI
        self.setup_ui()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô FieldManager
        self.initialize_field_manager()
    
    def setup_styles(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TTK Styles"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        self.style.configure('Header.TLabel', 
                           foreground='white', 
                           background='#2c3e50',
                           font=('Arial', 16, 'bold'))
        
        self.style.configure('Panel.TFrame', 
                           background='#34495e')
        
        self.style.configure('Tool.TButton',
                           font=('Arial', 9, 'bold'))
    
    def setup_ui(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UI ‡∏´‡∏•‡∏±‡∏Å"""
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=70)
        header_frame.pack(fill=tk.X, padx=5, pady=5)
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(
            header_frame, 
            text="üèüÔ∏è Drone Simsulator", 
            font=('Arial', 18, 'bold'),
            fg='#ecf0f1',
            bg='#2c3e50'
        )
        title_label.pack(pady=15)
        
        subtitle_label = tk.Label(
            header_frame, 
            text="Advanced Visual Field Designer with Interactive Tools", 
            font=('Arial', 10),
            fg='#bdc3c7',
            bg='#2c3e50'
        )
        subtitle_label.pack()
        
        # Main container
        main_container = tk.Frame(self.root, bg='#2c3e50')
        main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Top toolbar
        self.setup_toolbar(main_container)
        
        # Content area
        content_frame = tk.Frame(main_container, bg='#2c3e50')
        content_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Notebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tabs
        self.notebook = ttk.Notebook(content_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Tab 1: Field Designer
        field_tab = ttk.Frame(self.notebook)
        self.notebook.add(field_tab, text="üèüÔ∏è Field Designer")
        
        # Tab 2: Drone Control (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ DroneGUIConnector)
        if self.drone_connector and create_drone_control_tab:
            self.drone_tab = create_drone_control_tab(self.notebook, self.drone_connector)
        
        # Setup tabs
        self.setup_field_designer_tab(field_tab)
        
        # Status bar
        self.setup_status_bar()
    
    def setup_field_designer_tab(self, parent):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Tab ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Field Designer"""
        # Left panel - Visual field designer
        left_panel = tk.Frame(parent, bg='#34495e', relief=tk.RAISED, bd=2)
        left_panel.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # Right panel - Controls and output
        right_panel = tk.Frame(parent, bg='#34495e', relief=tk.RAISED, bd=2)
        right_panel.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
        
        self.setup_visual_designer(left_panel)
        self.setup_control_panel(right_panel)
    
    
    def setup_toolbar(self, parent):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ toolbar ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô"""
        toolbar_frame = tk.Frame(parent, bg='#34495e', height=50)
        toolbar_frame.pack(fill=tk.X, pady=(0, 5))
        toolbar_frame.pack_propagate(False)
        
        # Tool selection
        tools_frame = tk.Frame(toolbar_frame, bg='#34495e')
        tools_frame.pack(side=tk.LEFT, padx=10, pady=10)
        
        tk.Label(tools_frame, text="üõ†Ô∏è Tools:", bg='#34495e', fg='white', font=('Arial', 10, 'bold')).pack(side=tk.LEFT)
        
        # ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏£‡∏ß‡∏° QR Code Box
        tools = [
            ('üü´', 'B.80', 'Box 80cm'),
            ('üè¢', 'B.160', 'Box 160cm'),
            ('üèóÔ∏è', 'B.240', 'Box 240cm'),
            ('üñºÔ∏è', 'B.[P', 'Box Left Image'),
            ('üé®', 'B.P]', 'Box Right Image'),
            ('üñåÔ∏è', 'B.P^', 'Box Top Image'),
            ('üé≠', 'B.P_', 'Box Bottom Image'),
            ('üì±', 'Q', 'QR Code Box 230cm'),
            ('ÔøΩüî¥', 'M1', 'Mission Pad 1'),
            ('üü¢', 'M2', 'Mission Pad 2'),
            ('üîµ', 'M3', 'Mission Pad 3'),
            ('üü°', 'M4', 'Mission Pad 4'),
            ('üü£', 'M5', 'Mission Pad 5'),
            ('‚ö´', 'M6', 'Mission Pad 6'),
            ('üü§', 'M7', 'Mission Pad 7'),
            ('üî∂', 'M8', 'Mission Pad 8'),
            ('üü©', 'H', 'Pingpong Zone'),
            ('üü¶', 'H.', 'Pingpong + Balls'),
            ('üöÅ', 'D', 'Drone'),
            ('‚¨ú', '0', 'Empty')
        ]
        
        self.tool_buttons = {}
        for emoji, tool_id, tooltip in tools:
            btn = tk.Button(
                tools_frame,
                text=f"{emoji}\n{tool_id}",
                command=lambda t=tool_id: self.select_tool(t),
                width=4,
                font=('Arial', 8, 'bold'),
                bg='#3498db' if tool_id == self.selected_tool else '#7f8c8d',
                fg='white',
                relief=tk.RAISED
            )
            btn.pack(side=tk.LEFT, padx=2)
            self.tool_buttons[tool_id] = btn
        
        # Simulation controls
        sim_frame = tk.Frame(toolbar_frame, bg='#34495e')
        sim_frame.pack(side=tk.RIGHT, padx=10, pady=10)
        
        self.start_btn = tk.Button(
            sim_frame, 
            text="‚ñ∂Ô∏è Start", 
            command=self.start_simulation,
            bg='#27ae60',
            fg='white',
            font=('Arial', 9, 'bold'),
            width=8
        )
        self.start_btn.pack(side=tk.LEFT, padx=2)
        
        self.stop_btn = tk.Button(
            sim_frame, 
            text="‚èπÔ∏è Stop", 
            command=self.stop_simulation,
            bg='#e74c3c',
            fg='white',
            font=('Arial', 9, 'bold'),
            width=8,
            state=tk.DISABLED
        )
        self.stop_btn.pack(side=tk.LEFT, padx=2)
    
    def setup_visual_designer(self, parent):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏ö visual"""
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        header = tk.Label(parent, text="üé® Visual Field Designer", 
                         bg='#34495e', fg='white', font=('Arial', 12, 'bold'))
        header.pack(pady=10)
        
        # Grid canvas
        canvas_frame = tk.Frame(parent, bg='#34495e')
        canvas_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        self.field_canvas = tk.Canvas(
            canvas_frame, 
            bg='#ecf0f1',
            relief=tk.SUNKEN,
            bd=2
        )
        self.field_canvas.pack(fill=tk.BOTH, expand=True)
        
        # Bind events
        self.field_canvas.bind('<Button-1>', self.on_canvas_click)
        self.field_canvas.bind('<B1-Motion>', self.on_canvas_drag)
        self.field_canvas.bind('<Configure>', self.on_canvas_resize)
        
        # Control buttons
        control_frame = tk.Frame(parent, bg='#34495e')
        control_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Button(control_frame, text="üé≤ Random Fill", command=self.random_fill,
                 bg='#9b59b6', fg='white', font=('Arial', 9, 'bold')).pack(side=tk.LEFT, padx=2)
        
        tk.Button(control_frame, text="üßπ Clear Grid", command=self.clear_grid,
                 bg='#f39c12', fg='white', font=('Arial', 9, 'bold')).pack(side=tk.LEFT, padx=2)
        
        tk.Button(control_frame, text="üèóÔ∏è Build Field", command=self.build_field_from_grid,
                 bg='#27ae60', fg='white', font=('Arial', 9, 'bold')).pack(side=tk.LEFT, padx=2)
        
        tk.Button(control_frame, text="üíæ Save Design", command=self.save_design,
                 bg='#3498db', fg='white', font=('Arial', 9, 'bold')).pack(side=tk.RIGHT, padx=2)
        
        tk.Button(control_frame, text="üìÅ Load Design", command=self.load_design,
                 bg='#8e44ad', fg='white', font=('Arial', 9, 'bold')).pack(side=tk.RIGHT, padx=2)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        self.draw_field_grid()
    
    def setup_control_panel(self, parent):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤"""
        parent.configure(width=350)
        
        # Quick Actions
        quick_frame = tk.LabelFrame(parent, text="‚ö° Quick Actions", 
                                   bg='#34495e', fg='white', font=('Arial', 10, 'bold'))
        quick_frame.pack(fill=tk.X, padx=10, pady=5)
        
        quick_buttons = [
            ("üèóÔ∏è Default Preset", self.create_default_field, '#3498db'),
            ("üèüÔ∏è Complete Field", self.create_complete_field, '#27ae60'),
            ("üèÉ Test Field", self.create_test_field, '#e67e22'),
            ("üßπ Clear All", self.clear_field, '#e74c3c')
        ]
        
        for text, command, color in quick_buttons:
            tk.Button(quick_frame, text=text, command=command,
                     bg=color, fg='white', font=('Arial', 9, 'bold'),
                     width=20).pack(pady=2, padx=5)
        
        # Field Information
        info_frame = tk.LabelFrame(parent, text="üìä Field Information", 
                                  bg='#34495e', fg='white', font=('Arial', 10, 'bold'))
        info_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(info_frame, text="üìã List Objects", command=self.list_field_objects,
                 width=20).pack(pady=2, padx=5)
        
        tk.Button(info_frame, text="üìä Statistics", command=self.show_statistics,
                 width=20).pack(pady=2, padx=5)
        
        # String Input
        string_frame = tk.LabelFrame(parent, text="üìù String Input", 
                                    bg='#34495e', fg='white', font=('Arial', 10, 'bold'))
        string_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.string_text = tk.Text(string_frame, height=6, font=('Consolas', 8))
        self.string_text.pack(fill=tk.X, padx=5, pady=5)
        
        # Insert default example
        default_example = """0-H-0-0-0
H-H-0-B.80-0
H-H-0-0-0
0-0-0-0-M1
M2-0-0-0-0"""
        self.string_text.insert(tk.END, default_example)
        
        tk.Button(string_frame, text="üé® Create from String", 
                 command=self.create_from_string,
                 bg='#9b59b6', fg='white', font=('Arial', 9, 'bold'),
                 width=20).pack(pady=2, padx=5)
        
        tk.Button(string_frame, text="üìÑ Grid to String", 
                 command=self.grid_to_string,
                 bg='#34495e', fg='white', font=('Arial', 9, 'bold'),
                 width=20).pack(pady=2, padx=5)
        
        # Drone Integration
        drone_frame = tk.LabelFrame(parent, text="üöÅ Drone Integration", 
                                   bg='#34495e', fg='white', font=('Arial', 10, 'bold'))
        drone_frame.pack(fill=tk.X, padx=10, pady=5)
        
        if self.drone_connector:
            # Quick drone actions
            drone_quick_frame = tk.Frame(drone_frame, bg='#34495e')
            drone_quick_frame.pack(fill=tk.X, pady=5)
            
            tk.Button(drone_quick_frame, text="üì° Connect Sim Drone", 
                     command=self.connect_simulation_drone,
                     bg='#3498db', fg='white', font=('Arial', 9, 'bold'),
                     width=20).pack(pady=2, padx=5)
            
            tk.Button(drone_quick_frame, text="üöÅ Quick Takeoff", 
                     command=self.quick_takeoff,
                     bg='#27ae60', fg='white', font=('Arial', 9, 'bold'),
                     width=20).pack(pady=2, padx=5)
            
            tk.Button(drone_quick_frame, text="üì∏ Take Picture", 
                     command=self.quick_take_picture,
                     bg='#9b59b6', fg='white', font=('Arial', 9, 'bold'),
                     width=20).pack(pady=2, padx=5)
            
            tk.Button(drone_quick_frame, text="üõ¨ Quick Land", 
                     command=self.quick_land,
                     bg='#f39c12', fg='white', font=('Arial', 9, 'bold'),
                     width=20).pack(pady=2, padx=5)
            
            # Auto Mission buttons
            mission_buttons_frame = tk.Frame(drone_frame, bg='#34495e')
            mission_buttons_frame.pack(fill=tk.X, pady=5)
            
            tk.Button(mission_buttons_frame, text="üîÑ Basic Mission", 
                     command=lambda: self.start_drone_auto_mission("basic"),
                     bg='#1abc9c', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
            tk.Button(mission_buttons_frame, text="üîç Scan Area", 
                     command=lambda: self.start_drone_auto_mission("scan_area"),
                     bg='#16a085', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
            tk.Button(mission_buttons_frame, text="üéØ Find Mission Pads", 
                     command=lambda: self.start_drone_auto_mission("find_mission_pads"),
                     bg='#e74c3c', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
            tk.Button(mission_buttons_frame, text="üõë Stop Mission", 
                     command=self.stop_drone_auto_mission,
                     bg='#c0392b', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
            # Mission Pad Detection buttons
            mission_pad_buttons_frame = tk.Frame(drone_frame, bg='#34495e')
            mission_pad_buttons_frame.pack(fill=tk.X, pady=5)
            
            tk.Button(mission_pad_buttons_frame, text="üéØ Enable Mission Pads", 
                     command=self.enable_mission_pads,
                     bg='#c0392b', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
            tk.Button(mission_pad_buttons_frame, text="üîç Detect (Auto)", 
                     command=self.detect_mission_pads,
                     bg='#8e44ad', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
            tk.Button(mission_pad_buttons_frame, text="üî¨ Detect (Improved)", 
                     command=self.detect_mission_pads_improved,
                     bg='#9b59b6', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
            tk.Button(mission_pad_buttons_frame, text="üîß Detect (Basic)", 
                     command=self.detect_mission_pads_basic,
                     bg='#7f8c8d', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
            # Status and disconnect
            status_frame = tk.Frame(drone_frame, bg='#34495e')
            status_frame.pack(fill=tk.X, pady=5)
            
            tk.Button(status_frame, text="üìä Drone Status", 
                     command=self.get_drone_status,
                     bg='#95a5a6', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
            tk.Button(status_frame, text="‚ùå Disconnect Drone", 
                     command=self.disconnect_drone,
                     bg='#7f8c8d', fg='white', font=('Arial', 8, 'bold'),
                     width=18).pack(pady=1, padx=5)
            
        else:
            tk.Label(drone_frame, text="‚ö†Ô∏è Drone connector not available", 
                    bg='#34495e', fg='#e74c3c', font=('Arial', 9)).pack(pady=10)
        
        # Output Log
        log_frame = tk.LabelFrame(parent, text="üìù Output Log", 
                                 bg='#34495e', fg='white', font=('Arial', 10, 'bold'))
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.output_text = scrolledtext.ScrolledText(
            log_frame, 
            height=8, 
            font=('Consolas', 8),
            bg='#2c3e50',
            fg='#ecf0f1',
            insertbackground='white'
        )
        self.output_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def setup_status_bar(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ status bar"""
        status_frame = tk.Frame(self.root, bg='#2c3e50', height=30)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        status_frame.pack_propagate(False)
        
        self.status_label = tk.Label(
            status_frame, 
            text="üîÑ Initializing...", 
            bg='#2c3e50', 
            fg='#bdc3c7',
            font=('Arial', 9)
        )
        self.status_label.pack(side=tk.LEFT, padx=10, pady=5)
        
        # Tool info
        self.tool_info_label = tk.Label(
            status_frame, 
            text=f"üõ†Ô∏è Selected: {self.selected_tool}", 
            bg='#2c3e50', 
            fg='#bdc3c7',
            font=('Arial', 9)
        )
        self.tool_info_label.pack(side=tk.RIGHT, padx=10, pady=5)
    
    def draw_field_grid(self):
        """‡∏ß‡∏≤‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á 5x5 field"""
        self.field_canvas.delete("all")
        
        canvas_width = self.field_canvas.winfo_width()
        canvas_height = self.field_canvas.winfo_height()
        
        if canvas_width <= 1 or canvas_height <= 1:
            self.root.after(100, self.draw_field_grid)
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡πà‡∏≠‡∏á
        margin = 20
        grid_size = min(canvas_width - 2*margin, canvas_height - 2*margin)
        cell_size = grid_size // 5
        start_x = (canvas_width - grid_size) // 2
        start_y = (canvas_height - grid_size) // 2
        
        self.cell_size = cell_size
        self.start_x = start_x
        self.start_y = start_y
        
        # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        colors = {
            '0': '#ecf0f1',     # ‡∏ß‡πà‡∏≤‡∏á
            'B.80': '#8b4513',     # ‡∏Å‡∏•‡πà‡∏≠‡∏á 80cm
            'B.160': '#654321',    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 160cm
            'B.240': '#3e2723',    # ‡∏Å‡∏•‡πà‡∏≠‡∏á 240cm
            'B.[P': '#ff6b6b',   # Box Left Image
            'B.P]': '#ff8e8e',   # Box Right Image
            'B.P^': '#ffb3b3',   # Box Top Image
            'B.P_': '#ffd9d9',   # Box Bottom Image
            'Q': '#4a90e2',      # QR Code Box 230cm
            'M1': '#e74c3c',    # Mission pad 1
            'M2': '#27ae60',    # Mission pad 2  
            'M3': '#3498db',    # Mission pad 3
            'M4': '#f1c40f',    # Mission pad 4
            'M5': '#9b59b6',    # Mission pad 5
            'M6': '#1abc9c',    # Mission pad 6
            'M7': '#e67e22',    # Mission pad 7
            'M8': '#95a5a6',    # Mission pad 8
            'H': '#2ecc71',     # Pingpong Zone
            'H.': '#27ae60',    # Pingpong + balls
            'D': '#34495e'      # Drone
        }
        
        # ‡∏ß‡∏≤‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        for row in range(5):
            for col in range(5):
                x = start_x + col * cell_size
                y = start_y + row * cell_size
                
                cell_type = self.field_grid[row][col]
                color = colors.get(cell_type, '#ecf0f1')
                
                # ‡∏ß‡∏≤‡∏î‡∏ä‡πà‡∏≠‡∏á
                self.field_canvas.create_rectangle(
                    x, y, x + cell_size, y + cell_size,
                    fill=color, outline='#34495e', width=2,
                    tags=f"cell_{row}_{col}"
                )
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                text_color = '#2c3e50' if cell_type in ['0', 'M4'] else 'white'
                self.field_canvas.create_text(
                    x + cell_size//2, y + cell_size//2,
                    text=cell_type if cell_type != '0' else f"({col},{row})",
                    fill=text_color, font=('Arial', 10, 'bold'),
                    tags=f"text_{row}_{col}"
                )
    
    def on_canvas_click(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô canvas"""
        if not hasattr(self, 'cell_size'):
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á
        x = event.x - self.start_x
        y = event.y - self.start_y
        
        if x < 0 or y < 0:
            return
        
        col = x // self.cell_size
        row = y // self.cell_size
        
        if 0 <= row < 5 and 0 <= col < 5:
            self.field_grid[row][col] = self.selected_tool
            self.draw_field_grid()
            self.log_message(f"üé® Placed {self.selected_tool} at ({col},{row})")
    
    def on_canvas_drag(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡∏ö‡∏ô canvas"""
        self.on_canvas_click(event)
    
    def on_canvas_resize(self, event):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î canvas"""
        self.draw_field_grid()
    
    def select_tool(self, tool):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠"""
        self.selected_tool = tool
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°
        for tool_id, btn in self.tool_buttons.items():
            if tool_id == tool:
                btn.config(bg='#3498db')
            else:
                btn.config(bg='#7f8c8d')
        
        self.tool_info_label.config(text=f"üõ†Ô∏è Selected: {tool}")
        self.log_message(f"üõ†Ô∏è Selected tool: {tool}")
    
    def random_fill(self):
        """‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á randomly"""
        tools = ['B.80', 'B.[P', 'B.P]', 'B.P^', 'B.P_', 'Q', 'M1', 'M2', 'M3', 'M4', 'H', 'H.', '0', '0', '0']  # ‡πÄ‡∏û‡∏¥‡πà‡∏° QR Code Box ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        
        for row in range(5):
            for col in range(5):
                self.field_grid[row][col] = random.choice(tools)
        
        self.draw_field_grid()
        self.log_message("üé≤ Generated random field layout")
    
    def clear_grid(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        for row in range(5):
            for col in range(5):
                self.field_grid[row][col] = '0'
        
        self.draw_field_grid()
        self.log_message("üßπ Cleared grid layout")
    
    def grid_to_string(self):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô string"""
        field_string = '\n'.join(['-'.join(row) for row in self.field_grid])
        self.string_text.delete(1.0, tk.END)
        self.string_text.insert(1.0, field_string)
        self.log_message("üìÑ Converted grid to string format")
    
    def build_field_from_grid(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        if not self.field_manager:
            messagebox.showerror("Error", "Field Manager not initialized")
            return
        
        # Convert grid to proper format with dashes
        field_string = '\n'.join(['-'.join(row) for row in self.field_grid])
        
        try:
            self.update_status("üèóÔ∏è Building field from grid...")
            self.log_message("üèóÔ∏è Building field from visual grid...")
            
            def build_field():
                try:
                    # ‡πÄ‡∏£‡∏¥‡πà‡∏° simulation ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°)
                    if not self.is_simulation_running:
                        self.field_manager.start_simulation()
                        self.is_simulation_running = True
                        self.log_message("‚úÖ Simulation started")
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
                    self.field_manager.create_tiled_floor()
                    self.log_message("‚úÖ Created tiled floor")
                    
                    # ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°
                    self.field_manager.create_field_from_string(field_string)
                    self.log_message("‚úÖ Field built successfully from grid")
                    self.update_status("‚úÖ Field Built")
                except Exception as e:
                    self.log_message(f"‚ùå Error building field: {e}")
                    self.update_status("‚ùå Build Error")
            
            threading.Thread(target=build_field, daemon=True).start()
            
        except Exception as e:
            self.log_message(f"‚ùå Error: {e}")
            self.update_status("‚ùå Error")
    
    def create_from_string(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏≤‡∏Å string input"""
        field_string = self.string_text.get(1.0, tk.END).strip()
        
        if not field_string:
            messagebox.showwarning("Warning", "Please enter a field string")
            return
        
        if not self.field_manager:
            messagebox.showerror("Error", "Field Manager not initialized")
            return
        
        try:
            self.update_status("üé® Creating field from string...")
            self.log_message(f"üé® Creating field from string:\n{field_string}")
            
            def create_field():
                try:
                    # ‡πÄ‡∏£‡∏¥‡πà‡∏° simulation ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°)
                    if not self.is_simulation_running:
                        self.field_manager.start_simulation()
                        self.is_simulation_running = True
                        self.log_message("‚úÖ Simulation started")
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
                    self.field_manager.create_tiled_floor()
                    self.log_message("‚úÖ Created tiled floor")
                    
                    # ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°
                    self.field_manager.create_field_from_string(field_string)
                    self.log_message("‚úÖ Field created from string")
                    self.update_status("‚úÖ String Field Created")
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                    lines = field_string.strip().split('\n')
                    for row, line in enumerate(lines[:5]):
                        for col, char in enumerate(line[:5]):
                            if row < 5 and col < 5:
                                self.field_grid[row][col] = char
                    self.draw_field_grid()
                    
                except Exception as e:
                    self.log_message(f"‚ùå Error creating field: {e}")
                    self.update_status("‚ùå Error")
            
            threading.Thread(target=create_field, daemon=True).start()
            
        except Exception as e:
            self.log_message(f"‚ùå Error: {e}")
            self.update_status("‚ùå Error")
    
    # ==================== DRONE CONTROL METHODS ====================
    
    def connect_simulation_drone(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏î‡∏£‡∏ô‡πÉ‡∏ô simulation"""
        if not self.drone_connector:
            self.log_message("‚ùå Drone connector not available")
            return False
        
        try:
            self.update_status("üîÑ Connecting to simulation drone...")
            success = self.drone_connector.connect_simulation()
            
            if success:
                self.log_message("‚úÖ Simulation drone connected successfully")
                self.update_status("üöÅ Drone Connected")
                return True
            else:
                self.log_message("‚ùå Failed to connect to simulation drone")
                self.update_status("‚ùå Connection Failed")
                return False
                
        except Exception as e:
            self.log_message(f"‚ùå Drone connection error: {e}")
            self.update_status("‚ùå Connection Error")
            return False
    
    def quick_takeoff(self):
        """‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
        if not self.drone_connector:
            self.log_message("‚ùå Drone connector not available")
            return False
        
        try:
            self.update_status("üöÅ Taking off...")
            
            def takeoff_thread():
                try:
                    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                    if not self.drone_connector.is_connected:
                        self.drone_connector.connect_simulation()
                    
                    # ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏¥‡∏ô
                    success = self.drone_connector.takeoff()
                    
                    if success:
                        self.log_message("‚úÖ Drone takeoff successful")
                        self.update_status("üöÅ Drone Flying")
                    else:
                        self.log_message("‚ùå Drone takeoff failed")
                        self.update_status("‚ùå Takeoff Failed")
                        
                except Exception as e:
                    self.log_message(f"‚ùå Takeoff error: {e}")
                    self.update_status("‚ùå Takeoff Error")
            
            threading.Thread(target=takeoff_thread, daemon=True).start()
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå Quick takeoff error: {e}")
            return False
    
    def quick_land(self):
        """‡∏•‡∏á‡∏à‡∏≠‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
        if not self.drone_connector:
            self.log_message("‚ùå Drone connector not available")
            return False
        
        try:
            self.update_status("üõ¨ Landing...")
            
            def land_thread():
                try:
                    success = self.drone_connector.land()
                    
                    if success:
                        self.log_message("‚úÖ Drone landing successful")
                        self.update_status("üõ¨ Drone Landed")
                    else:
                        self.log_message("‚ùå Drone landing failed")
                        self.update_status("‚ùå Landing Failed")
                        
                except Exception as e:
                    self.log_message(f"‚ùå Landing error: {e}")
                    self.update_status("‚ùå Landing Error")
            
            threading.Thread(target=land_thread, daemon=True).start()
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå Quick land error: {e}")
            return False
    
    def quick_take_picture(self):
        """‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
        if not self.drone_connector:
            self.log_message("‚ùå Drone connector not available")
            return False
        
        try:
            self.update_status("üì∏ Taking picture...")
            
            def picture_thread():
                try:
                    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°
                    if not self.drone_connector.camera_active:
                        self.drone_connector.start_camera()
                    
                    # ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
                    images = self.drone_connector.take_picture(1)
                    
                    if images:
                        self.log_message(f"‚úÖ Picture captured: {images[0]}")
                        self.update_status("üì∏ Picture Captured")
                        
                        # ‡πÅ‡∏™‡∏Å‡∏ô QR Code ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                        qr_results = self.drone_connector.scan_qr_code(images[0])
                        if qr_results:
                            for result in qr_results:
                                self.log_message(f"üîç QR Code detected: {result['data']}")
                    else:
                        self.log_message("‚ùå Failed to capture picture")
                        self.update_status("‚ùå Picture Failed")
                        
                except Exception as e:
                    self.log_message(f"‚ùå Picture capture error: {e}")
                    self.update_status("‚ùå Picture Error")
            
            threading.Thread(target=picture_thread, daemon=True).start()
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå Quick picture error: {e}")
            return False
    
    def get_drone_status(self):
        """‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏î‡∏£‡∏ô"""
        if not self.drone_connector:
            return None
        
        try:
            status = self.drone_connector.get_status()
            self.log_message(f"üìä Drone Status: {status}")
            return status
        except Exception as e:
            self.log_message(f"‚ùå Get drone status error: {e}")
            return None
    
    def start_drone_auto_mission(self, mission_type="basic"):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Auto Mission"""
        if not self.drone_connector:
            self.log_message("‚ùå Drone connector not available")
            return False
        
        try:
            self.update_status(f"üöÄ Starting {mission_type} mission...")
            
            def mission_thread():
                try:
                    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                    if not self.drone_connector.is_connected:
                        self.drone_connector.connect_simulation()
                    
                    # ‡πÄ‡∏£‡∏¥‡πà‡∏° mission
                    success = self.drone_connector.start_auto_mission(mission_type)
                    
                    if success:
                        self.log_message(f"‚úÖ {mission_type} mission started")
                        self.update_status(f"üöÄ {mission_type} Mission Running")
                    else:
                        self.log_message(f"‚ùå Failed to start {mission_type} mission")
                        self.update_status("‚ùå Mission Failed")
                        
                except Exception as e:
                    self.log_message(f"‚ùå Auto mission error: {e}")
                    self.update_status("‚ùå Mission Error")
            
            threading.Thread(target=mission_thread, daemon=True).start()
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå Start auto mission error: {e}")
            return False
    
    def stop_drone_auto_mission(self):
        """‡∏´‡∏¢‡∏∏‡∏î Auto Mission"""
        if not self.drone_connector:
            self.log_message("‚ùå Drone connector not available")
            return False
        
        try:
            self.drone_connector.stop_auto_mission()
            self.log_message("üõë Auto mission stopped")
            self.update_status("üõë Mission Stopped")
            return True
        except Exception as e:
            self.log_message(f"‚ùå Stop auto mission error: {e}")
            return False
    
    def disconnect_drone(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏£‡∏ô"""
        if not self.drone_connector:
            return False
        
        try:
            self.update_status("üîÑ Disconnecting drone...")
            success = self.drone_connector.disconnect()
            
            if success:
                self.log_message("‚úÖ Drone disconnected")
                self.update_status("üì° Drone Disconnected")
            else:
                self.log_message("‚ùå Drone disconnection failed")
                self.update_status("‚ùå Disconnect Failed")
            
            return success
        except Exception as e:
            self.log_message(f"‚ùå Disconnect drone error: {e}")
            return False
    
    # ==================== MISSION PAD DETECTION METHODS ====================
    
    def enable_mission_pads(self):
        """‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Mission Pads"""
        if not self.drone_connector:
            self.log_message("‚ùå Drone connector not available")
            return False
        
        try:
            self.update_status("üéØ Enabling mission pads...")
            
            def enable_thread():
                try:
                    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                    if not self.drone_connector.is_connected:
                        self.drone_connector.connect_simulation()
                    
                    # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Mission Pads
                    success = self.drone_connector.enable_mission_pads()
                    
                    if success:
                        available_detectors = self.drone_connector.get_available_mission_pad_detectors()
                        self.log_message(f"‚úÖ Mission pads enabled with detectors: {available_detectors}")
                        self.update_status("üéØ Mission Pads Enabled")
                    else:
                        self.log_message("‚ùå Failed to enable mission pads")
                        self.update_status("‚ùå Mission Pads Failed")
                        
                except Exception as e:
                    self.log_message(f"‚ùå Enable mission pads error: {e}")
                    self.update_status("‚ùå Mission Pads Error")
            
            threading.Thread(target=enable_thread, daemon=True).start()
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå Enable mission pads error: {e}")
            return False
    
    def detect_mission_pads(self, detector_type="auto"):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ Mission Pads"""
        if not self.drone_connector:
            self.log_message("‚ùå Drone connector not available")
            return []
        
        try:
            self.update_status("üîç Detecting mission pads...")
            
            def detect_thread():
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ Mission Pads
                    detected_pads = self.drone_connector.detect_mission_pads(detector_type)
                    
                    if detected_pads:
                        self.log_message(f"‚úÖ Found {len(detected_pads)} mission pad(s)")
                        for pad in detected_pads:
                            self.log_message(f"  üéØ ID: {pad['id']}, Method: {pad.get('method', 'unknown')}")
                        self.update_status(f"üéØ Found {len(detected_pads)} Mission Pad(s)")
                    else:
                        self.log_message("‚ùå No mission pads detected")
                        self.update_status("‚ùå No Mission Pads Found")
                        
                except Exception as e:
                    self.log_message(f"‚ùå Mission pad detection error: {e}")
                    self.update_status("‚ùå Detection Error")
            
            threading.Thread(target=detect_thread, daemon=True).start()
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå Detect mission pads error: {e}")
            return False
    
    def detect_mission_pads_improved(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ Mission Pads ‡∏î‡πâ‡∏ß‡∏¢ Improved Detector"""
        return self.detect_mission_pads("improved")
    
    def detect_mission_pads_basic(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ Mission Pads ‡∏î‡πâ‡∏ß‡∏¢ Basic Detector"""
        return self.detect_mission_pads("basic")
    
    def detect_mission_pads_all(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ Mission Pads ‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ"""
        return self.detect_mission_pads("all")
    
    # ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö GUI ‡∏õ‡∏Å‡∏ï‡∏¥)
    def log_message(self, message):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô output log"""
        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô recursive call
        if hasattr(self, '_logging_in_progress') and self._logging_in_progress:
            return
        
        self._logging_in_progress = True
        
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            formatted_message = f"[{timestamp}] {message}\n"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Field Designer tab
            self.output_text.insert(tk.END, formatted_message)
            self.output_text.see(tk.END)
            self.root.update()
            
            # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Drone Control tab ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ drone_connector)
            # ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà timestamp ‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏£‡∏≤‡∏∞ drone_connector ‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÄ‡∏≠‡∏á
            if hasattr(self, 'drone_connector') and self.drone_connector:
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ log_message ‡∏Ç‡∏≠‡∏á drone_connector ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                self.drone_connector.log_message(message)
        
        finally:
            self._logging_in_progress = False
    
    def update_status(self, status):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        self.status_label.config(text=status)
        self.root.update()
    
    def initialize_field_manager(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô FieldManager"""
        try:
            self.update_status("üîÑ Initializing Field Manager...")
            self.field_manager = FieldManager()
            self.log_message("‚úÖ Field Manager initialized successfully")
            self.update_status("‚úÖ Ready")
        except Exception as e:
            self.log_message(f"‚ùå Error initializing Field Manager: {e}")
            self.update_status("‚ùå Error")
            messagebox.showerror("Error", f"Failed to initialize Field Manager:\n{e}")
    
    def start_simulation(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        if not self.field_manager:
            messagebox.showerror("Error", "Field Manager not initialized")
            return
        
        try:
            self.update_status("üöÄ Starting simulation...")
            success = self.field_manager.start_simulation()
            
            if success:
                self.is_simulation_running = True
                self.start_btn.config(state=tk.DISABLED)
                self.stop_btn.config(state=tk.NORMAL)
                self.log_message("‚úÖ Simulation started successfully")
                self.update_status("üöÄ Simulation Running")
            else:
                self.log_message("‚ùå Failed to start simulation")
                self.update_status("‚ùå Start Failed")
        except Exception as e:
            self.log_message(f"‚ùå Error starting simulation: {e}")
            self.update_status("‚ùå Error")
            messagebox.showerror("Error", f"Failed to start simulation:\n{e}")
    
    def stop_simulation(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        if not self.field_manager:
            return
        
        try:
            self.update_status("‚èπÔ∏è Stopping simulation...")
            success = self.field_manager.stop_simulation()
            
            self.is_simulation_running = False
            self.start_btn.config(state=tk.NORMAL)
            self.stop_btn.config(state=tk.DISABLED)
            
            if success:
                self.log_message("‚úÖ Simulation stopped successfully")
                self.update_status("‚èπÔ∏è Simulation Stopped")
            else:
                self.log_message("‚ö†Ô∏è Simulation stop completed")
                self.update_status("‚èπÔ∏è Stopped")
        except Exception as e:
            self.log_message(f"‚ùå Error stopping simulation: {e}")
            self.update_status("‚ùå Error")
    
    def create_default_field(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏ö default preset"""
        if not self.field_manager:
            messagebox.showerror("Error", "Field Manager not initialized")
            return
        
        try:
            self.update_status("üèóÔ∏è Creating default field...")
            self.log_message("üèóÔ∏è Creating default preset field...")
            
            def create_field():
                try:
                    self.field_manager.create_default_preset_field()
                    self.log_message("‚úÖ Default field created successfully")
                    self.update_status("‚úÖ Field Created")
                except Exception as e:
                    self.log_message(f"‚ùå Error creating default field: {e}")
                    self.update_status("‚ùå Error")
            
            threading.Thread(target=create_field, daemon=True).start()
            
        except Exception as e:
            self.log_message(f"‚ùå Error: {e}")
            self.update_status("‚ùå Error")
    
    def create_complete_field(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"""
        if not self.field_manager:
            messagebox.showerror("Error", "Field Manager not initialized")
            return
        
        try:
            self.update_status("üèüÔ∏è Creating complete field...")
            self.log_message("üèüÔ∏è Creating complete field with special fence...")
            
            def create_field():
                try:
                    self.field_manager.create_complete_field_with_special_fence()
                    self.log_message("‚úÖ Complete field created successfully")
                    self.update_status("‚úÖ Complete Field Created")
                except Exception as e:
                    self.log_message(f"‚ùå Error creating complete field: {e}")
                    self.update_status("‚ùå Error")
            
            threading.Thread(target=create_field, daemon=True).start()
            
        except Exception as e:
            self.log_message(f"‚ùå Error: {e}")
            self.update_status("‚ùå Error")
    
    def create_test_field(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        if not self.field_manager:
            messagebox.showerror("Error", "Field Manager not initialized")
            return
        
        try:
            self.update_status("üèÉ Creating test field...")
            self.log_message("üèÉ Creating quick test field...")
            
            def create_field():
                try:
                    self.field_manager.create_tiled_floor()
                    self.field_manager.create_fence()
                    self.log_message("‚úÖ Test field created successfully")
                    self.update_status("‚úÖ Test Field Created")
                except Exception as e:
                    self.log_message(f"‚ùå Error creating test field: {e}")
                    self.update_status("‚ùå Error")
            
            threading.Thread(target=create_field, daemon=True).start()
            
        except Exception as e:
            self.log_message(f"‚ùå Error: {e}")
            self.update_status("‚ùå Error")
    
    def clear_field(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô simulation ‡πÅ‡∏•‡∏∞ visual grid"""
        result = messagebox.askyesno("Clear All Confirmation", 
                                   "Are you sure you want to clear everything?\n\n" +
                                   "This will remove:\n" +
                                   "‚Ä¢ All objects from simulation field\n" +
                                   "‚Ä¢ All visual grid layout\n" +
                                   "‚Ä¢ Reset simulation state\n" +
                                   "‚Ä¢ Clear log messages\n" +
                                   "‚Ä¢ Reset the entire field to empty state")
        if result:
            try:
                self.update_status("üßπ Clearing everything...")
                
                # 1. ‡∏•‡πâ‡∏≤‡∏á visual grid ‡∏Å‡πà‡∏≠‡∏ô
                for row in range(5):
                    for col in range(5):
                        self.field_grid[row][col] = '0'
                
                # 2. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó visual display
                self.draw_field_grid()
                
                # 3. ‡∏•‡πâ‡∏≤‡∏á simulation field (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ field manager)
                if self.field_manager:
                    self.field_manager.clear_field()
                    self.log_message("‚úÖ Simulation field cleared")
                    
                    # 3.1 ‡∏•‡πâ‡∏≤‡∏á ImageBoard objects ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (double-check)
                    try:
                        import re
                        sim = self.field_manager.sim_manager.sim
                        
                        # ‡∏´‡∏≤ objects ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "ImageBoard_"
                        all_objects = sim.getObjectsInTree(sim.handle_scene)
                        imageboard_handles = []
                        
                        for obj_handle in all_objects:
                            try:
                                obj_name = sim.getObjectAlias(obj_handle)
                                if obj_name and obj_name.startswith("ImageBoard_"):
                                    imageboard_handles.append(obj_handle)
                            except:
                                continue
                        
                        # ‡∏•‡∏ö ImageBoard objects ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                        if imageboard_handles:
                            sim.removeObjects(imageboard_handles)
                            self.log_message(f"üñºÔ∏è Cleared {len(imageboard_handles)} additional ImageBoard objects")
                        else:
                            self.log_message("üñºÔ∏è No additional ImageBoard objects found")
                            
                    except Exception as e:
                        self.log_message(f"‚ö†Ô∏è Warning clearing ImageBoards: {e}")
                
                # 4. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï simulation state
                if hasattr(self, 'is_simulation_running'):
                    self.is_simulation_running = False
                
                # 5. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï selected tool ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                self.select_tool('B.80')
                
                # 6. ‡∏•‡πâ‡∏≤‡∏á log output
                if hasattr(self, 'output_text'):
                    self.output_text.delete(1.0, tk.END)
                
                self.log_message("‚úÖ Everything cleared successfully!")
                self.log_message("üîÑ Field reset to empty state")
                self.update_status("‚úÖ All Cleared")
                
            except Exception as e:
                self.log_message(f"‚ùå Error clearing field: {e}")
                self.update_status("‚ùå Error")
    
    def list_field_objects(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°"""
        if not self.field_manager:
            messagebox.showerror("Error", "Field Manager not initialized")
            return
        
        try:
            self.log_message("üìã Listing field objects...")
            self.field_manager.list_field_objects()
            self.update_status("üìã Objects Listed")
        except Exception as e:
            self.log_message(f"‚ùå Error listing objects: {e}")
            self.update_status("‚ùå Error")
    
    def show_statistics(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ô‡∏≤‡∏°"""
        if not self.field_manager:
            messagebox.showerror("Error", "Field Manager not initialized")
            return
        
        try:
            self.log_message("üìä Showing field statistics...")
            self.field_manager.show_field_statistics()
            self.update_status("üìä Statistics Shown")
        except Exception as e:
            self.log_message(f"‚ùå Error showing statistics: {e}")
            self.update_status("‚ùå Error")
    
    def save_design(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö"""
        filename = filedialog.asksaveasfilename(
            title="Save Field Design",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if filename:
            try:
                design = {
                    "grid": self.field_grid,
                    "timestamp": datetime.now().isoformat(),
                    "version": "1.0"
                }
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(design, f, indent=2, ensure_ascii=False)
                self.log_message(f"üíæ Design saved to: {filename}")
                self.update_status("üíæ Design Saved")
            except Exception as e:
                self.log_message(f"‚ùå Error saving design: {e}")
                self.update_status("‚ùå Save Error")
    
    def load_design(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö"""
        filename = filedialog.askopenfilename(
            title="Load Field Design",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    design = json.load(f)
                
                if 'grid' in design:
                    self.field_grid = design['grid']
                    self.draw_field_grid()
                    self.grid_to_string()
                    
                self.log_message(f"üìÅ Design loaded from: {filename}")
                self.update_status("üìÅ Design Loaded")
            except Exception as e:
                self.log_message(f"‚ùå Error loading design: {e}")
                self.update_status("‚ùå Load Error")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    root = tk.Tk()
    app = AdvancedFieldCreatorGUI(root)
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    def on_closing():
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        try:
            # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏£‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
            if hasattr(app, 'drone_connector') and app.drone_connector:
                app.disconnect_drone()
            
            # ‡∏´‡∏¢‡∏∏‡∏î simulation ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
            if hasattr(app, 'field_manager') and app.field_manager:
                app.field_manager.stop_simulation()
            
            print("üëã Goodbye!")
            root.destroy()
        except Exception as e:
            print(f"‚ùå Error during cleanup: {e}")
            root.destroy()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ protocol ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        on_closing()
    except Exception as e:
        print(f"‚ùå Application error: {e}")
        on_closing()


if __name__ == "__main__":
    main()
