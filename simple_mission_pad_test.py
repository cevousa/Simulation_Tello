#!/usr/bin/env python3
"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô MissionPadDetector ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
"""

from drone_controller import NaturalDroneController
import time

def simple_mission_pad_test():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
    
    print("üöÅ Starting simple mission pad test...")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô drone controller
    drone = NaturalDroneController(use_simulation=True)
    
    try:
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Mission Pad detection
        print("üîß Enabling Mission Pad detection...")
        drone.enable_mission_pads()

        drone.takeoff(0.4)

        drone.move_forward(1.0)
        detected_id1 = drone.get_mission_pad_id()
        print(f"üéØ Detected Mission Pad ID: {detected_id1}")
        time.sleep(1)

        drone.move_forward(1.0)
        detected_id2 = drone.get_mission_pad_id()
        print(f"üéØ Detected Mission Pad ID: {detected_id2}")
        time.sleep(1)
                
        drone.move_forward(1.0)
        detected_id3 = drone.get_mission_pad_id()
        print(f"üéØ Detected Mission Pad ID: {detected_id3}")
        time.sleep(1)

        drone.move_forward(1.0)
        detected_id4 = drone.get_mission_pad_id()
        print(f"üéØ Detected Mission Pad ID: {detected_id4}")
        time.sleep(1)
            
        drone.land()
            
            
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        
    finally:
        # ‡∏õ‡∏¥‡∏î Mission Pad detection
        drone.disable_mission_pads()
        drone.disconnect()

if __name__ == "__main__":
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    simple_mission_pad_test()
