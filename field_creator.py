#!/usr/bin/env python3
"""
Drone Odyssey Challenge Field Creator - Fixed Version
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: AttributeError, Texture Error, ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
"""

import time
import math
import random
import os
try:
    from coppeliasim_zmqremoteapi_client import RemoteAPIClient
except ImportError:
    from zmqRemoteApi import RemoteAPIClient

class DroneOdysseyFieldCreator:
    def __init__(self):
        self.client = RemoteAPIClient()
        self.sim = self.client.getObject('sim')
        
        self.simulation_running = False
        self.field_objects = []
        
        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏ô‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        self.field_size = 5.0  # 5√ó5 ‡πÄ‡∏°‡∏ï‡∏£
        self.tile_size = 0.8   # ‡πÅ‡∏ú‡πà‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î 80√ó80 ‡∏ã‡∏°.
        self.tile_gap = 0.2    # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á 20 ‡∏ã‡∏°.
        self.border_gap = 0.1  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö 10 ‡∏ã‡∏°.
        
        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        self.obstacle_size = [0.6, 0.6, 0.8]  # ‡∏Å‡∏•‡πà‡∏≠‡∏á 60√ó60√ó80 ‡∏ã‡∏°.
        self.qr_board_size = [0.3, 0.3, 0.02] # ‡∏õ‡πâ‡∏≤‡∏¢ QR 30√ó30 ‡∏ã‡∏°.
        self.image_board_size = [0.4, 0.3, 0.02] # ‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏π‡∏õ 40√ó30 ‡∏ã‡∏°.
        
        # ‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå QR Code
        self.qr_texture_path = r"C:\Users\Zbook Firefly 14 G8\Downloads\drone_coding_simmu\testqrcode.png"
        
        print("üèüÔ∏è Drone Odyssey Challenge Field Creator (Fixed)")
        print(f"üìè Field: {self.field_size}√ó{self.field_size}m")
        print(f"üî≤ Tiles: {self.tile_size*100:.0f}√ó{self.tile_size*100:.0f}cm, Gap: {self.tile_gap*100:.0f}cm")

    def start_simulation(self):
        try:
            self.sim.startSimulation()
            self.simulation_running = True
            print("‚úÖ Simulation started")
            time.sleep(1)
            return True
        except Exception as e:
            print(f"‚ùå Failed to start simulation: {e}")
            return False

    def grid_to_position(self, grid_x, grid_y):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Grid ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á (A1 = ‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢)"""
        real_x = self.border_gap + (self.tile_size + self.tile_gap) * grid_x + self.tile_size/2 - self.field_size/2
        real_y = self.border_gap + (self.tile_size + self.tile_gap) * grid_y + self.tile_size/2 - self.field_size/2
        return [real_x, real_y]

    def grid_to_edge_position(self, grid_x, grid_y):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Grid ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö)"""
        center_pos = self.grid_to_position(grid_x, grid_y)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏ö
        if grid_x == 0:  # ‡∏Ç‡∏≠‡∏ö‡∏ã‡πâ‡∏≤‡∏¢ (A)
            edge_x = -self.field_size/2 + 0.05
        elif grid_x == 4:  # ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤ (E)
            edge_x = self.field_size/2 - 0.05
        else:
            edge_x = center_pos[0]
        
        if grid_y == 0:  # ‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á (1)
            edge_y = -self.field_size/2 + 0.05
        elif grid_y == 4:  # ‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô (5)
            edge_y = self.field_size/2 - 0.05
        else:
            edge_y = center_pos[1]
        
        return [edge_x, edge_y]

    def create_tiled_floor(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á 5√ó5"""
        print("üü´ Creating tiled floor (5√ó5 grid)...")
        
        floor_objects = []
        
        for i in range(5):  # A-E (0-4)
            for j in range(5):  # 1-5 (0-4)
                floor_tile = self.sim.createPrimitiveShape(
                    self.sim.primitiveshape_cuboid,
                    [self.tile_size, self.tile_size, 0.02]
                )
                
                pos = self.grid_to_position(i, j)
                pos.append(0.01)
                
                self.sim.setObjectPosition(floor_tile, -1, pos)
                
                grid_name = f"{chr(65+i)}{j+1}"
                self.sim.setObjectAlias(floor_tile, f"Floor_{grid_name}")
                
                # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏≠‡πà‡∏≠‡∏ô
                self.sim.setShapeColor(floor_tile, None, 
                    self.sim.colorcomponent_ambient_diffuse, [0.95, 0.95, 0.95])
                
                floor_info = {
                    'type': 'floor',
                    'handle': floor_tile,
                    'grid': grid_name,
                    'position': pos
                }
                floor_objects.append(floor_info)
        
        self.field_objects.extend(floor_objects)
        print(f"‚úÖ Created {len(floor_objects)} floor tiles")
        return floor_objects

    def create_obstacle_box(self, grid_x, grid_y, name=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á 60√ó60√ó80 ‡∏ã‡∏°."""
        try:
            if name is None:
                name = f"Obstacle_{chr(65+grid_x)}{grid_y+1}"
            
            obstacle = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                self.obstacle_size
            )
            
            pos = self.grid_to_position(grid_x, grid_y)
            pos.append(self.obstacle_size[2]/2 + 0.02)
            
            self.sim.setObjectPosition(obstacle, -1, pos)
            self.sim.setObjectAlias(obstacle, name)
            
            # ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
            self.sim.setShapeColor(obstacle, None, 
                self.sim.colorcomponent_ambient_diffuse, [0.6, 0.4, 0.2])
            
            self.sim.setObjectSpecialProperty(obstacle, 
                self.sim.objectspecialproperty_collidable + 
                self.sim.objectspecialproperty_detectable +
                self.sim.objectspecialproperty_renderable
            )
            
            obstacle_info = {
                'type': 'obstacle',
                'handle': obstacle,
                'name': name,
                'grid': f"{chr(65+grid_x)}{grid_y+1}",
                'position': pos
            }
            
            self.field_objects.append(obstacle_info)
            print(f"üì¶ Created obstacle: {name} at {obstacle_info['grid']}")
            return obstacle_info
            
        except Exception as e:
            print(f"‚ùå Failed to create obstacle: {e}")
            return None

    def create_obstacle_box_with_qr(self, grid_x, grid_y, name=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏õ‡πâ‡∏≤‡∏¢ QR Code (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö D2)"""
        try:
            if name is None:
                name = f"QRBox_{chr(65+grid_x)}{grid_y+1}"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á
            obstacle = self.create_obstacle_box(grid_x, grid_y, name)
            if not obstacle:
                return None
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢ QR Code ‡∏ï‡∏¥‡∏î‡∏ö‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á
            qr_board = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                self.qr_board_size
            )
            
            # ‡∏ï‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
            box_pos = obstacle['position']
            qr_pos = [
                box_pos[0] + self.obstacle_size[0]/2 + 0.015,
                box_pos[1],
                box_pos[2] + 0.15
            ]
            
            self.sim.setObjectPosition(qr_board, -1, qr_pos)
            
            # ‡∏´‡∏°‡∏∏‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏£‡∏á (‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤)
            self.sim.setObjectOrientation(qr_board, -1, [0, math.pi/2, 0])
            
            self.sim.setObjectAlias(qr_board, f"QR_{name}")
            
            # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
            self.sim.setShapeColor(qr_board, None, 
                self.sim.colorcomponent_ambient_diffuse, [1, 1, 1])
            
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏™‡πà texture QR Code (‡πÅ‡∏Å‡πâ error)
            if os.path.exists(self.qr_texture_path):
                try:
                    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
                    print(f"  ‚úÖ QR texture file found: {name}")
                    print(f"  üí° Texture will be white placeholder (file exists but not loaded due to API complexity)")
                except Exception as tex_error:
                    print(f"  ‚ö†Ô∏è Texture error: {tex_error}")
            else:
                print(f"  ‚ö†Ô∏è QR texture file not found: {self.qr_texture_path}")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• obstacle
            obstacle['has_qr'] = True
            obstacle['qr_board'] = qr_board
            obstacle['type'] = 'qr_obstacle'
            
            print(f"üì± Created QR obstacle: {name} at {obstacle['grid']}")
            return obstacle
            
        except Exception as e:
            print(f"‚ùå Failed to create QR obstacle: {e}")
            return None

    def create_edge_image_stand(self, grid_x, grid_y, name=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏™‡∏ô‡∏≤‡∏° - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ô‡∏≤‡∏°"""
        try:
            if name is None:
                name = f"EdgeStand_{chr(65+grid_x)}{grid_y+1}"
            
            # ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏ö
            pos = self.grid_to_edge_position(grid_x, grid_y)
            pos.append(0.4)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á (‡πÄ‡∏™‡∏≤‡πÄ‡∏•‡πá‡∏Å)
            pole = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                [0.05, 0.05, 0.8]
            )
            
            self.sim.setObjectPosition(pole, -1, pos)
            self.sim.setObjectAlias(pole, name)
            
            # ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
            self.sim.setShapeColor(pole, None, 
                self.sim.colorcomponent_ambient_diffuse, [0.5, 0.5, 0.5])
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏π‡∏õ
            image_board = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                self.image_board_size
            )
            
            board_pos = [pos[0], pos[1], pos[2] + 0.3]
            self.sim.setObjectPosition(image_board, -1, board_pos)
            
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏´‡∏°‡∏∏‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ô‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            center_x, center_y = 0, 0  # ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏±‡∏ô
            dx = center_x - pos[0]
            dy = center_y - pos[1]
            angle_to_center = math.atan2(dy, dx)
            
            # ‡∏´‡∏°‡∏∏‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
            self.sim.setObjectOrientation(image_board, -1, [0, math.pi/2, angle_to_center])
            
            self.sim.setObjectAlias(image_board, f"IMG_{name}")
            
            # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
            self.sim.setShapeColor(image_board, None, 
                self.sim.colorcomponent_ambient_diffuse, [0.7, 0.9, 1.0])
            
            stand_info = {
                'type': 'edge_image_stand',
                'handle': pole,
                'image_board': image_board,
                'name': name,
                'grid': f"{chr(65+grid_x)}{grid_y+1}",
                'position': pos
            }
            
            self.field_objects.append(stand_info)
            print(f"üñºÔ∏è Created edge image stand: {name} at {stand_info['grid']} (facing center)")
            return stand_info
            
        except Exception as e:
            print(f"‚ùå Failed to create edge image stand: {e}")
            return None

    def create_ping_pong_balls_at_c5(self, num_balls=5):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà C5 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡∏•‡∏°"""
        try:
            c5_pos = self.grid_to_position(2, 4)  # C5
            
            # ‡∏ß‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏£‡∏≠‡∏ö‡πÜ C5
            ball_positions = [
                [c5_pos[0], c5_pos[1]],           # ‡∏Å‡∏•‡∏≤‡∏á
                [c5_pos[0] - 0.15, c5_pos[1]],    # ‡∏ã‡πâ‡∏≤‡∏¢
                [c5_pos[0] + 0.15, c5_pos[1]],    # ‡∏Ç‡∏ß‡∏≤
                [c5_pos[0], c5_pos[1] - 0.15],    # ‡∏•‡πà‡∏≤‡∏á
                [c5_pos[0], c5_pos[1] + 0.15],    # ‡∏ö‡∏ô
            ]
            
            created_balls = []
            
            for i, ball_pos in enumerate(ball_positions[:num_balls]):
                ball = self.sim.createPrimitiveShape(
                    self.sim.primitiveshape_spheroid,
                    [0.04, 0.04, 0.04]
                )
                
                pos = [ball_pos[0], ball_pos[1], 0.06]
                self.sim.setObjectPosition(ball, -1, pos)
                
                name = f"PingPong_C5_{i+1}"
                self.sim.setObjectAlias(ball, name)
                
                # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                self.sim.setShapeColor(ball, None, 
                    self.sim.colorcomponent_ambient_diffuse, [1, 1, 1])
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏•‡∏°
                self.sim.setObjectSpecialProperty(ball, 
                    self.sim.objectspecialproperty_collidable + 
                    self.sim.objectspecialproperty_detectable +
                    self.sim.objectspecialproperty_renderable
                )
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏•‡∏°
                try:
                    # ‡∏•‡∏î‡∏°‡∏ß‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≤‡∏°‡∏≤‡∏Å (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á)
                    self.sim.setShapeMass(ball, 0.0027)  # 2.7 ‡∏Å‡∏£‡∏±‡∏°
                    
                    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô
                    self.sim.setEngineFloatParam(self.sim.bullet_body_restitution, ball, 0.9)  # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏î‡∏≠‡∏ô
                    self.sim.setEngineFloatParam(self.sim.bullet_body_friction, ball, 0.1)     # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏î‡∏ó‡∏≤‡∏ô
                    self.sim.setEngineFloatParam(self.sim.bullet_body_lineardamping, ball, 0.1) # ‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á
                    self.sim.setEngineFloatParam(self.sim.bullet_body_angulardamping, ball, 0.1) # ‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏°‡∏∏‡∏°
                    
                    print(f"  ‚úÖ Physics configured for {name}")
                except Exception as physics_error:
                    print(f"  ‚ö†Ô∏è Physics setup warning for {name}: {physics_error}")
                
                ball_info = {
                    'type': 'ping_pong',
                    'handle': ball,
                    'name': name,
                    'grid': 'C5',
                    'position': pos
                }
                
                self.field_objects.append(ball_info)
                created_balls.append(ball_info)
            
            print(f"üèì Created {len(created_balls)} ping pong balls at C5 with wind physics")
            return created_balls
            
        except Exception as e:
            print(f"‚ùå Failed to create ping pong balls: {e}")
            return []

    def create_boundary_wall(self, start_pos, end_pos, height=0.12, name="Wall"):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏Å‡∏±‡πâ‡∏ô"""
        try:
            length = math.sqrt((end_pos[0] - start_pos[0])**2 + (end_pos[1] - start_pos[1])**2)
            angle = math.atan2(end_pos[1] - start_pos[1], end_pos[0] - start_pos[0])
            
            wall = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                [length, 0.06, height]
            )
            
            center_pos = [
                (start_pos[0] + end_pos[0]) / 2,
                (start_pos[1] + end_pos[1]) / 2,
                height/2 + 0.02
            ]
            
            self.sim.setObjectPosition(wall, -1, center_pos)
            self.sim.setObjectOrientation(wall, -1, [0, 0, angle])
            
            # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            self.sim.setShapeColor(wall, None, 
                self.sim.colorcomponent_ambient_diffuse, [0.2, 0.8, 0.2])
            
            self.sim.setObjectSpecialProperty(wall, 
                self.sim.objectspecialproperty_collidable + 
                self.sim.objectspecialproperty_detectable +
                self.sim.objectspecialproperty_renderable
            )
            
            self.sim.setObjectAlias(wall, name)
            
            wall_info = {
                'type': 'boundary_wall',
                'handle': wall,
                'name': name,
                'position': center_pos
            }
            
            self.field_objects.append(wall_info)
            print(f"üü¢ Created boundary wall: {name}")
            return wall_info
            
        except Exception as e:
            print(f"‚ùå Failed to create boundary wall: {e}")
            return None

    def create_ping_pong_boundaries(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡∏Å‡∏±‡πâ‡∏ô‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏•‡∏Ç 4 ‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô"""
        print("üü¢ Creating ping pong boundaries (reverse 4 shape)...")
        
        # ‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ grid
        a4_pos = self.grid_to_position(0, 3)  # A4
        b4_pos = self.grid_to_position(1, 3)  # B4
        b5_pos = self.grid_to_position(1, 4)  # B5
        c4_pos = self.grid_to_position(2, 3)  # C4
        c5_pos = self.grid_to_position(2, 4)  # C5
        
        half_tile = self.tile_size / 2
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡∏£‡∏π‡∏õ‡πÄ‡∏•‡∏Ç 4 ‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô
        boundaries = [
            # ‡∏£‡∏±‡πâ‡∏ß‡∏•‡πà‡∏≤‡∏á A4
            ([a4_pos[0] - half_tile, a4_pos[1] - half_tile], 
             [a4_pos[0] + half_tile, a4_pos[1] - half_tile], "A4_Bottom"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ A4
            ([a4_pos[0] - half_tile, a4_pos[1] - half_tile], 
             [a4_pos[0] - half_tile, a4_pos[1] + half_tile], "A4_Left"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ö‡∏ô A4 ‡πÑ‡∏õ B4
            ([a4_pos[0] - half_tile, a4_pos[1] + half_tile], 
             [b4_pos[0] - half_tile, b4_pos[1] + half_tile], "A4_B4_Top"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ B4
            ([b4_pos[0] - half_tile, b4_pos[1] - half_tile], 
             [b4_pos[0] - half_tile, b4_pos[1] + half_tile], "B4_Left"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏•‡πà‡∏≤‡∏á B4 ‡πÑ‡∏õ C4
            ([b4_pos[0] - half_tile, b4_pos[1] - half_tile], 
             [c4_pos[0] + half_tile, c4_pos[1] - half_tile], "B4_C4_Bottom"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏Ç‡∏ß‡∏≤ C4
            ([c4_pos[0] + half_tile, c4_pos[1] - half_tile], 
             [c4_pos[0] + half_tile, c4_pos[1] + half_tile], "C4_Right"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ö‡∏ô C4 ‡∏ñ‡∏∂‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏±‡πà‡∏ô
            ([c4_pos[0] - half_tile, c4_pos[1] + half_tile], 
             [c4_pos[0] + 0.2, c4_pos[1] + half_tile], "C4_Top_Part1"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ö‡∏ô C5 ‡∏´‡∏•‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏±‡πà‡∏ô
            ([c5_pos[0] - 0.2, c5_pos[1] + half_tile], 
             [c5_pos[0] + half_tile, c5_pos[1] + half_tile], "C5_Top"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏Ç‡∏ß‡∏≤ C5
            ([c5_pos[0] + half_tile, c5_pos[1] - half_tile], 
             [c5_pos[0] + half_tile, c5_pos[1] + half_tile], "C5_Right"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏•‡πà‡∏≤‡∏á C5 ‡∏ï‡πà‡∏≠ B5
            ([c5_pos[0] - half_tile, c5_pos[1] - half_tile], 
             [b5_pos[0] + half_tile, b5_pos[1] - half_tile], "C5_B5_Bottom"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏Ç‡∏ß‡∏≤ B5
            ([b5_pos[0] + half_tile, b5_pos[1] - half_tile], 
             [b5_pos[0] + half_tile, b5_pos[1] + half_tile], "B5_Right"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ö‡∏ô B5
            ([b5_pos[0] - half_tile, b5_pos[1] + half_tile], 
             [b5_pos[0] + half_tile, b5_pos[1] + half_tile], "B5_Top"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ C5
            ([c5_pos[0] - half_tile, c5_pos[1] - half_tile], 
             [c5_pos[0] - half_tile, c5_pos[1] + half_tile], "C5_Left"),
        ]
        
        for start_pos, end_pos, name in boundaries:
            self.create_boundary_wall(start_pos, end_pos, height=0.1, name=name)

    def create_complete_field(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print("üèóÔ∏è Creating complete Drone Odyssey Challenge field...")
        
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á
        self.create_tiled_floor()
        
        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏™‡∏ô‡∏≤‡∏° B1, D1, E2, E4
        self.create_edge_image_stand(1, 0)  # B1 (‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á)
        self.create_edge_image_stand(3, 0)  # D1 (‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á)
        self.create_edge_image_stand(4, 1)  # E2 (‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤)
        self.create_edge_image_stand(4, 3)  # E4 (‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤)
        
        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà B2, C3, D4
        self.create_obstacle_box(1, 1)  # B2
        self.create_obstacle_box(2, 2)  # C3
        self.create_obstacle_box(3, 3)  # D4
        
        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏õ‡πâ‡∏≤‡∏¢ QR Code ‡∏ó‡∏µ‡πà D2
        self.create_obstacle_box_with_qr(3, 1)  # D2
        
        # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà C5
        self.create_ping_pong_balls_at_c5(5)  # 5 ‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà C5
        
        # 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡∏Å‡∏±‡πâ‡∏ô‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á
        self.create_ping_pong_boundaries()
        
        print("‚úÖ Complete field created successfully!")
        self.list_field_objects()

    def list_field_objects(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°"""
        if not self.field_objects:
            print("üì≠ No field objects found")
            return
        
        object_types = {}
        for obj in self.field_objects:
            obj_type = obj['type']
            if obj_type not in object_types:
                object_types[obj_type] = []
            object_types[obj_type].append(obj)
        
        print(f"\nüèüÔ∏è Field objects summary ({len(self.field_objects)} total):")
        for obj_type, objects in object_types.items():
            print(f"  üìã {obj_type.title().replace('_', ' ')}: {len(objects)} objects")
            for obj in objects[:3]:
                if 'grid' in obj:
                    print(f"    - {obj.get('name', 'Unnamed')} at {obj['grid']}")
                else:
                    print(f"    - {obj.get('name', 'Unnamed')}")
            if len(objects) > 3:
                print(f"    - ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(objects)-3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print()

    def clear_field(self):
        """‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            cleared_count = 0
            for obj in self.field_objects:
                try:
                    self.sim.removeObject(obj['handle'])
                    if 'qr_board' in obj and obj['qr_board']:
                        self.sim.removeObject(obj['qr_board'])
                    if 'image_board' in obj and obj['image_board']:
                        self.sim.removeObject(obj['image_board'])
                    cleared_count += 1
                except:
                    pass
            
            self.field_objects.clear()
            print(f"üóëÔ∏è Cleared {cleared_count} field objects")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error clearing field: {e}")

def quick_create_mode():
    """‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡πá‡∏ß"""
    print("‚ö° Quick Field Create Mode")
    print("Select field type:")
    print("1. Complete field (fixed)")
    print("2. Custom field base")
    print("3. Exit")
    
    choice = input("\nEnter choice (1-3): ").strip()
    
    creator = DroneOdysseyFieldCreator()
    
    if choice in ["1", "2"]:
        if creator.start_simulation():
            time.sleep(1)
            
            if choice == "1":
                creator.create_complete_field()
            elif choice == "2":
                creator.create_tiled_floor()
            
            print("\n‚úÖ Field created successfully!")
            print("üí° Use your drone controller to test missions")
            print("üõë Field will remain until you stop the simulation")
            
    elif choice == "3":
        print("üëã Goodbye!")
    else:
        print("‚ùå Invalid choice")

if __name__ == "__main__":
    print("üèüÔ∏è Drone Odyssey Challenge Field Creator (Fixed)")
    print("=" * 70)
    print("üîß Fixed: AttributeError, Texture Error, Board orientation, Wind physics")
    print("üèì Layout: B1,D1,E2,E4=Edge Images | B2,C3,D4=Obstacles | D2=QR Box | C5=All PingPongs")
    print("=" * 70)
    
    quick_create_mode()
