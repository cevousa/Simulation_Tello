#!/usr/bin/env python3
"""
Drone Odyssey Challenge Field Creator - Organized Version
‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
"""

import time
import math
import random
import os
try:
    from coppeliasim_zmqremoteapi_client import RemoteAPIClient
except ImportError:
    from zmqRemoteApi import RemoteAPIClient

class DroneOdysseyFieldCreator:
    def __init__(self):
        self.client = RemoteAPIClient()
        self.sim = self.client.getObject('sim')
        
        self.simulation_running = False
        self.field_objects = []
        
        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏ô‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        self.field_size = 5.0  # 5√ó5 ‡πÄ‡∏°‡∏ï‡∏£
        self.tile_size = 0.8   # ‡πÅ‡∏ú‡πà‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î 80√ó80 ‡∏ã‡∏°.
        self.tile_gap = 0.2    # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á 20 ‡∏ã‡∏°.
        self.border_gap = 0.1  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö 10 ‡∏ã‡∏°.
        
        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        self.obstacle_size = [0.6, 0.6, 0.8]  # ‡∏Å‡∏•‡πà‡∏≠‡∏á 60√ó60√ó80 ‡∏ã‡∏°.
        self.qr_board_size = [0.3, 0.3, 0.02] # ‡∏õ‡πâ‡∏≤‡∏¢ QR 30√ó30 ‡∏ã‡∏°.
        self.image_board_size = [0.4, 0.3, 0.02] # ‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏π‡∏õ 40√ó30 ‡∏ã‡∏°.
        
        # ‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå QR Code
        self.qr_texture_path = r".\testqrcode.png"
        self.image_texture_path=r".\testpicture.png"
        print("üèüÔ∏è Drone Odyssey Challenge Field Creator (Organized)")
        print(f"üìè Field: {self.field_size}√ó{self.field_size}m")
        print(f"üî≤ Tiles: {self.tile_size*100:.0f}√ó{self.tile_size*100:.0f}cm, Gap: {self.tile_gap*100:.0f}cm")

    # ===============================================================
    # SECTION 1: SIMULATION MANAGEMENT
    # ===============================================================
        
    def start_simulation(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        try:
            # Physics Engine ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            self.sim.startSimulation()
            self.simulation_running = True
            print("‚úÖ Simulation started")
            time.sleep(1)
            return True
        except Exception as e:
            print(f"‚ùå Failed to start simulation: {e}")
            return False

    def diagnose_and_fix_physics_issues(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå - ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥"""
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if hasattr(self, '_physics_fixed'):
            return
        
        print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå...")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ physics engine
        try:
            self.sim.setFloatParameter(self.sim.floatparam_simulation_time_step, 0.005)
            self.sim.setBoolParameter(self.sim.boolparam_realtime_simulation, True)
            print("‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ physics engine")
        except Exception as e:
            print(f"‚ö†Ô∏è Physics engine warning: {e}")
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô
        floor_handles = []
        for obj in self.field_objects:
            if obj.get('type') == 'floor':
                floor_handles.append(obj['handle'])
        
        for floor_handle in floor_handles:
            self.sim.setObjectInt32Parameter(floor_handle, self.sim.shapeintparam_static, 1)
            self.sim.setObjectInt32Parameter(floor_handle, self.sim.shapeintparam_respondable, 1)
            self.sim.setShapeMass(floor_handle, 1000.0)
        
        print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        print("üéØ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
        self._physics_fixed = True

    def clear_field(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏° - ‡πÉ‡∏ä‡πâ API ‡πÉ‡∏´‡∏°‡πà"""
        if hasattr(self, 'field_objects') and self.field_objects:
            handles_to_remove = []
            
            for obj in self.field_objects:
                if 'handle' in obj:
                    handles_to_remove.append(obj['handle'])
            
            if handles_to_remove:
                try:
                    # ‚úÖ ‡πÉ‡∏ä‡πâ removeObjects ‡πÅ‡∏ó‡∏ô removeObject
                    self.sim.removeObjects(handles_to_remove)
                    print(f"üóëÔ∏è Cleared {len(handles_to_remove)} field objects")
                except Exception as e:
                    print(f"‚ö†Ô∏è Warning during cleanup: {e}")
            
            self.field_objects.clear()
        else:
            print("üóëÔ∏è Cleared 0 field objects")

    def list_field_objects(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏™‡∏ô‡∏≤‡∏°"""
        if not self.field_objects:
            print("üì≠ No field objects found")
            return
        
        object_types = {}
        for obj in self.field_objects:
            obj_type = obj['type']
            if obj_type not in object_types:
                object_types[obj_type] = []
            object_types[obj_type].append(obj)
        
        print(f"\nüèüÔ∏è Field objects summary ({len(self.field_objects)} total):")
        for obj_type, objects in object_types.items():
            print(f"  üìã {obj_type.title().replace('_', ' ')}: {len(objects)} objects")
            for obj in objects[:3]:
                if 'grid' in obj:
                    print(f"    - {obj.get('name', 'Unnamed')} at {obj['grid']}")
                else:
                    print(f"    - {obj.get('name', 'Unnamed')}")
            if len(objects) > 3:
                print(f"    - ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(objects)-3} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print()

    # ===============================================================
    # SECTION 2: COORDINATE SYSTEM
    # ===============================================================
    
    def grid_to_position(self, grid_x, grid_y):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Grid ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á (A1 = ‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢)"""
        real_x = self.border_gap + (self.tile_size + self.tile_gap) * grid_x + self.tile_size/2 - self.field_size/2
        real_y = self.border_gap + (self.tile_size + self.tile_gap) * grid_y + self.tile_size/2 - self.field_size/2
        return [real_x, real_y]

    def grid_to_edge_position(self, grid_x, grid_y):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Grid ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö)"""
        center_pos = self.grid_to_position(grid_x, grid_y)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏ö
        if grid_x == 0:  # ‡∏Ç‡∏≠‡∏ö‡∏ã‡πâ‡∏≤‡∏¢ (A)
            edge_x = -self.field_size/2 + 0.05
        elif grid_x == 4:  # ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤ (E)
            edge_x = self.field_size/2 - 0.05
        else:
            edge_x = center_pos[0]
        
        if grid_y == 0:  # ‡∏Ç‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏á (1)
            edge_y = -self.field_size/2 + 0.05
        elif grid_y == 4:  # ‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô (5)
            edge_y = self.field_size/2 - 0.05
        else:
            edge_y = center_pos[1]
        
        return [edge_x, edge_y]

    # ===============================================================
    # SECTION 3: BASIC OBJECTS CREATION
    # ===============================================================

    def fix_floor_settings(self):
        floor_handles = []
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for i in range(25):  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô floor tiles
            try:
                floor_name = f"FloorTile_{i}"
                floor_handle = self.sim.getObject(floor_name)
                floor_handles.append(floor_handle)
            except:
                continue
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô static ‡πÅ‡∏•‡∏∞ respondable
        for floor_handle in floor_handles:
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô static (1) ‡πÅ‡∏•‡∏∞ respondable (1)
            self.sim.setObjectInt32Parameter(floor_handle, self.sim.shapeintparam_static, 1)
            self.sim.setObjectInt32Parameter(floor_handle, self.sim.shapeintparam_respondable, 1)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô collidable
            self.sim.setObjectInt32Parameter(floor_handle, self.sim.shapeintparam_collidable, 1)
            
            print(f"Fixed floor: {floor_handle}")    

    def create_tiled_floor(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏ö‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á 5√ó5"""
        print("üü´ Creating tiled floor (5√ó5 grid)...")
        
        floor_objects = []
        
        for i in range(5):  # A-E (0-4)
            for j in range(5):  # 1-5 (0-4)
                floor_tile = self.sim.createPrimitiveShape(
                    self.sim.primitiveshape_cuboid,
                    [self.tile_size, self.tile_size, 0.005]  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0.5 ‡∏ã‡∏°.
                )
                
                pos = self.grid_to_position(i, j)
                pos.append(0.0025)  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                
                self.sim.setObjectPosition(floor_tile, -1, pos)
                
                grid_name = f"{chr(65+i)}{j+1}"
                self.sim.setObjectAlias(floor_tile, f"Floor_{grid_name}")
                
                # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏≠‡πà‡∏≠‡∏ô
                self.sim.setShapeColor(floor_tile, None, 
                    self.sim.colorcomponent_ambient_diffuse, [0.95, 0.95, 0.95])
                
                floor_info = {
                    'type': 'floor',
                    'handle': floor_tile,
                    'grid': grid_name,
                    'position': pos
                }
                floor_objects.append(floor_info)
            self.diagnose_and_fix_physics_issues()
        self.field_objects.extend(floor_objects)
        print(f"‚úÖ Created {len(floor_objects)} floor tiles")
        return floor_objects

    def create_boundary_wall(self, start_pos, end_pos, height=0.12, name="Wall"):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏Å‡∏±‡πâ‡∏ô"""
        try:
            length = math.sqrt((end_pos[0] - start_pos[0])**2 + (end_pos[1] - start_pos[1])**2)
            angle = math.atan2(end_pos[1] - start_pos[1], end_pos[0] - start_pos[0])
            
            wall = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                [length, 0.06, height]
            )
            
            center_pos = [
                (start_pos[0] + end_pos[0]) / 2,
                (start_pos[1] + end_pos[1]) / 2,
                height/2 + 0.02
            ]
            
            self.sim.setObjectPosition(wall, -1, center_pos)
            self.sim.setObjectOrientation(wall, -1, [0, 0, angle])
            
            # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            self.sim.setShapeColor(wall, None, 
                self.sim.colorcomponent_ambient_diffuse, [0.2, 0.8, 0.2])
            
            self.sim.setObjectSpecialProperty(wall, 
                self.sim.objectspecialproperty_collidable + 
                self.sim.objectspecialproperty_detectable +
                self.sim.objectspecialproperty_renderable
            )
            
            self.sim.setObjectAlias(wall, name)
            
            wall_info = {
                'type': 'boundary_wall',
                'handle': wall,
                'name': name,
                'position': center_pos
            }
            
            self.field_objects.append(wall_info)
            print(f"üü¢ Created boundary wall: {name}")
            return wall_info
            
        except Exception as e:
            print(f"‚ùå Failed to create boundary wall: {e}")
            return None

    def reinforce_boundary_walls(self):
        """‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"""
        print("üîß ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏∞‡∏•‡∏∏...")
        
        wall_count = 0
        for obj in self.field_objects:
            if obj.get('type') == 'boundary_wall':
                wall_handle = obj['handle']
                wall_name = obj['name']
                
                try:
                    # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à
                    self.sim.setObjectInt32Parameter(wall_handle, self.sim.shapeintparam_static, 1)
                    self.sim.setObjectInt32Parameter(wall_handle, self.sim.shapeintparam_respondable, 1)
                    
                    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏ß‡∏•‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏µ‡∏Å
                    self.sim.setShapeMass(wall_handle, 20000.0)
                    
                    # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                    try:
                        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô (‡πÅ‡∏Ç‡πá‡∏á)
                        self.sim.setEngineFloatParam(3007, wall_handle, 1.0)  # friction ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                        self.sim.setEngineFloatParam(3008, wall_handle, 0.1)  # restitution ‡∏ï‡πà‡∏≥ (‡πÑ‡∏°‡πà‡πÄ‡∏î‡πâ‡∏á)
                    except:
                        pass
                    
                    wall_count += 1
                    print(f"  ‚úÖ ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á: {wall_name}")
                    
                except Exception as e:
                    print(f"  ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á {wall_name}: {e}")
        
        print(f"üõ°Ô∏è ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥‡πÅ‡∏û‡∏á {wall_count} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ physics engine ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        time.sleep(0.5)

    # ===============================================================
    # SECTION 4: OBSTACLE CREATION
    # ===============================================================
    
    def create_obstacle_box(self, grid_x, grid_y, name=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á 60√ó60√ó80 ‡∏ã‡∏°."""
        try:
            if name is None:
                name = f"Obstacle_{chr(65+grid_x)}{grid_y+1}"
            
            obstacle = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                self.obstacle_size
            )
            
            pos = self.grid_to_position(grid_x, grid_y)
            pos.append(self.obstacle_size[2]/2 + 0.02)
            
            self.sim.setObjectPosition(obstacle, -1, pos)
            self.sim.setObjectAlias(obstacle, name)
            
            # ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
            self.sim.setShapeColor(obstacle, None, 
                self.sim.colorcomponent_ambient_diffuse, [0.6, 0.4, 0.2])
            
            self.sim.setObjectSpecialProperty(obstacle, 
                self.sim.objectspecialproperty_collidable + 
                self.sim.objectspecialproperty_detectable +
                self.sim.objectspecialproperty_renderable
            )
            
            obstacle_info = {
                'type': 'obstacle',
                'handle': obstacle,
                'name': name,
                'grid': f"{chr(65+grid_x)}{grid_y+1}",
                'position': pos
            }
            
            self.field_objects.append(obstacle_info)
            print(f"üì¶ Created obstacle: {name} at {obstacle_info['grid']}")
            return obstacle_info
            
        except Exception as e:
            print(f"‚ùå Failed to create obstacle: {e}")
            return None

    def create_adjustable_obstacle(self, grid_x, grid_y, height_multiplier=1, stack_count=1, name=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÑ‡∏î‡πâ"""
        if name is None:
            name = f"Obstacle_{chr(65+grid_x)}{grid_y+1}"
        
        base_height = 0.8  # 80 ‡∏ã‡∏°.
        
        obstacle = self.sim.createPrimitiveShape(
            self.sim.primitiveshape_cuboid,
            [0.6, 0.6, base_height * height_multiplier]
        )
        
        pos = self.grid_to_position(grid_x, grid_y)
        pos.append((base_height * height_multiplier / 2) + 0.02)
        
        self.sim.setObjectPosition(obstacle, -1, pos)
        self.sim.setObjectAlias(obstacle, name)
        
        # ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏π‡∏á
        if height_multiplier == 2:
            self.sim.setShapeColor(obstacle, None, 
                self.sim.colorcomponent_ambient_diffuse, [1.0, 1.0, 0.0])
        else:
            # ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
            self.sim.setShapeColor(obstacle, None, 
                self.sim.colorcomponent_ambient_diffuse, [0.6, 0.4, 0.2])
        
        obstacle_info = {
            'type': 'adjustable_obstacle',
            'handle': obstacle,
            'name': name,
            'grid': f"{chr(65+grid_x)}{grid_y+1}",
            'position': pos,
            'height_multiplier': height_multiplier
        }
        
        self.field_objects.append(obstacle_info)
        return obstacle_info

    def create_obstacle_box_with_qr(self, grid_x, grid_y, name=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏õ‡πâ‡∏≤‡∏¢ QR Code"""
        try:
            if name is None:
                name = f"QRBox_{chr(65+grid_x)}{grid_y+1}"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á
            obstacle = self.create_obstacle_box(grid_x, grid_y, name)
            if not obstacle:
                return None
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢ QR Code ‡∏ï‡∏¥‡∏î‡∏ö‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á
            qr_board = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                self.qr_board_size
            )
            
            # ‡∏ï‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡πà‡∏≠‡∏á
            box_pos = obstacle['position']
            qr_pos = [
                box_pos[0] + self.obstacle_size[0]/2 + 0.015,
                box_pos[1],
                box_pos[2] + 0.15
            ]
            
            self.sim.setObjectPosition(qr_board, -1, qr_pos)
            self.sim.setObjectOrientation(qr_board, -1, [0, math.pi/2, 0])
            self.sim.setObjectAlias(qr_board, f"QR_{name}")
            
            # ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
            self.sim.setShapeColor(qr_board, None, 
                self.sim.colorcomponent_ambient_diffuse, [1, 1, 1])
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö texture
            if os.path.exists(self.qr_texture_path):
                print(f"  ‚úÖ QR texture file found: {name}")
                print(f"  üí° Texture will be white placeholder")
            else:
                print(f"  ‚ö†Ô∏è QR texture file not found: {self.qr_texture_path}")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• obstacle
            obstacle['has_qr'] = True
            obstacle['qr_board'] = qr_board
            obstacle['type'] = 'qr_obstacle'
            
            print(f"üì± Created QR obstacle: {name} at {obstacle['grid']}")
            return obstacle
            
        except Exception as e:
            print(f"‚ùå Failed to create QR obstacle: {e}")
            return None
        
    def create_custom_obstacle(self, grid_x, grid_y, height_cm=80, name=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÑ‡∏î‡πâ (custom)
        
        Args:
            grid_x, grid_y: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á grid
            height_cm: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£ (‡πÄ‡∏ä‡πà‡∏ô 80, 160, 240)
            name: ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á
        """
        try:
            if name is None:
                name = f"CustomObstacle_{chr(65+grid_x)}{grid_y+1}_H{height_cm}"
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å cm ‡πÄ‡∏õ‡πá‡∏ô m
            height_m = height_cm / 100.0
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 240 cm
            if height_cm > 240:
                print(f"‚ö†Ô∏è Warning: Height {height_cm}cm exceeds maximum 240cm")
                height_cm = 240
                height_m = 2.4
            
            obstacle = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                [0.6, 0.6, height_m]  # 60√ó60√ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            )
            
            pos = self.grid_to_position(grid_x, grid_y)
            pos.append(height_m/2 + 0.02)  # ‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
            
            self.sim.setObjectPosition(obstacle, -1, pos)
            self.sim.setObjectAlias(obstacle, name)
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
            if height_cm <= 80:
                color = [0.6, 0.4, 0.2]  # ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
            elif height_cm <= 160:
                color = [1.0, 1.0, 0.0]  # ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            else:
                color = [1.0, 0.5, 0.0]  # ‡∏™‡∏µ‡∏™‡πâ‡∏° (‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å)
            
            self.sim.setShapeColor(obstacle, None, 
                self.sim.colorcomponent_ambient_diffuse, color)
            
            self.sim.setObjectSpecialProperty(obstacle, 
                self.sim.objectspecialproperty_collidable + 
                self.sim.objectspecialproperty_detectable +
                self.sim.objectspecialproperty_renderable
            )
            
            obstacle_info = {
                'type': 'custom_obstacle',
                'handle': obstacle,
                'name': name,
                'grid': f"{chr(65+grid_x)}{grid_y+1}",
                'position': pos,
                'height_cm': height_cm,
                'height_m': height_m
            }
            
            self.field_objects.append(obstacle_info)
            print(f"üì¶ Created custom obstacle: {name} at {obstacle_info['grid']} (H={height_cm}cm)")
            return obstacle_info
            
        except Exception as e:
            print(f"‚ùå Failed to create custom obstacle: {e}")
            return None

    # ===============================================================
    # SECTION 5: SIGNS AND BOARDS
    # ===============================================================
        
    def create_edge_image_stand(self, grid_x, grid_y, height_cm=120, name=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ú‡∏∑‡∏ô‡∏ú‡πâ‡∏≤‡πÇ‡∏á‡πà‡πÜ ‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô"""
        try:
            if name is None:
                name = f"EdgeStand_{chr(65+grid_x)}{grid_y+1}"
            
            # ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏ö
            pos = self.grid_to_edge_position(grid_x, grid_y)
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å cm ‡πÄ‡∏õ‡πá‡∏ô m
            height_m = height_cm / 100.0
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ú‡∏∑‡∏ô‡∏ú‡πâ‡∏≤ - ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô Y, ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô X
            billboard = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                [0.02, 0.50, height_m]  # X=‡∏´‡∏ô‡∏≤, Y=‡∏Å‡∏ß‡πâ‡∏≤‡∏á, Z=‡∏™‡∏π‡∏á
            )
            
            # ‡∏ß‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢
            billboard_pos = pos.copy()
            billboard_pos.append(height_m/2 + 0.01)  # ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
            
            self.sim.setObjectPosition(billboard, -1, billboard_pos)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏´‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á
            center_x, center_y = 0, 0  # ‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°
            dx = center_x - pos[0]
            dy = center_y - pos[1]
            yaw = math.atan2(dy, dx)
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏´‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô
            # ‡∏ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ cuboid ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô +Y (‡∏´‡∏£‡∏∑‡∏≠ -Y)
            # ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏µ‡∏á‡πÑ‡∏õ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° œÄ/2 ‡∏î‡∏π
            self.sim.setObjectOrientation(billboard, -1, [0, 0, yaw])
            
            self.sim.setObjectAlias(billboard, name)
            
            # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏î
            self.sim.setShapeColor(billboard, None, 
                self.sim.colorcomponent_ambient_diffuse, [0.1, 0.5, 1.0])
            
            # ‡πÉ‡∏™‡πà‡πÄ‡∏ó‡πá‡∏Å‡∏ã‡πå‡πÄ‡∏à‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            self.apply_texture_to_board(billboard, self.image_texture_path)
            
            stand_info = {
                'type': 'edge_image_stand',
                'handle': billboard,
                'texture_board': billboard,  # ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                'name': name,
                'grid': f"{chr(65+grid_x)}{grid_y+1}",
                'position': pos,
                'height_cm': height_cm,
                'height_m': height_m,
                'facing_angle': yaw
            }
            
            self.field_objects.append(stand_info)
            print(f"üñºÔ∏è Created billboard: {name} at {stand_info['grid']} (H={height_cm}cm, angle={math.degrees(yaw):.1f}¬∞)")
            return stand_info
            
        except Exception as e:
            print(f"‚ùå Failed to create billboard: {e}")
            return None

    def apply_texture_to_board(self, board_handle, texture_path):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î texture ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CoppeliaSim 4.10"""
        try:
            if not os.path.exists(texture_path):
                return False
            
            # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ - ‡∏Ç‡πâ‡∏≤‡∏° texture loading
            print(f"üìÅ Texture file found: {texture_path}")
            print(f"üí° Using default color (texture loading skipped)")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Texture error: {e}")
            return False

    # ===============================================================
    # SECTION 6: PING PONG SYSTEM
    # ===============================================================
    def create_custom_ping_pong_balls(self, grid_x, grid_y, ball_config):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö custom field
        
        Args:
            grid_x, grid_y: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á grid
            ball_config: dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            {
                'count': 7,           # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å (1-10)
                'size': 40,           # ‡∏Ç‡∏ô‡∏≤‡∏î mm (30-50)
                'mass': 2.7,          # ‡∏°‡∏ß‡∏• g (1.0-5.0)
                'color': 'orange',    # ‡∏™‡∏µ
                'pattern': 'circle',  # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î
                'wind_sensitive': True, # ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏•‡∏°
                'bounce': 0.8         # ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á (0.0-1.0)
            }
        """
        print(f"üèì Creating custom ping pong balls at {chr(65+grid_x)}{grid_y+1}")
        
        # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        default_config = {
            'count': 7,
            'size': 40,
            'mass': 2.7,
            'color': 'orange',
            'pattern': 'circle',
            'wind_sensitive': True,
            'bounce': 0.8
        }
        
        # ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        config = {**default_config, **ball_config}
        
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á
        center_pos = self.grid_to_position(grid_x, grid_y)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î
        if config['pattern'] == 'circle':
            positions = self.get_circle_pattern(config['count'])
        elif config['pattern'] == 'line':
            positions = self.get_line_pattern(config['count'])
        elif config['pattern'] == 'random':
            positions = self.get_random_pattern(config['count'])
        else:
            positions = self.get_grid_pattern(config['count'])
        
        created_balls = []
        
        for i, (offset_x, offset_y) in enumerate(positions):
            ball_pos = [
                center_pos[0] + offset_x,
                center_pos[1] + offset_y,
                0.03  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            ]
            
            name = f"CustomPingPong_{chr(65+grid_x)}{grid_y+1}_{i+1}"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ
            ball = self.create_customizable_ping_pong_ball(ball_pos, name, config)
            
            if ball:
                ball_info = {
                    'type': 'custom_ping_pong',
                    'handle': ball,
                    'name': name,
                    'grid': f"{chr(65+grid_x)}{grid_y+1}",
                    'position': ball_pos,
                    'config': config
                }
                
                self.field_objects.append(ball_info)
                created_balls.append(ball_info)
        
        print(f"‚úÖ Created {len(created_balls)} custom ping pong balls")
        return created_balls

    def create_customizable_ping_pong_ball(self, position, name, config):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ"""
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≤‡∏Å mm ‡πÄ‡∏õ‡πá‡∏ô m
        diameter = config['size'] / 1000.0
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏ß‡∏•‡∏à‡∏≤‡∏Å g ‡πÄ‡∏õ‡πá‡∏ô kg
        mass = config['mass'] / 1000.0
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á sphere
        ball = self.sim.createPrimitiveShape(
            self.sim.primitiveshape_spheroid,
            [diameter, diameter, diameter]
        )
        
        if ball == -1:
            return None
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        self.sim.setObjectAlias(ball, name)
        self.sim.setObjectPosition(ball, -1, position)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ
        color = self.get_ball_color(config['color'])
        self.sim.setShapeColor(ball, None,
            self.sim.colorcomponent_ambient_diffuse, color)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏ß‡∏•
        self.sim.setShapeMass(ball, mass)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
        self.sim.setObjectInt32Parameter(ball, self.sim.shapeintparam_static, 0)
        self.sim.setObjectInt32Parameter(ball, self.sim.shapeintparam_respondable, 1)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á
        try:
            self.sim.setEngineFloatParam(3007, ball, 0.5)  # friction
            self.sim.setEngineFloatParam(3008, ball, config['bounce'])  # restitution
        except:
            pass
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ wind sensitivity
        if config['wind_sensitive']:
            # ‡∏•‡∏î‡∏°‡∏ß‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏•‡∏°
            adjusted_mass = mass * 0.5
            self.sim.setShapeMass(ball, adjusted_mass)
        
        print(f"‚úÖ Created custom ball: {name} (D={config['size']}mm, M={config['mass']}g)")
        return ball

    def get_circle_pattern(self, count):
        """‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏á‡∏Å‡∏•‡∏°"""
        import math
        positions = []
        radius = 0.12  # ‡∏£‡∏±‡∏®‡∏°‡∏µ 12 cm
        
        for i in range(count):
            angle = 2 * math.pi * i / count
            x = radius * math.cos(angle)
            y = radius * math.sin(angle)
            positions.append([x, y])
        
        return positions

    def get_line_pattern(self, count):
        """‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á"""
        positions = []
        spacing = 0.08  # ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 8 cm
        
        for i in range(count):
            x = (i - count/2) * spacing
            y = 0
            positions.append([x, y])
        
        return positions

    def get_random_pattern(self, count):
        """‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°"""
        import random
        positions = []
        
        for i in range(count):
            x = random.uniform(-0.15, 0.15)
            y = random.uniform(-0.15, 0.15)
            positions.append([x, y])
        
        return positions

    def get_grid_pattern(self, count):
        """‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        positions = []
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        import math
        cols = math.ceil(math.sqrt(count))
        rows = math.ceil(count / cols)
        
        spacing = 0.08
        
        for i in range(count):
            row = i // cols
            col = i % cols
            
            x = (col - cols/2) * spacing
            y = (row - rows/2) * spacing
            positions.append([x, y])
        
        return positions

    def get_ball_color(self, color_name):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô RGB"""
        colors = {
            'orange': [1.0, 0.5, 0.0],
            'white': [1.0, 1.0, 1.0],
            'yellow': [1.0, 1.0, 0.0],
            'red': [1.0, 0.0, 0.0],
            'blue': [0.0, 0.0, 1.0],
            'green': [0.0, 1.0, 0.0],
            'pink': [1.0, 0.0, 1.0]
        }
        
        return colors.get(color_name, [1.0, 0.5, 0.0])  # default = orange

    def get_custom_ping_pong_config(self):
        """‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á"""
        print("\nüèì CUSTOM PING PONG CONFIGURATION")
        print("=" * 40)
        
        config = {}
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        print("üìç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á:")
        print("   1  2  3  4  5")
        for i in range(5):
            line = f"{chr(65+i)}  "
            for j in range(5):
                pos = f"{chr(65+i)}{j+1}"
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
                if pos in ['B1', 'D1', 'E2', 'E4']:  # ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤
                    line += "üîµ "
                elif pos in ['B2', 'C3', 'D4', 'E5']:  # ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
                    line += "üì¶ "
                elif pos in ['D2']:  # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
                    line += "üü° "
                else:
                    line += "‚¨ú "
            print(line)
        
        print("\nüîµ = ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤ | üì¶ = ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á | üü° = ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á | ‚¨ú = ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ")
        
        # ‡∏ñ‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        while True:
            grid_position = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô A1, A2, C1): ").strip().upper()
            
            if len(grid_position) != 2 or grid_position[0] not in 'ABCDE' or grid_position[1] not in '12345':
                print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ A1-E5")
                continue
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if grid_position in ['B1', 'D1', 'E2', 'E4']:
                print("‚ùå ‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
                continue
            elif grid_position in ['B2', 'C3', 'D4', 'E5']:
                print("‚ùå ‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß")
                continue
            elif grid_position in ['D2']:
                print("‚ùå ‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")
                continue
            
            config['grid_position'] = grid_position
            break
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å
        while True:
            try:
                count = int(input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á (1-10): "))
                if 1 <= count <= 10:
                    config['count'] = count
                    break
                else:
                    print("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-10")
            except ValueError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        
        # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏π‡∏Å
        while True:
            try:
                size = int(input("‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏π‡∏Å (30-50 mm): "))
                if 30 <= size <= 50:
                    config['size'] = size
                    break
                else:
                    print("‚ùå ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 30-50 mm")
            except ValueError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        
        # ‡∏°‡∏ß‡∏•‡∏•‡∏π‡∏Å
        while True:
            try:
                mass = float(input("‡∏°‡∏ß‡∏•‡∏•‡∏π‡∏Å (1.0-5.0 g): "))
                if 1.0 <= mass <= 5.0:
                    config['mass'] = mass
                    break
                else:
                    print("‚ùå ‡∏°‡∏ß‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1.0-5.0 g")
            except ValueError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        
        # ‡∏™‡∏µ
        print("\n‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: orange, white, yellow, red, blue, green, pink")
        color = input("‡∏™‡∏µ‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á (orange): ").strip().lower()
        config['color'] = color if color else 'orange'
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î
        print("\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î:")
        print("1. circle (‡∏ß‡∏á‡∏Å‡∏•‡∏°)")
        print("2. line (‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á)")
        print("3. grid (‡∏ï‡∏≤‡∏£‡∏≤‡∏á)")
        print("4. random (‡∏™‡∏∏‡πà‡∏°)")
        
        while True:
            pattern_choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (1-4): ")
            patterns = {'1': 'circle', '2': 'line', '3': 'grid', '4': 'random'}
            if pattern_choice in patterns:
                config['pattern'] = patterns[pattern_choice]
                break
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-4")
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡∏ï‡πà‡∏≠‡∏•‡∏°
        wind_sensitive = input("‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏•‡∏°? (y/n): ").strip().lower()
        config['wind_sensitive'] = wind_sensitive in ['y', 'yes']
        
        # ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á
        while True:
            try:
                bounce = float(input("‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á (0.0-1.0): "))
                if 0.0 <= bounce <= 1.0:
                    config['bounce'] = bounce
                    break
                else:
                    print("‚ùå ‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.0-1.0")
            except ValueError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        
        return config

    def get_multiple_ping_pong_config(self):
        """‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á"""
        print("\nüèì MULTIPLE PING PONG CONFIGURATION")
        print("=" * 40)
        
        configs = []
        
        while True:
            print(f"\n--- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà {len(configs) + 1} ---")
            
            # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            config = self.get_custom_ping_pong_config()
            configs.append(config)
            
            # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            add_more = input("\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô? (y/n): ").strip().lower()
            if add_more not in ['y', 'yes']:
                break
        
        return configs

    def create_multiple_ping_pong_areas(self, configs):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á"""
        created_areas = []
        
        for i, config in enumerate(configs):
            grid_position = config['grid_position']
            grid_x = ord(grid_position[0]) - ord('A')
            grid_y = int(grid_position[1]) - 1
            
            print(f"\nüèì Creating ping pong area {i+1} at {grid_position}")
            
            balls = self.create_custom_ping_pong_balls(grid_x, grid_y, config)
            created_areas.append({
                'position': grid_position,
                'balls': balls,
                'config': config
            })
        
        print(f"\n‚úÖ Created {len(created_areas)} ping pong areas!")
        return created_areas


    def create_ping_pong_ball(self, position, name, ultra_sensitive=False):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏£‡∏±‡πâ‡∏ß‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞
        diameter = 0.04  # 4cm
        mass_real = 0.0027
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á mesh shape (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        vertices = []
        indices = []
        
        import math
        radius = diameter / 2
        segments = 16
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á vertices ‡∏Ç‡∏≠‡∏á sphere
        for i in range(segments):
            for j in range(segments):
                theta = 2 * math.pi * i / segments
                phi = math.pi * j / segments
                
                x = radius * math.sin(phi) * math.cos(theta)
                y = radius * math.sin(phi) * math.sin(theta)
                z = radius * math.cos(phi)
                
                vertices.extend([x, y, z])
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á indices ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö triangles
        for i in range(segments - 1):
            for j in range(segments - 1):
                p1 = i * segments + j
                p2 = (i + 1) * segments + j
                p3 = i * segments + (j + 1)
                p4 = (i + 1) * segments + (j + 1)
                
                indices.extend([p1, p2, p3])
                indices.extend([p2, p4, p3])
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á mesh shape
        ball = self.sim.createMeshShape(2, 0, vertices, indices)
        
        if ball == -1:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á {name} ‡πÑ‡∏î‡πâ")
            return None
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        self.sim.setObjectAlias(ball, name)
        pos = position.copy()
        pos[2] = 0.05  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.sim.setObjectPosition(ball, -1, pos)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏™‡∏î
        self.sim.setShapeColor(ball, None,
            self.sim.colorcomponent_ambient_diffuse, [1.0, 0.5, 0.0])
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏ß‡∏•‡πÅ‡∏•‡∏∞‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
        mass = 0.0005 if ultra_sensitive else mass_real
        self.sim.setShapeMass(ball, mass)
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        time.sleep(0.1)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
        self.sim.setObjectInt32Parameter(ball, self.sim.shapeintparam_static, 0)
        self.sim.setObjectInt32Parameter(ball, self.sim.shapeintparam_respondable, 1)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ inertia
        inertia = (2/5) * mass * radius**2
        inertia_matrix = [inertia, 0, 0, 0, inertia, 0, 0, 0, inertia]
        transform = [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]
        self.sim.setShapeInertia(ball, inertia_matrix, transform)
        
        # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
        try:
            self.sim.setEngineFloatParam(3007, ball, 0.5)   # ‡πÄ‡∏û‡∏¥‡πà‡∏° friction
            self.sim.setEngineFloatParam(3008, ball, 0.8)   # ‡πÄ‡∏û‡∏¥‡πà‡∏° restitution (‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πâ‡∏á)
        except:
            pass
        
        # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô reset
        time.sleep(0.1)
        self.sim.resetDynamicObject(ball)
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á {name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ç‡∏ô‡∏≤‡∏î: {diameter}m, mesh)")
        return ball

    def verify_ping_pong_shape_type(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Shape ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Sphere ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Shape ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á...")
        
        for obj in self.field_objects:
            if obj.get('type') == 'wind_responsive_a3':
                ball_handle = obj['handle']
                ball_name = obj['name']
                
                try:
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mesh
                    vertices, indices, normals = self.sim.getShapeMesh(ball_handle)
                    vertex_count = len(vertices) // 3
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                    pos = self.sim.getObjectPosition(ball_handle, -1)
                    
                    print(f"üèì {ball_name}:")
                    print(f"   Vertices: {vertex_count}")
                    print(f"   Position: [{pos[0]:.3f}, {pos[1]:.3f}, {pos[2]:.3f}]")
                    
                    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Shape
                    if vertex_count < 10:
                        print(f"   ‚ùå ‡πÄ‡∏õ‡πá‡∏ô Plane ‡∏´‡∏£‡∏∑‡∏≠ Simple Shape (vertices < 10)")
                        return False
                    elif vertex_count < 50:
                        print(f"   ‚ö†Ô∏è ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô Low-poly Shape")
                        return False
                    else:
                        print(f"   ‚úÖ ‡πÄ‡∏õ‡πá‡∏ô Sphere ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                        return True
                        
                except Exception as e:
                    print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: {e}")
                    return False
        
        return False

    def create_ping_pong_in_fenced_area(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á A3 - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
        grid_x, grid_y = 0, 2  # A3
        
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á A3
        center_pos = self.grid_to_position(grid_x, grid_y)
        
        # ‡∏à‡∏±‡∏î‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        ball_patterns = [
            [0, 0],        # ‡∏Å‡∏•‡∏≤‡∏á
            [-0.15, 0],    # ‡∏ã‡πâ‡∏≤‡∏¢
            [0.15, 0],     # ‡∏Ç‡∏ß‡∏≤  
            [0, -0.15],    # ‡∏•‡πà‡∏≤‡∏á
            [0, 0.15],     # ‡∏ö‡∏ô
            [-0.1, -0.1],  # ‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á
            [0.1, 0.1],    # ‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
        ]
        
        created_balls = []
        
        for i, (offset_x, offset_y) in enumerate(ball_patterns):
            ball_pos = [
                center_pos[0] + offset_x,
                center_pos[1] + offset_y,
                0.05  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á 5cm
            ]
            
            name = f"PingPong_A3_{i+1}"
            
            # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
            ball = self.create_ping_pong_ball(ball_pos, name, ultra_sensitive=False)
            
            if ball:
                ball_info = {
                    'type': 'wind_responsive_a3',
                    'handle': ball,
                    'name': name,
                    'grid': 'A3',
                    'position': ball_pos,
                    'mass_g': 2.7,
                    'diameter_mm': 40,
                    'dynamic': True,
                    'wind_responsive': True,
                    'color': 'orange'
                }
                
                self.field_objects.append(ball_info)
                created_balls.append(ball_info)
        
        print(f"üèì Created {len(created_balls)} wind-responsive ping pong balls in A3")
        return created_balls

    def check_ping_pong_visibility(self):
        """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Plane ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Sphere"""
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
        
        ping_pong_balls = []
        for obj in self.field_objects:
            if obj.get('type') == 'wind_responsive_a3':
                ping_pong_balls.append(obj)
        
        if not ping_pong_balls:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á")
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Shape ‡∏Å‡πà‡∏≠‡∏ô
        is_sphere = self.verify_ping_pong_shape_type()
        
        if not is_sphere:
            print("üîß ‡∏û‡∏ö Plane ‡πÅ‡∏ó‡∏ô Sphere - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...")
            
            for ball_info in ping_pong_balls:
                ball_handle = ball_info['handle']
                ball_name = ball_info['name']
                
                try:
                    # ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÄ‡∏Å‡πà‡∏≤
                    self.sim.removeObjects([ball_handle])
                    print(f"üóëÔ∏è ‡∏•‡∏ö Plane {ball_name}")
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Sphere ‡πÉ‡∏´‡∏°‡πà
                    new_position = ball_info['position']
                    new_ball = self.create_ping_pong_ball(new_position, ball_name, False)
                    
                    if new_ball:
                        ball_info['handle'] = new_ball
                        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sphere {ball_name} ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else:
                        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Sphere {ball_name} ‡πÑ‡∏î‡πâ")
                        
                except Exception as e:
                    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö {ball_name}: {e}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        time.sleep(1.0)
        self.verify_ping_pong_shape_type()

    def create_ping_pong_balls_in_grid(self, grid_x, grid_y, num_balls=7, name_prefix=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î - ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏£‡∏á‡∏•‡∏°"""
        if name_prefix is None:
            name_prefix = f"PingPong_{chr(65+grid_x)}{grid_y+1}"
        
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á
        center_pos = self.grid_to_position(grid_x, grid_y)
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 7 ‡∏•‡∏π‡∏Å)
        ball_patterns = [
            [0, 0],        # 1. ‡∏Å‡∏•‡∏≤‡∏á
            [-0.15, 0],    # 2. ‡∏ã‡πâ‡∏≤‡∏¢
            [0.15, 0],     # 3. ‡∏Ç‡∏ß‡∏≤  
            [0, -0.15],    # 4. ‡∏•‡πà‡∏≤‡∏á
            [0, 0.15],     # 5. ‡∏ö‡∏ô
            [-0.1, -0.1],  # 6. ‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á
            [0.1, 0.1],    # 7. ‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
        ]
        
        created_balls = []
        
        for i in range(min(num_balls, len(ball_patterns))):
            offset_x, offset_y = ball_patterns[i]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á
            ball_pos = [
                center_pos[0] + offset_x,
                center_pos[1] + offset_y,
                0.025  # ‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô
            ]
            
            name = f"{name_prefix}_{i+1}"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏£‡∏á‡∏•‡∏°
            ball = self.create_ping_pong_ball(ball_pos, name, ultra_sensitive=False)
            
            if ball:
                ball_info = {
                    'type': 'wind_responsive_ping_pong',
                    'handle': ball,
                    'name': name,
                    'grid': f"{chr(65+grid_x)}{grid_y+1}",
                    'position': ball_pos,
                    'mass_g': 2.7,
                    'diameter_mm': 40,
                    'dynamic': True,
                    'wind_responsive': True
                }
                
                self.field_objects.append(ball_info)
                created_balls.append(ball_info)
        
        grid_name = f"{chr(65+grid_x)}{grid_y+1}"
        print(f"üèì Created {len(created_balls)} wind-responsive ping pong balls in {grid_name}")
        return created_balls
    
    # ===============================================================
    # SECTION 7: FENCE SYSTEMS
    # ===============================================================
    
    def create_livestock_fence_from_diagram(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏∞‡∏•‡∏∏"""
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ grid
        a3_pos = self.grid_to_position(0, 2)  # A3
        a4_pos = self.grid_to_position(0, 3)  # A4
        b3_pos = self.grid_to_position(1, 2)  # B3
        b4_pos = self.grid_to_position(1, 3)  # B4
        b5_pos = self.grid_to_position(1, 4)  # B5
        
        half_tile = self.tile_size / 2
        
        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏£‡∏±‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô 10cm
        fence_height = 0.1
        
        fence_segments = [
            # ‡∏£‡∏±‡πâ‡∏ß‡∏•‡πà‡∏≤‡∏á A3-B3
            ([a3_pos[0] - half_tile, a3_pos[1] - half_tile], 
            [b3_pos[0] + half_tile, b3_pos[1] - half_tile], "A3_B3_Bottom"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ A3-A4
            ([a3_pos[0] - half_tile, a3_pos[1] - half_tile], 
            [a4_pos[0] - half_tile, a4_pos[1] + half_tile], "A3_A4_Left"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ö‡∏ô A4
            ([a4_pos[0] - half_tile, a4_pos[1] + half_tile], 
            [b4_pos[0] - half_tile, b4_pos[1] + half_tile], "A4_Top"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏Ç‡∏ß‡∏≤ B5-B4
            ([b5_pos[0] + half_tile, b5_pos[1] + half_tile], 
            [b4_pos[0] + half_tile, b4_pos[1] - half_tile], "B5_B4_Right"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ B5
            ([b4_pos[0] - half_tile, b4_pos[1] + half_tile], 
            [b4_pos[0] - half_tile, b5_pos[1] + half_tile], "B5_Left"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ö‡∏ô B5
            ([b4_pos[0] - half_tile, b5_pos[1] + half_tile], 
            [b5_pos[0] + half_tile, b5_pos[1] + half_tile], "B5_Top"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏•‡πà‡∏≤‡∏á B4-B3
            ([b4_pos[0] + half_tile, b4_pos[1] - half_tile], 
            [b3_pos[0] + half_tile, b3_pos[1] - half_tile], "B4_B3_Bottom"),
            
            ([a3_pos[0] + half_tile, a3_pos[1] - half_tile], 
            [a4_pos[0] + half_tile, a4_pos[1] - half_tile], "A3_Right"),
            
            ([b3_pos[0] - half_tile, b3_pos[1] - half_tile], 
            [b4_pos[0] - half_tile, b4_pos[1] - half_tile], "B3_Left"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ö‡∏ô B3 (‡πÑ‡∏õ‡∏´‡∏≤ A3)
            ([a4_pos[0] + half_tile, a4_pos[1] - half_tile], 
            [b4_pos[0] - half_tile, b4_pos[1] - half_tile], "B3_A3_Top"),
            
            # ‡∏£‡∏±‡πâ‡∏ß‡∏ã‡πâ‡∏≤‡∏¢ A3 (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î)
            ([a3_pos[0] - half_tile, a3_pos[1] + half_tile], 
            [a3_pos[0] - half_tile, a3_pos[1] - half_tile], "A3_Left"),
        ]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà
        for start_pos, end_pos, name in fence_segments:
            self.create_boundary_wall(start_pos, end_pos, height=fence_height, name=name)
        
        print(f"üü¢ Created livestock fence (shaped boundary) - Height: {fence_height*100:.0f}cm, Thickness: 18cm")

    def check_ping_pong_containment(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡πâ‡∏ß‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á...")
        
        # ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡πâ‡∏ß A3 (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
        a3_pos = self.grid_to_position(0, 2)
        half_tile = self.tile_size / 2
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏±‡πâ‡∏ß 5cm)
        safe_margin = 0.05
        bounds = {
            'min_x': a3_pos[0] - half_tile + safe_margin,
            'max_x': a3_pos[0] + half_tile - safe_margin,
            'min_y': a3_pos[1] - half_tile + safe_margin,
            'max_y': a3_pos[1] + half_tile - safe_margin,
            'min_z': 0.01,
            'max_z': 0.35  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        }
        
        escaped_balls = []
        
        for obj in self.field_objects:
            if obj.get('type') == 'wind_responsive_a3':
                ball_handle = obj['handle']
                ball_name = obj['name']
                
                try:
                    pos = self.sim.getObjectPosition(ball_handle, -1)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if (pos[0] < bounds['min_x'] or pos[0] > bounds['max_x'] or
                        pos[1] < bounds['min_y'] or pos[1] > bounds['max_y'] or
                        pos[2] < bounds['min_z'] or pos[2] > bounds['max_z']):
                        
                        escaped_balls.append({
                            'name': ball_name,
                            'handle': ball_handle,
                            'position': pos
                        })
                        print(f"‚ö†Ô∏è {ball_name} ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï: {pos}")
                    else:
                        print(f"‚úÖ {ball_name} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
                        
                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö {ball_name}: {e}")
        
        if escaped_balls:
            print(f"üö® ‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á {len(escaped_balls)} ‡∏•‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï")
            return escaped_balls
        else:
            print("üéâ ‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
            return []

    def reset_escaped_balls(self, escaped_balls):
        """‡∏ô‡∏≥‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏∏‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï...")
        
        a3_pos = self.grid_to_position(0, 2)
        
        for ball_info in escaped_balls:
            # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á A3
            new_pos = [a3_pos[0], a3_pos[1], 0.1]
            
            self.sim.setObjectPosition(ball_info['handle'], -1, new_pos)
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
            self.sim.setObjectFloatParameter(ball_info['handle'], self.sim.shapefloatparam_init_velocity_x, 0)
            self.sim.setObjectFloatParameter(ball_info['handle'], self.sim.shapefloatparam_init_velocity_y, 0)
            self.sim.setObjectFloatParameter(ball_info['handle'], self.sim.shapefloatparam_init_velocity_z, 0)
            
            self.sim.resetDynamicObject(ball_info['handle'])
            
            print(f"‚úÖ ‡∏ô‡∏≥ {ball_info['name']} ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
        
    def create_movable_ping_pong_area(self, anchor_grid_x, anchor_grid_y):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡πâ‡∏≤‡∏¢ - ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°"""
        print(f"üèì Creating movable ping pong area at {chr(65+anchor_grid_x)}{anchor_grid_y+1}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å field_objects ‡πÄ‡∏î‡∏¥‡∏°
        old_count = len(self.field_objects)
        
        # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å create_ping_pong_boundaries() ‡πÄ‡∏õ‡πá‡∏ô create_livestock_fence_from_diagram()
        self.create_livestock_fence_from_diagram()
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°...
        new_fences = self.field_objects[old_count:]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
        original_pos = self.grid_to_position(0, 3)  # A4
        new_pos = self.grid_to_position(anchor_grid_x, anchor_grid_y)
        
        offset_x = new_pos[0] - original_pos[0]
        offset_y = new_pos[1] - original_pos[1]
        
        # ‡∏¢‡πâ‡∏≤‡∏¢‡∏£‡∏±‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô
        for fence in new_fences:
            if fence.get('type') == 'boundary_wall':
                current_pos = self.sim.getObjectPosition(fence['handle'], -1)
                
                new_fence_pos = [
                    current_pos[0] + offset_x,
                    current_pos[1] + offset_y,
                    current_pos[2]
                ]
                
                self.sim.setObjectPosition(fence['handle'], -1, new_fence_pos)
        
        print(f"‚úÖ Moved {len(new_fences)} fence pieces to new position")
        return new_fences

    # ===============================================================
    # SECTION 8: MISSON PAD MANAGEMENT
    # ===============================================================
    def load_obj_model_safe(self, obj_path, name):
        """‡πÇ‡∏´‡∏•‡∏î .obj model ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô"""
        try:
            if not os.path.exists(obj_path):
                print(f"‚ùå .obj file not found: {obj_path}")
                return None
            
            abs_path = os.path.abspath(obj_path)
            print(f"üì¶ Loading .obj with sim.importShape: {abs_path}")
            
            # ‡πÇ‡∏´‡∏•‡∏î shape
            shape_handle = self.sim.importShape(
                0,          # fileformat (0 = OBJ)
                abs_path,   # pathAndFilename
                0,          # options
                0.0001,     # identicalVerticeTolerance
                1.0         # scalingFactor
            )
            
            if shape_handle != -1:
                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏´‡πâ‡∏ô‡∏≠‡∏ô‡∏£‡∏≤‡∏ö
                # ‡∏´‡∏°‡∏∏‡∏ô 90 ‡∏≠‡∏á‡∏®‡∏≤‡∏£‡∏≠‡∏ö‡πÅ‡∏Å‡∏ô X ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡∏≠‡∏ô‡∏£‡∏≤‡∏ö
                self.sim.setObjectOrientation(shape_handle, -1, [-1.5708, 0, 0])  # -90 degrees in radians
                
                print(f"‚úÖ Successfully imported and rotated shape: {shape_handle}")
                return shape_handle
            else:
                print(f"‚ùå Failed to import shape")
                return None
                
        except Exception as e:
            print(f"‚ùå Exception with sim.importShape: {e}")
            return None
        
    def create_mission_pad(self, grid_x, grid_y, pad_number, name=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pad ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ absolute path"""
        try:
            if name is None:
                name = f"MissionPad_{pad_number}_{chr(65+grid_x)}{grid_y+1}"
            
            # ‡πÉ‡∏ä‡πâ absolute path
            import os
            current_dir = os.path.dirname(os.path.abspath(__file__))
            obj_path = os.path.join(current_dir, f"mission_{pad_number}.obj")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î
            if os.path.exists(obj_path):
                print(f"üì¶ Loading .obj model: {obj_path}")
                pad_handle = self.load_obj_model(obj_path, name)
                
                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
                if pad_handle and pad_handle != -1:
                    # ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                    pos = self.grid_to_position(grid_x, grid_y)
                    pos.append(0.01)  # ‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô
                    
                    self.sim.setObjectPosition(pad_handle, -1, pos)
                    self.sim.setObjectAlias(pad_handle, name)
                    
                    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
                    self.sim.setObjectInt32Parameter(pad_handle, self.sim.shapeintparam_static, 1)
                    self.sim.setObjectInt32Parameter(pad_handle, self.sim.shapeintparam_respondable, 1)
                    
                    pad_info = {
                        'type': 'mission_pad',
                        'handle': pad_handle,
                        'name': name,
                        'grid': f"{chr(65+grid_x)}{grid_y+1}",
                        'position': pos,
                        'pad_number': pad_number,
                        'source': 'obj_model'
                    }
                    
                    self.field_objects.append(pad_info)
                    print(f"‚úÖ Created Mission Pad {pad_number} from .obj: {name}")
                    return pad_info
                else:
                    print(f"‚ùå Failed to load .obj, using color fallback")
                    return self.create_mission_pad_color_fallback(grid_x, grid_y, pad_number, name)
            else:
                print(f"‚ùå .obj file not found at: {obj_path}")
                return self.create_mission_pad_color_fallback(grid_x, grid_y, pad_number, name)
                
        except Exception as e:
            print(f"‚ùå Failed to create Mission Pad {pad_number}: {e}")
            return self.create_mission_pad_color_fallback(grid_x, grid_y, pad_number, name)

    def create_mission_pad_color_fallback(self, grid_x, grid_y, pad_number, name):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pad ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ .obj model"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á primitive shape
            pad_base = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                [0.6, 0.6, 0.02]  # 60x60x2cm
            )
            
            if pad_base == -1:
                print(f"‚ùå Failed to create primitive shape for {name}")
                return None
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            pos = self.grid_to_position(grid_x, grid_y)
            pos.append(0.01)
            
            self.sim.setObjectPosition(pad_base, -1, pos)
            self.sim.setObjectAlias(pad_base, name)
            
            # ‡πÉ‡∏™‡πà‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
            self.apply_color_by_number(pad_base, pad_number)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå
            self.sim.setObjectInt32Parameter(pad_base, self.sim.shapeintparam_static, 1)
            self.sim.setObjectInt32Parameter(pad_base, self.sim.shapeintparam_respondable, 1)
            
            pad_info = {
                'type': 'mission_pad',
                'handle': pad_base,
                'name': name,
                'grid': f"{chr(65+grid_x)}{grid_y+1}",
                'position': pos,
                'pad_number': pad_number,
                'source': 'color_fallback'
            }
            
            self.field_objects.append(pad_info)
            print(f"‚úÖ Created Mission Pad {pad_number} with color: {name}")
            return pad_info
            
        except Exception as e:
            print(f"‚ùå Failed to create color fallback for {name}: {e}")
            return None

    def create_fixed_mission_pads(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pads ‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ü‡∏¥‡∏Å‡∏™‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        print("üéØ Creating Fixed Mission Pads...")
        
        # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        # C2 = grid_x=2, grid_y=1
        # D3 = grid_x=3, grid_y=2  
        # C4 = grid_x=2, grid_y=3
        # D5 = grid_x=3, grid_y=4
        
        fixed_positions = [
            (2, 1, 1),  # C2 - Mission Pad 1
            (3, 2, 2),  # D3 - Mission Pad 2
            (2, 3, 3),  # C4 - Mission Pad 3
            (3, 4, 4),  # D5 - Mission Pad 4
        ]
        
        created_pads = []
        
        for grid_x, grid_y, pad_number in fixed_positions:
            pad = self.create_mission_pad(grid_x, grid_y, pad_number)
            if pad:
                created_pads.append(pad)
        
        print(f"üéØ Created {len(created_pads)} Fixed Mission Pads")
        return created_pads

    def create_interactive_mission_pads(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pads ‡πÅ‡∏ö‡∏ö interactive"""
        print("\nüéØ MISSION PAD CREATION")
        print("=" * 30)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        print("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: C2, D3, C4, D5")
        
        pad_configs = []
        used_positions = set()
        
        while True:
            try:
                # ‡∏ñ‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Mission Pad
                num_pads = int(input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Mission Pad (1-8): "))
                if 1 <= num_pads <= 8:
                    break
                else:
                    print("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-8")
            except ValueError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        
        for i in range(num_pads):
            print(f"\n--- Mission Pad ‡∏ó‡∏µ‡πà {i+1} ---")
            
            # ‡∏ñ‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            while True:
                position = input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÄ‡∏ä‡πà‡∏ô C2, D3): ").strip().upper()
                
                if len(position) < 2 or position[0] not in 'ABCDE' or not position[1:].isdigit():
                    print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    continue
                
                if position in used_positions:
                    print("‚ùå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß")
                    continue
                
                used_positions.add(position)
                break
            
            # ‡∏ñ‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
            while True:
                try:
                    pad_number = int(input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Mission Pad (1-8): "))
                    if 1 <= pad_number <= 8:
                        break
                    else:
                        print("‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-8")
                except ValueError:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            
            pad_configs.append({
                'grid': position,
                'number': pad_number
            })
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pads
        return self.create_custom_mission_pads(pad_configs)

    def get_mission_pad_input(self):
        """‡∏£‡∏±‡∏ö input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á Mission Pad ‡πÅ‡∏ö‡∏ö interactive"""
        print("\nüéØ Mission Pad Configuration")
        print("Available positions: A1-E5 (e.g., C2, D3)")
        print("Available numbers: 1-8")
        print("Enter 'done' to finish")
        
        pad_configs = []
        
        while True:
            try:
                grid_input = input("\nEnter grid position (or 'done'): ").strip()
                
                if grid_input.lower() == 'done':
                    break
                
                if len(grid_input) < 2:
                    print("‚ùå Invalid format. Use format like 'C2'")
                    continue
                
                number_input = input("Enter Mission Pad number (1-8): ").strip()
                
                try:
                    pad_number = int(number_input)
                    if pad_number < 1 or pad_number > 8:
                        print("‚ùå Number must be 1-8")
                        continue
                except ValueError:
                    print("‚ùå Invalid number")
                    continue
                
                pad_configs.append({
                    'grid': grid_input,
                    'number': pad_number
                })
                
                print(f"‚úÖ Added Mission Pad {pad_number} at {grid_input}")
                
            except KeyboardInterrupt:
                print("\n‚ùå Input cancelled")
                break
        
        return pad_configs

    def apply_color_by_number(self, handle, pad_number):
        """‡πÉ‡∏™‡πà‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Mission Pad"""
        colors = [
            [1.0, 0.0, 0.0],  # 1 = ‡πÅ‡∏î‡∏á
            [0.0, 1.0, 0.0],  # 2 = ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            [0.0, 0.0, 1.0],  # 3 = ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
            [1.0, 1.0, 0.0],  # 4 = ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            [1.0, 0.0, 1.0],  # 5 = ‡∏°‡πà‡∏ß‡∏á
            [0.0, 1.0, 1.0],  # 6 = ‡∏ü‡πâ‡∏≤
            [1.0, 0.5, 0.0],  # 7 = ‡∏™‡πâ‡∏°
            [0.5, 0.5, 0.5],  # 8 = ‡πÄ‡∏ó‡∏≤
        ]
        
        color_index = (pad_number - 1) % len(colors)
        self.sim.setShapeColor(handle, None,
            self.sim.colorcomponent_ambient_diffuse, colors[color_index])

    def create_custom_mission_pads(self, pad_configs):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pads ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        print(f"üéØ Creating {len(pad_configs)} custom Mission Pads...")
        
        created_pads = []
        
        for config in pad_configs:
            grid_str = config['grid'].upper()
            pad_number = config['number']
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á grid ‡πÄ‡∏õ‡πá‡∏ô coordinate
            if len(grid_str) >= 2:
                grid_x = ord(grid_str[0]) - ord('A')  # A=0, B=1, C=2, ...
                grid_y = int(grid_str[1:]) - 1        # 1=0, 2=1, 3=2, ...
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
                if 0 <= grid_x < 5 and 0 <= grid_y < 5:
                    pad = self.create_mission_pad(grid_x, grid_y, pad_number)
                    if pad:
                        created_pads.append(pad)
                        print(f"‚úÖ Created Mission Pad {pad_number} at {grid_str}")
                    else:
                        print(f"‚ùå Failed to create Mission Pad {pad_number} at {grid_str}")
                else:
                    print(f"‚ùå Invalid grid position: {grid_str}")
            else:
                print(f"‚ùå Invalid grid format: {grid_str}")
        
        print(f"üéØ Created {len(created_pads)} Mission Pads successfully!")
        return created_pads
    # ===============================================================
    # SECTION 9: COMPLETE FIELD CREATION
    # ===============================================================
    
    def create_complete_field(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° Mission Pad"""
        print("üèóÔ∏è Creating complete Drone Odyssey Challenge field...")
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
        self.clear_field()

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ physics
        self.diagnose_and_fix_physics_issues()

        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°
        self.create_tiled_floor()
        
        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤
        print("üîµ Creating blue signs...")
        self.create_edge_image_stand(1, 0, 120)  # B1
        self.create_edge_image_stand(3, 0, 120)  # D1
        self.create_edge_image_stand(4, 1, 120)  # E2
        self.create_edge_image_stand(4, 3, 120)  # E4
        
        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
        print("ü©∑ Creating brown boxes...")
        self.create_obstacle_box(1, 1)  # B2
        self.create_obstacle_box(2, 2)  # C3
        self.create_obstacle_box(3, 3)  # D4
        self.create_obstacle_box(4, 4)  # E5
        
        print("üü° Creating yellow box...")
        self.create_adjustable_obstacle(3, 1, height_multiplier=2, name="YellowBox_D2")
        
        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á
        print("üü¢ Creating green fence...")
        self.create_livestock_fence_from_diagram()
    
        # 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pad (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ü‡∏¥‡∏Å)
        self.create_fixed_mission_pads()

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ physics ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
        time.sleep(1.5)

        # 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á
        print("üèì Creating ping pong balls...")
        self.create_ping_pong_in_fenced_area()
        
        print("‚úÖ Complete field with Mission Pads created successfully!")
        self.list_field_objects()

    def create_custom_field_with_heights(self, obstacle_config=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏° custom ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ
        
        Args:
            obstacle_config: dict ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
            ‡πÄ‡∏ä‡πà‡∏ô {'B2': 120, 'C3': 200, 'D4': 80}
        """
        print("üèóÔ∏è Creating custom field with adjustable obstacles...")
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
        self.clear_field()
        
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°
        self.create_tiled_floor()
        
        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        print("üîµ Creating blue signs (facing center)...")
        self.create_edge_image_stand(1, 0)  # B1
        self.create_edge_image_stand(3, 0)  # D1
        self.create_edge_image_stand(4, 1)  # E2
        self.create_edge_image_stand(4, 3)  # E4
        
        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        if obstacle_config is None:
            # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            obstacle_config = {
                'B2': 80,   # B2 ‡∏™‡∏π‡∏á 80 cm
                'C3': 120,  # C3 ‡∏™‡∏π‡∏á 120 cm
                'D4': 160,  # D4 ‡∏™‡∏π‡∏á 160 cm
                'E5': 240   # E5 ‡∏™‡∏π‡∏á 240 cm (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
            }
        
        print("üì¶ Creating custom obstacles with heights...")
        for grid_name, height in obstacle_config.items():
            grid_x = ord(grid_name[0]) - 65  # A=0, B=1, C=2, ...
            grid_y = int(grid_name[1:]) - 1  # 1=0, 2=1, 3=2, ...
            
            self.create_custom_obstacle(grid_x, grid_y, height)
        
        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        print("üü¢ Creating green fence...")
        self.create_livestock_fence_from_diagram()
        
        print("üèì Creating ping pong balls...")
        self.create_ping_pong_in_fenced_area()
        
        print("‚úÖ Custom field created successfully!")
        self.list_field_objects()

    def create_interactive_custom_field(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏° custom ‡πÅ‡∏ö‡∏ö interactive - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ compound object"""
        print("üé® Interactive Custom Field Creator")
        print("=" * 50)
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
        self.clear_field()
        
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏™‡∏ô‡∏≤‡∏°
        self.create_tiled_floor()
        
        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤
        self.create_interactive_signs()
        
        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
        self.create_interactive_obstacles()
        
        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á compound object
        print("\nüèì ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á (Compound Object)")
        print("=" * 40)
            # ‡∏£‡∏±‡∏ö input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mission Pad
        pad_configs = self.get_mission_pad_input()
            
        if pad_configs:
            self.create_custom_mission_pads(pad_configs)
        else:
            print("‚ÑπÔ∏è No Mission Pads added")
            
            # ‡∏£‡∏±‡∏ö input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ (optional)
            
        print("‚úÖ Custom field with Mission Pads created successfully!")  

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ
        print("üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ:")
        print("   1  2  3  4  5")
        for i in range(5):
            line = f"{chr(65+i)}  "
            for j in range(5):
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà 3√ó2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏•‡∏Ç 4 ‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô
                can_place = (i + 2 < 5 and j + 1 < 5)
                line += "üü¢ " if can_place else "‚ùå "
            print(line)
        
        # ‡∏ñ‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        while True:
            position = input("\n‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (A4) ‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á: ").strip().upper()
            
            if len(position) != 2 or position[0] not in 'ABCDE' or position[1] not in '12345':
                print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                continue
            
            grid_x = ord(position[0]) - ord('A')
            grid_y = int(position[1]) - 1
            
            if grid_x + 2 >= 5 or grid_y + 1 >= 5:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ - ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö‡∏™‡∏ô‡∏≤‡∏°")
                continue
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á compound object
            result = self.create_movable_ping_pong_area(grid_x, grid_y)
            if result:
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà {position} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                break      

# ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß

        print("\nüèì CUSTOM PING PONG BALLS")
        print("=" * 30)

        # ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        customize_balls = input("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á? (y/n): ").strip().lower()

        if customize_balls in ['y', 'yes']:
            # ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢
            ball_config = self.get_custom_ping_pong_config()
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            grid_position = ball_config['grid_position']
            grid_x = ord(grid_position[0]) - ord('A')  # A=0, B=1, C=2, ...
            grid_y = int(grid_position[1]) - 1         # 1=0, 2=1, 3=2, ...
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            self.create_custom_ping_pong_balls(grid_x, grid_y, ball_config)
            
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà {grid_position} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        else:
            # ‡πÉ‡∏ä‡πâ‡∏•‡∏π‡∏Å‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà A3
            self.create_ping_pong_in_fenced_area()

    def create_interactive_obstacles(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡πÅ‡∏ö‡∏ö interactive"""
        print("\nüì¶ OBSTACLE CREATION")
        print("=" * 30)
        
        # ‡∏ñ‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
        while True:
            try:
                num_obstacles = int(input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (1-10): "))
                if 1 <= num_obstacles <= 10:
                    break
                else:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1-10")
            except ValueError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        print("\nüìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ:")
        print("   1  2  3  4  5")
        for i in range(5):
            line = f"{chr(65+i)}  "
            for j in range(5):
                pos = f"{chr(65+i)}{j+1}"
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ß‡∏≤‡∏á
                if pos in ['B1', 'D1', 'E2', 'E4']:  # ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤
                    line += "üîµ "
                elif pos in ['A3', 'A4', 'A5', 'B3', 'B4', 'B5']:  # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á
                    line += "üèì "
                else:
                    line += "‚¨ú "
            print(line)
        
        print("\nüîµ = ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤ (‡∏´‡πâ‡∏≤‡∏°‡∏ß‡∏≤‡∏á)")
        print("üèì = ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á (‡∏´‡πâ‡∏≤‡∏°‡∏ß‡∏≤‡∏á)")
        print("‚¨ú = ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ")
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
        created_obstacles = []
        used_positions = set()
        
        for i in range(num_obstacles):
            print(f"\n--- ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà {i+1} ---")
            
            # ‡∏ñ‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            while True:
                position = input(f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÄ‡∏ä‡πà‡∏ô A1, B2, C3): ").strip().upper()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
                if len(position) != 2 or position[0] not in 'ABCDE' or position[1] not in '12345':
                    print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ A1-E5")
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°‡∏ß‡∏≤‡∏á
                if position in ['B1', 'D1', 'E2', 'E4']:
                    print("‚ùå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏õ‡πâ‡∏≤‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
                    continue
                
                if position in ['A3', 'A4', 'A5', 'B3', 'B4', 'B5']:
                    print("‚ùå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á")
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ã‡πâ‡∏≥
                if position in used_positions:
                    print("‚ùå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß")
                    continue
                
                used_positions.add(position)
                break
            
            # ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
            while True:
                try:
                    height = int(input(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (60-240 ‡∏ã‡∏°.): "))
                    if 60 <= height <= 240:
                        break
                    else:
                        print("‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 60-240 ‡∏ã‡∏°.")
                except ValueError:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô grid
            grid_x = ord(position[0]) - ord('A')
            grid_y = int(position[1]) - 1
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á
            obstacle = self.create_custom_obstacle(grid_x, grid_y, height)
            if obstacle:
                created_obstacles.append(obstacle)
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà {position} ‡∏™‡∏π‡∏á {height} ‡∏ã‡∏°.")
            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà {position} ‡πÑ‡∏î‡πâ")
        
        print(f"\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á {len(created_obstacles)} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        return created_obstacles

    def create_interactive_signs(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö interactive"""
        print("\nüñºÔ∏è SIGN CREATION")
        print("=" * 30)
        
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        recommended_positions = ['B1', 'D1', 'E2', 'E4']
        
        print("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: B1, D1, E2, E4")
        
        while True:
            try:
                use_recommended = input("‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥? (y/n): ").strip().lower()
                if use_recommended in ['y', 'yes']:
                    positions = recommended_positions
                    break
                elif use_recommended in ['n', 'no']:
                    # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
                    positions = []
                    while True:
                        pos = input("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡πâ‡∏≤‡∏¢ (‡∏´‡∏£‡∏∑‡∏≠ 'done' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö): ").strip().upper()
                        if pos == 'DONE':
                            break
                        if len(pos) == 2 and pos[0] in 'ABCDE' and pos[1] in '12345':
                            positions.append(pos)
                        else:
                            print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    break
                else:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö y ‡∏´‡∏£‡∏∑‡∏≠ n")
            except:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö y ‡∏´‡∏£‡∏∑‡∏≠ n")
        
        # ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏õ‡πâ‡∏≤‡∏¢
        while True:
            try:
                height = int(input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏õ‡πâ‡∏≤‡∏¢ (80-200 ‡∏ã‡∏°.): "))
                if 80 <= height <= 200:
                    break
                else:
                    print("‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 80-200 ‡∏ã‡∏°.")
            except ValueError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢
        created_signs = []
        for pos in positions:
            grid_x = ord(pos[0]) - ord('A')
            grid_y = int(pos[1]) - 1
            
            sign = self.create_edge_image_stand(grid_x, grid_y, height)
            if sign:
                created_signs.append(sign)
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà {pos} ‡∏™‡∏π‡∏á {height} ‡∏ã‡∏°.")
        
        return created_signs

    def create_interactive_ping_pong_area(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö interactive - ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ü‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
        print("\nüèì PING PONG AREA CREATION")
        print("=" * 35)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ
        print("üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ:")
        print("   1  2  3  4  5")
        for i in range(5):
            line = f"{chr(65+i)}  "
            for j in range(5):
                can_place = (i + 2 < 5 and j + 1 < 5)
                line += "üü¢ " if can_place else "‚ùå "
            print(line)
        
        # ‡∏ñ‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        while True:
            position = input("\n‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (A4) ‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á: ").strip().upper()
            
            if len(position) != 2 or position[0] not in 'ABCDE' or position[1] not in '12345':
                print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                continue
            
            grid_x = ord(position[0]) - ord('A')
            grid_y = int(position[1]) - 1
            
            if grid_x + 2 >= 5 or grid_y + 1 >= 5:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ - ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö‡∏™‡∏ô‡∏≤‡∏°")
                continue
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á compound object
            result = self.create_ping_pong_compound_object(grid_x, grid_y)
            if result:
                print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡∏ó‡∏µ‡πà {position} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                return result
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏á‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ")

    # ===============================================================
    # SECTION 10: LEGACY FUNCTIONS (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
    # ===============================================================
    
    def create_field_from_diagram(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô create_complete_field)"""
        return self.create_complete_field()

# ===============================================================
# MAIN PROGRAM
# ===============================================================

def quick_create_mode():
    """‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡πá‡∏ß"""
    print("‚ö° Quick Field Create Mode")
    print("Select field type:")
    print("1. Complete field (fixed heights)")
    print("2. Interactive custom field (ask for details)")
    print("3. Field base only")
    print("4. Exit")
    
    choice = input("\nEnter choice (1-4): ").strip()
    
    creator = DroneOdysseyFieldCreator()
    
    if choice in ["1", "2", "3"]:
        if creator.start_simulation():
            time.sleep(1)
            
            if choice == "1":
                creator.create_complete_field()
            elif choice == "2":
                creator.create_interactive_custom_field()  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
            elif choice == "3":
                creator.create_tiled_floor()
            
            print("\n‚úÖ Field created successfully!")
            print("üí° Use your drone controller to test missions")
            print("üõë Field will remain until you stop the simulation")
            
    elif choice == "4":
        print("üëã Goodbye!")
    else:
        print("‚ùå Invalid choice")

if __name__ == "__main__":
    print("üèüÔ∏è Drone Odyssey Challenge Field Creator (Organized)")
    print("=" * 70)
    print("üîß Fixed: AttributeError, Texture Error, Board orientation, Wind physics")
    print("üèì Layout: B1,D1,E2,E4=Blue Signs | B2,C3,D4,E5=Brown Boxes | D2=Yellow Box")
    print("üü¢ Ping Pong: A3,A4,A5,B3,B4,B5 in L-shaped fence")
    print("=" * 70)
    
    quick_create_mode()
