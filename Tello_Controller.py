import time
import numpy as np
import cv2
import os
import math
from datetime import datetime
from coppeliasim_zmqremoteapi_client import RemoteAPIClient

class TelloSimulator:
    def __init__(self):
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö CoppeliaSim
        self.client = RemoteAPIClient()
        self.sim = self.client.getObject('sim')
        self.camera_handle = None
        
        # ‡∏£‡∏±‡∏ö handle ‡∏Ç‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô - ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
        try:
            # ‡∏•‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà CoppeliaSim ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ
            possible_names = ['/Quadcopter', '/Quadricopter', '/drone', '/Drone', 'Quadcopter', 'Quadricopter']
            self.drone_handle = None
            
            for name in possible_names:
                try:
                    self.drone_handle = self.sim.getObject(name)
                    print(f"Found drone with name: {name}")
                    break
                except:
                    continue
                    
            if self.drone_handle is None:
                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á objects ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                print("Could not find drone. Trying to list available objects...")
                try:
                    # ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ object ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏î‡∏£‡∏ô
                    all_objects = self.sim.getObjectsInTree(self.sim.handle_scene)
                    print(f"Available objects: {len(all_objects)} objects found")
                    
                    # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ object ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏î‡∏£‡∏ô)
                    if len(all_objects) > 0:
                        for obj in all_objects:
                            try:
                                obj_name = self.sim.getObjectAlias(obj)
                                if any(keyword in obj_name.lower() for keyword in ['quad', 'drone', 'copter']):
                                    self.drone_handle = obj
                                    print(f"Found potential drone: {obj_name}")
                                    break
                            except:
                                continue
                except Exception as e:
                    print(f"Error listing objects: {e}")
                    
        except Exception as e:
            print(f"Error finding drone: {e}")
            print("Please make sure the drone model is loaded in CoppeliaSim")
            
        # ‡∏£‡∏±‡∏ö handle ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏û‡∏±‡∏î - ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        self.propellers = []
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ö‡∏û‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ
        if self.drone_handle:
            propeller_patterns = [
                lambda i: f'/Quadcopter/propeller[{i-1}]',
                lambda i: f'/Quadcopter/respondable[{i-1}]/joint',
                lambda i: f'/Quadcopter/propeller[{i-1}]/respondable/joint',
                lambda i: f'/Quadcopter/Propeller{i}',
                lambda i: f'/Quadricopter/Propeller{i}',
                lambda i: f'/Quadcopter/PropellerRespondable{i}',
                lambda i: f'/Quadricopter/PropellerRespondable{i}',
                lambda i: f'Propeller{i}',
                lambda i: f'PropellerRespondable{i}'
            ]
            
            for pattern in propeller_patterns:
                self.propellers = []
                try:
                    for i in range(1, 5):
                        prop_name = pattern(i)
                        prop = self.sim.getObject(prop_name)
                        self.propellers.append(prop)
                        
                    if len(self.propellers) == 4:
                        print(f"Found propellers with pattern: {pattern(1)}")
                        break
                except:
                    continue
                    
            if len(self.propellers) != 4:
                print(f"Warning: Could not find all 4 propellers. Found {len(self.propellers)}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ sensors
        self.setup_camera_system()
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.position = [0, 0, 0]
        self.orientation = [0, 0, 0]
        self.is_flying = False
        self.simulation_running = False
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mission Pad
        self.mission_pads = {}
        self.current_detected_pad = None
        self.photo_count = 0
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ
        self.photo_dir = "tello_photos"
        if not os.path.exists(self.photo_dir):
            os.makedirs(self.photo_dir)
        
    def start_simulation(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        try:
            self.sim.startSimulation()
            self.simulation_running = True
            print("‚úì Simulation started")
            return True
        except Exception as e:
            print(f"‚ùå Failed to start simulation: {e}")
            return False
    
    def stop_simulation(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        try:
            self.sim.stopSimulation()
            self.simulation_running = False
            print("‚úì Simulation stopped")
            return True
        except Exception as e:
            print(f"‚ùå Failed to stop simulation: {e}")
            return False
    
    def takeoff(self, height=1.0):
        """‡∏ö‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
            
        try:
            print(f"üöÅ Taking off to {height}m...")
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏ö‡∏û‡∏±‡∏î
            self.rotate_propellers(speed=30)
            
            # ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            target_pos = [current_pos[0], current_pos[1], height]
            
            # ‡∏ö‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ
            steps = 50
            for i in range(steps):
                new_height = current_pos[2] + (height - current_pos[2]) * (i + 1) / steps
                new_pos = [current_pos[0], current_pos[1], new_height]
                
                self.sim.setObjectPosition(self.drone_handle, -1, new_pos)
                time.sleep(0.05)
            
            self.is_flying = True
            self.position = target_pos
            print(f"‚úì Takeoff complete! Altitude: {height}m")
            return True
            
        except Exception as e:
            print(f"‚ùå Takeoff failed: {e}")
            return False
    
    def land(self):
        """‡∏•‡∏á‡∏à‡∏≠‡∏î"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
            
        try:
            print("üõ¨ Landing...")
            
            # ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            
            # ‡∏•‡∏á‡∏à‡∏≠‡∏î‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ
            steps = 30
            for i in range(steps):
                new_height = current_pos[2] * (1 - (i + 1) / steps) + 0.1  # ‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö 0.1m
                new_pos = [current_pos[0], current_pos[1], new_height]
                
                self.sim.setObjectPosition(self.drone_handle, -1, new_pos)
                time.sleep(0.05)
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏ö‡∏û‡∏±‡∏î
            self.rotate_propellers(speed=0)
            
            self.is_flying = False
            print("‚úì Landing complete!")
            return True
            
        except Exception as e:
            print(f"‚ùå Landing failed: {e}")
            return False
    
    def hover(self, duration=3):
        """‡∏ö‡∏¥‡∏ô‡∏•‡∏≠‡∏¢‡∏ô‡∏¥‡πà‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
            
        try:
            print(f"üöÅ Hovering for {duration} seconds...")
            
            # ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏ö‡∏û‡∏±‡∏î
            start_time = time.time()
            while time.time() - start_time < duration:
                self.rotate_propellers(speed=20)
                time.sleep(0.1)
            
            print("‚úì Hover complete!")
            return True
            
        except Exception as e:
            print(f"‚ùå Hover failed: {e}")
            return False
    
    def move_to(self, x, y, z, speed=1.0):
        """‡∏ö‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
            
        try:
            print(f"üöÅ Moving to position ({x}, {y}, {z})...")
            
            # ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            target_pos = [x, y, z]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
            distance = ((x - current_pos[0])**2 + (y - current_pos[1])**2 + (z - current_pos[2])**2)**0.5
            steps = max(20, int(distance * 20))  # ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô steps ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
            
            # ‡∏ö‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            for i in range(steps):
                progress = (i + 1) / steps
                new_pos = [
                    current_pos[0] + (x - current_pos[0]) * progress,
                    current_pos[1] + (y - current_pos[1]) * progress,
                    current_pos[2] + (z - current_pos[2]) * progress
                ]
                
                self.sim.setObjectPosition(self.drone_handle, -1, new_pos)
                self.rotate_propellers(speed=20)
                time.sleep(0.05 / speed)
            
            self.position = target_pos
            print(f"‚úì Moved to ({x}, {y}, {z})")
            return True
            
        except Exception as e:
            print(f"‚ùå Move failed: {e}")
            return False
    
    def fly_pattern_up_down(self, cycles=3, height_change=0.5):
        """‡∏ö‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏ã‡πâ‡∏≥‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
        if not self.is_flying:
            print("‚ùå Drone is not flying! Call takeoff() first.")
            return False
            
        try:
            print(f"üöÅ Flying up-down pattern for {cycles} cycles...")
            
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            base_height = current_pos[2]
            
            for cycle in range(cycles):
                print(f"  Cycle {cycle + 1}/{cycles}")
                
                # ‡∏ö‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                self.move_to(current_pos[0], current_pos[1], base_height + height_change)
                time.sleep(0.5)
                
                # ‡∏ö‡∏¥‡∏ô‡∏•‡∏á
                self.move_to(current_pos[0], current_pos[1], base_height)
                time.sleep(0.5)
            
            print("‚úì Pattern flight complete!")
            return True
            
        except Exception as e:
            print(f"‚ùå Pattern flight failed: {e}")
            return False
    
    def fly_square_pattern(self, size=2.0, height=1.5):
        """‡∏ö‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°"""
        if not self.is_flying:
            print("‚ùå Drone is not flying! Call takeoff() first.")
            return False
            
        try:
            print(f"üöÅ Flying square pattern (size: {size}m)...")
            
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            center_x, center_y = current_pos[0], current_pos[1]
            
            # ‡∏à‡∏∏‡∏î‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
            corners = [
                [center_x + size/2, center_y + size/2, height],  # ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
                [center_x - size/2, center_y + size/2, height],  # ‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô
                [center_x - size/2, center_y - size/2, height],  # ‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á
                [center_x + size/2, center_y - size/2, height],  # ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á
                [center_x, center_y, height]                      # ‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á
            ]
            
            for i, corner in enumerate(corners):
                print(f"  Moving to corner {i + 1}/5")
                self.move_to(corner[0], corner[1], corner[2])
                time.sleep(1)
            
            print("‚úì Square pattern complete!")
            return True
            
        except Exception as e:
            print(f"‚ùå Square pattern failed: {e}")
            return False
    
    def test_connection(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏î‡∏£‡∏ô"""
        print("üîç Testing drone connection...")
        
        if not self.drone_handle:
            print("‚ùå Drone handle not found!")
            return False
        
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            pos = self.sim.getObjectPosition(self.drone_handle, -1)
            print(f"‚úì Drone position: ({pos[0]:.2f}, {pos[1]:.2f}, {pos[2]:.2f})")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏ö‡∏û‡∏±‡∏î
            print("‚úì Testing propeller rotation...")
            self.rotate_propellers(speed=10)
            time.sleep(2)
            self.rotate_propellers(speed=0)
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á
            if self.camera_handle:
                img = self.get_camera_image()
                if img is not None:
                    print(f"‚úì Camera working! Image size: {img.shape}")
                else:
                    print("‚ö†Ô∏è Camera found but no image received")
            else:
                print("‚ö†Ô∏è Camera not available")
            
            print("‚úÖ Connection test complete!")
            return True
            
        except Exception as e:
            print(f"‚ùå Connection test failed: {e}")
            return False

    def move_forward(self, distance=1.0, speed=1.0):
        """‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤ - ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
        
        try:
            print(f"‚û°Ô∏è Moving forward {distance}m...")
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            current_ori = self.sim.getObjectOrientation(self.drone_handle, -1)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏£‡∏ô‡∏´‡∏±‡∏ô
            import math
            yaw = current_ori[2]  # ‡∏°‡∏∏‡∏° Z (yaw)
            new_x = current_pos[0] + distance * math.cos(yaw)
            new_y = current_pos[1] + distance * math.sin(yaw)
            new_z = current_pos[2]
            
            return self.move_to(new_x, new_y, new_z, speed)
            
        except Exception as e:
            print(f"‚ùå Move forward failed: {e}")
            return False
    
    def move_backward(self, distance=1.0, speed=1.0):
        """‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á - ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
        
        try:
            print(f"‚¨ÖÔ∏è Moving backward {distance}m...")
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            current_ori = self.sim.getObjectOrientation(self.drone_handle, -1)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏£‡∏ô‡∏´‡∏±‡∏ô
            import math
            yaw = current_ori[2]  # ‡∏°‡∏∏‡∏° Z (yaw)
            new_x = current_pos[0] - distance * math.cos(yaw)
            new_y = current_pos[1] - distance * math.sin(yaw)
            new_z = current_pos[2]
            
            return self.move_to(new_x, new_y, new_z, speed)
            
        except Exception as e:
            print(f"‚ùå Move backward failed: {e}")
            return False
    
    def move_left(self, distance=1.0, speed=1.0):
        """‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢ - ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
        
        try:
            print(f"‚¨ÖÔ∏è Moving left {distance}m...")
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            current_ori = self.sim.getObjectOrientation(self.drone_handle, -1)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (‡∏´‡∏°‡∏∏‡∏ô 90 ‡∏≠‡∏á‡∏®‡∏≤)
            import math
            yaw = current_ori[2]  # ‡∏°‡∏∏‡∏° Z (yaw)
            new_x = current_pos[0] + distance * math.cos(yaw + math.pi/2)
            new_y = current_pos[1] + distance * math.sin(yaw + math.pi/2)
            new_z = current_pos[2]
            
            return self.move_to(new_x, new_y, new_z, speed)
            
        except Exception as e:
            print(f"‚ùå Move left failed: {e}")
            return False
    
    def move_right(self, distance=1.0, speed=1.0):
        """‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤ - ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
        
        try:
            print(f"‚û°Ô∏è Moving right {distance}m...")
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            current_ori = self.sim.getObjectOrientation(self.drone_handle, -1)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ (‡∏´‡∏°‡∏∏‡∏ô -90 ‡∏≠‡∏á‡∏®‡∏≤)
            import math
            yaw = current_ori[2]  # ‡∏°‡∏∏‡∏° Z (yaw)
            new_x = current_pos[0] + distance * math.cos(yaw - math.pi/2)
            new_y = current_pos[1] + distance * math.sin(yaw - math.pi/2)
            new_z = current_pos[2]
            
            return self.move_to(new_x, new_y, new_z, speed)
            
        except Exception as e:
            print(f"‚ùå Move right failed: {e}")
            return False
    
    def move_up(self, distance=0.5, speed=1.0):
        """‡∏ö‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô - ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
        
        try:
            print(f"‚¨ÜÔ∏è Moving up {distance}m...")
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            new_x = current_pos[0]
            new_y = current_pos[1]
            new_z = current_pos[2] + distance
            
            return self.move_to(new_x, new_y, new_z, speed)
            
        except Exception as e:
            print(f"‚ùå Move up failed: {e}")
            return False
    
    def move_down(self, distance=0.5, speed=1.0):
        """‡∏ö‡∏¥‡∏ô‡∏•‡∏á - ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
        
        try:
            print(f"‚¨áÔ∏è Moving down {distance}m...")
            current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
            new_x = current_pos[0]
            new_y = current_pos[1]
            new_z = max(0.1, current_pos[2] - distance)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô
            
            return self.move_to(new_x, new_y, new_z, speed)
            
        except Exception as e:
            print(f"‚ùå Move down failed: {e}")
            return False
    
    def rotate_left(self, degrees=45, speed=1.0):
        """‡∏´‡∏°‡∏∏‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ - ‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß‡πÇ‡∏î‡∏£‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
        
        try:
            print(f"üîÑ Rotating left {degrees}¬∞...")
            current_ori = self.sim.getObjectOrientation(self.drone_handle, -1)
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏õ‡πá‡∏ô radian
            import math
            radians = math.radians(degrees)
            new_yaw = current_ori[2] + radians
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà
            new_orientation = [current_ori[0], current_ori[1], new_yaw]
            
            # ‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ
            steps = max(10, int(abs(degrees) / 5))  # ‡∏¢‡∏¥‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ steps ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏¢‡∏≠‡∏∞
            
            for i in range(steps):
                progress = (i + 1) / steps
                intermediate_yaw = current_ori[2] + radians * progress
                intermediate_ori = [current_ori[0], current_ori[1], intermediate_yaw]
                
                self.sim.setObjectOrientation(self.drone_handle, -1, intermediate_ori)
                self.rotate_propellers(speed=20)
                time.sleep(0.05 / speed)
            
            self.orientation = new_orientation
            print(f"‚úì Rotated left {degrees}¬∞")
            return True
            
        except Exception as e:
            print(f"‚ùå Rotate left failed: {e}")
            return False
    
    def rotate_right(self, degrees=45, speed=1.0):
        """‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏ß‡∏≤ - ‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏±‡∏ß‡πÇ‡∏î‡∏£‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤"""
        if not self.drone_handle:
            print("‚ùå Drone not found!")
            return False
        
        try:
            print(f"üîÑ Rotating right {degrees}¬∞...")
            current_ori = self.sim.getObjectOrientation(self.drone_handle, -1)
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏õ‡πá‡∏ô radian
            import math
            radians = math.radians(degrees)
            new_yaw = current_ori[2] - radians
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà
            new_orientation = [current_ori[0], current_ori[1], new_yaw]
            
            # ‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ
            steps = max(10, int(abs(degrees) / 5))  # ‡∏¢‡∏¥‡πà‡∏á‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ steps ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏¢‡∏≠‡∏∞
            
            for i in range(steps):
                progress = (i + 1) / steps
                intermediate_yaw = current_ori[2] - radians * progress
                intermediate_ori = [current_ori[0], current_ori[1], intermediate_yaw]
                
                self.sim.setObjectOrientation(self.drone_handle, -1, intermediate_ori)
                self.rotate_propellers(speed=20)
                time.sleep(0.05 / speed)
            
            self.orientation = new_orientation
            print(f"‚úì Rotated right {degrees}¬∞")
            return True
            
        except Exception as e:
            print(f"‚ùå Rotate right failed: {e}")
            return False

    def get_current_heading(self):
        """‡πÑ‡∏î‡πâ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô‡πÉ‡∏ô‡∏≠‡∏á‡∏®‡∏≤"""
        try:
            orientation = self.get_orientation()
            yaw_degrees = math.degrees(orientation[2])
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0-360 ‡∏≠‡∏á‡∏®‡∏≤
            if yaw_degrees < 0:
                yaw_degrees += 360
            return yaw_degrees
        except:
            return 0

    def print_drone_status(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏î‡∏£‡∏ô"""
        try:
            pos = self.get_position()
            heading = self.get_current_heading()
            print(f"üìç Position: ({pos[0]:.2f}, {pos[1]:.2f}, {pos[2]:.2f})")
            print(f"üß≠ Heading: {heading:.1f}¬∞")
        except Exception as e:
            print(f"‚ùå Status check failed: {e}")


    def rotate_propellers(self, speed=20):
        """‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏ö‡∏û‡∏±‡∏î"""
        if len(self.propellers) == 4:
            try:
                for i, prop in enumerate(self.propellers):
                    # ‡∏´‡∏°‡∏∏‡∏ô‡πÉ‡∏ö‡∏û‡∏±‡∏î‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏™‡∏•‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á)
                    direction = 1 if i % 2 == 0 else -1
                    self.sim.setJointTargetVelocity(prop, speed * direction)
            except Exception as e:
                print(f"Propeller rotation error: {e}")

    def setup_camera_system(self):
        try:
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô path ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á alias
            handle = self.sim.getObject('/Quadcopter/visionSensor')  # ‡∏´‡∏£‡∏∑‡∏≠ '/Quadcopter/FrontCamera'
            if handle != -1:
                obj_type = self.sim.getObjectType(handle)
                if obj_type == self.sim.object_visionsensor_type:
                    self.camera_handle = handle
                    print("‚úì Found Vision Sensor and type is correct")
                else:
                    print("‚ö†Ô∏è Found object but not a Vision Sensor")
                    self.camera_handle = None
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô")
                self.camera_handle = None
        except Exception as e:
            print(f"Camera system setup error: {e}")
            self.camera_handle = None

    def get_camera_image(self):
        if not self.camera_handle:
            print("Camera not available")
            return None

        try:
            time.sleep(0.5)
            result = self.sim.getVisionSensorImg(self.camera_handle)
            print("Raw result from getVisionSensorImg:", result)

            if len(result) == 3:
                status, resolution, image = result
                if status != 1:
                    print("Vision sensor failed to return image")
                    return None
            elif len(result) == 2:
                resolution, image = result
            else:
                print("Unexpected result:", result)
                return None

            print("VisionSensorImg result:", resolution, type(image), len(image) if hasattr(image, '__len__') else image)
            if resolution[0] == 0 or resolution[1] == 0:
                print("‚ùå ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏´‡∏£‡∏∑‡∏≠ simulation ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°")
                return None

            if isinstance(image, list):
                print("Image is a list. First 10 values:", image[:10])
                image = bytes([min(255, max(0, int(v))) for v in image])
            else:
                print("Image is not a list. Type:", type(image))

            import numpy as np
            import cv2
            img_array = np.frombuffer(image, dtype=np.uint8)
            img = img_array.reshape((resolution[1], resolution[0], 3))
            img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
            img_bgr = cv2.flip(img_bgr, 0)
            return img_bgr

        except Exception as e:
            print(f"Camera image error: {e}")
            return None
    
    def stream_camera(self, duration=10):
        """‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö real-time"""
        print(f"üìπ Starting camera stream for {duration} seconds...")
        print("Press 'q' to quit, 'p' to take photo, 'm' to detect mission pad")
        
        start_time = time.time()
        
        while time.time() - start_time < duration:
            img = self.get_camera_image()
            
            if img is not None:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad
                detected = self.detect_mission_pad()
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡∏†‡∏≤‡∏û
                if detected:
                    pad_id = detected['id']
                    center = detected['center']
                    distance = detected['distance']
                    
                    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö Mission Pad
                    cv2.circle(img, center, 20, (0, 255, 0), 3)
                    cv2.putText(img, f"Pad {pad_id}", 
                               (center[0]-20, center[1]-30), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                    cv2.putText(img, f"Dist: {distance:.1f}m", 
                               (center[0]-30, center[1]+50), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏£‡∏ô
                if self.drone_handle:
                    pos = self.sim.getObjectPosition(self.drone_handle, -1)
                    cv2.putText(img, f"Alt: {pos[2]:.2f}m", (10, 60), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
                cv2.imshow("Tello Camera Stream", img)
                
                key = cv2.waitKey(30) & 0xFF
                if key == ord('q'):
                    break
                elif key == ord('p'):
                    self.take_photo()
                elif key == ord('m'):
                    detected = self.detect_mission_pad()
                    if detected:
                        print(f"Mission Pad {detected['id']} detected at distance {detected['distance']:.2f}m")
                    else:
                        print("No Mission Pad detected")
        
        cv2.destroyAllWindows()
        print("Camera stream ended")

    def create_mission_pad(self, pad_id, position, size=1.0):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Mission Pad ‡πÉ‡∏ô‡∏â‡∏≤‡∏Å"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô pad
            pad = self.sim.createPrimitiveShape(
                self.sim.primitiveshape_cuboid,
                [size, size, 0.02]
            )
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            self.sim.setObjectPosition(pad, -1, [position[0], position[1], 0.01])
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ (‡πÅ‡∏ï‡πà‡∏•‡∏∞ pad ‡∏™‡∏µ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
            colors = [
                [1, 0, 0],    # ‡πÅ‡∏î‡∏á - ID 1
                [0, 1, 0],    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß - ID 2  
                [0, 0, 1],    # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô - ID 3
                [1, 1, 0],    # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á - ID 4
                [1, 0, 1],    # ‡∏°‡πà‡∏ß‡∏á - ID 5
                [0, 1, 1],    # ‡∏ü‡πâ‡∏≤ - ID 6
                [1, 0.5, 0],  # ‡∏™‡πâ‡∏° - ID 7
                [0.5, 0, 1]   # ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏° - ID 8
            ]
            
            color = colors[(pad_id - 1) % len(colors)]
            self.sim.setShapeColor(pad, None, self.sim.colorcomponent_ambient_diffuse, color)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ID ‡∏ö‡∏ô pad
            self.create_pad_number(pad, pad_id, size)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
            self.sim.setObjectAlias(pad, f"MissionPad_{pad_id}")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pad
            self.mission_pads[pad_id] = {
                'handle': pad,
                'position': position,
                'size': size,
                'detected': False
            }
            
            print(f"‚úì Created Mission Pad {pad_id} at {position}")
            return pad
            
        except Exception as e:
            print(f"Mission pad creation error: {e}")
            return None
    
    def create_pad_number(self, pad_handle, number, pad_size):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏ô Mission Pad"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (‡πÉ‡∏ä‡πâ primitive shapes)
            digit_width = pad_size * 0.1
            digit_height = pad_size * 0.3
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (7-segment style)
            if number == 1:
                segments = [
                    [0, 0, digit_height*0.7, 0.03]  # ‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
                ]
            elif number == 2:
                segments = [
                    [-digit_width/2, digit_height/4, digit_width, 0.03],    # ‡∏ö‡∏ô
                    [0, 0, digit_width, 0.03],                              # ‡∏Å‡∏•‡∏≤‡∏á
                    [digit_width/2, -digit_height/4, digit_width, 0.03]     # ‡∏•‡πà‡∏≤‡∏á
                ]
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            else:
                # ‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                segments = [
                    [0, 0, digit_width*2, 0.03]  # ‡∏ß‡∏á‡∏Å‡∏•‡∏°
                ]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á segments
            for i, seg in enumerate(segments):
                segment = self.sim.createPrimitiveShape(
                    self.sim.primitiveshape_cuboid,
                    [seg[2], digit_width/3, seg[3]]
                )
                
                # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡∏Å‡∏±‡∏ö pad
                pad_pos = self.sim.getObjectPosition(pad_handle, -1)
                seg_pos = [pad_pos[0] + seg[0], pad_pos[1] + seg[1], pad_pos[2] + 0.02]
                
                self.sim.setObjectPosition(segment, -1, seg_pos)
                self.sim.setShapeColor(segment, None, self.sim.colorcomponent_ambient_diffuse, [1, 1, 1])
                
        except Exception as e:
            print(f"Pad number creation error: {e}")
    
    def detect_mission_pad(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        img = self.get_camera_image()
        
        if img is None:
            return None
            
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ Mission Pad
        detected_pad = self.analyze_image_for_mission_pad(img)
        
        if detected_pad:
            pad_id = detected_pad['id']
            if pad_id != self.current_detected_pad:
                self.current_detected_pad = pad_id
                print(f"üéØ Mission Pad {pad_id} detected!")
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                if pad_id in self.mission_pads:
                    self.mission_pads[pad_id]['detected'] = True
                    
            return detected_pad
        else:
            self.current_detected_pad = None
            return None
    
    def analyze_image_for_mission_pad(self, img):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ Mission Pad"""
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô HSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏µ
            hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á Mission Pads
            color_ranges = {
                1: ([0, 100, 100], [10, 255, 255]),      # ‡πÅ‡∏î‡∏á
                2: ([50, 100, 100], [70, 255, 255]),     # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß  
                3: ([100, 100, 100], [120, 255, 255]),   # ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
                4: ([20, 100, 100], [30, 255, 255]),     # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
                5: ([140, 100, 100], [160, 255, 255]),   # ‡∏°‡πà‡∏ß‡∏á
                6: ([80, 100, 100], [100, 255, 255]),    # ‡∏ü‡πâ‡∏≤
                7: ([10, 100, 100], [20, 255, 255]),     # ‡∏™‡πâ‡∏°
                8: ([120, 100, 100], [140, 255, 255])    # ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°
            }
            
            for pad_id, (lower, upper) in color_ranges.items():
                lower = np.array(lower)
                upper = np.array(upper)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á mask
                mask = cv2.inRange(hsv, lower, upper)
                
                # ‡∏´‡∏≤ contours
                contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                
                for contour in contours:
                    area = cv2.contourArea(contour)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    if area > 1000:  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
                        M = cv2.moments(contour)
                        if M["m00"] != 0:
                            cx = int(M["m10"] / M["m00"])
                            cy = int(M["m01"] / M["m00"])
                            
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
                            distance = self.estimate_distance_to_pad(area)
                            
                            return {
                                'id': pad_id,
                                'center': (cx, cy),
                                'area': area,
                                'distance': distance,
                                'angle': self.calculate_pad_angle(cx, img.shape[1])
                            }
            
            return None
            
        except Exception as e:
            print(f"Image analysis error: {e}")
            return None
    
    def estimate_distance_to_pad(self, area):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÑ‡∏õ Mission Pad ‡∏à‡∏≤‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏ô‡∏†‡∏≤‡∏û"""
        # ‡∏™‡∏π‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: distance = sqrt(known_area / detected_area) * known_distance
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á
        if area > 0:
            return max(0.1, 10000 / area)  # ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        return 0
    
    def calculate_pad_angle(self, cx, img_width):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á Mission Pad ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏Å‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        center_x = img_width / 2
        angle_per_pixel = 60 / img_width  # 60 ‡∏≠‡∏á‡∏®‡∏≤ field of view
        return (cx - center_x) * angle_per_pixel
    
    def go_to_mission_pad(self, pad_id, height=1.0):
        """‡∏ö‡∏¥‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà Mission Pad ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        if pad_id not in self.mission_pads:
            print(f"‚ùå Mission Pad {pad_id} not found")
            return False
            
        pad_info = self.mission_pads[pad_id]
        target_pos = pad_info['position']
        
        print(f"üéØ Flying to Mission Pad {pad_id} at {target_pos}")
        
        # ‡∏ö‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏¥‡∏ô
        if not self.is_flying:
            self.takeoff(height)
            
        # ‡∏ö‡∏¥‡∏ô‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á pad
        current_pos = self.sim.getObjectPosition(self.drone_handle, -1)
        target_flight_pos = [target_pos[0], target_pos[1], height]
        
        # ‡∏ö‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö smooth
        steps = 50
        for i in range(steps):
            interp_pos = [
                current_pos[0] + (target_flight_pos[0] - current_pos[0]) * (i+1) / steps,
                current_pos[1] + (target_flight_pos[1] - current_pos[1]) * (i+1) / steps,
                current_pos[2] + (target_flight_pos[2] - current_pos[2]) * (i+1) / steps
            ]
            
            self.sim.setObjectPosition(self.drone_handle, -1, interp_pos)
            self.rotate_propellers(speed=20)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏¥‡∏ô
            detected = self.detect_mission_pad()
            if detected and detected['id'] == pad_id:
                print(f"‚úì Mission Pad {pad_id} detected during flight!")
                
            time.sleep(0.05)
        
        print(f"‚úì Arrived at Mission Pad {pad_id}")
        return True


    def setup_camera_system_new(self):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ã‡∏µ‡∏ô"""
        try:
            print("üîç Searching for camera...")
            
            # ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
            camera_names = [
                '/Quadcopter/visionSensor',
                '/Quadcopter/FrontCamera',
                '/Quadcopter/Camera',
                '/Quadricopter/visionSensor',
                '/Quadricopter/FrontCamera',
                '/Quadricopter/Camera',
                'visionSensor',
                'FrontCamera',
                'Camera'
            ]
            
            self.camera_handle = None
            
            # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ
            for camera_name in camera_names:
                try:
                    handle = self.sim.getObject(camera_name)
                    if handle != -1:
                        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô vision sensor ‡∏à‡∏£‡∏¥‡∏á‡πÜ
                        obj_type = self.sim.getObjectType(handle)
                        if obj_type == self.sim.object_visionsensor_type:
                            self.camera_handle = handle
                            print(f"‚úì Found Vision Sensor: {camera_name}")
                            break
                        else:
                            print(f"‚ö†Ô∏è Found object {camera_name} but not a Vision Sensor")
                except:
                    continue
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å object tree
            if self.camera_handle is None:
                print("üîç Searching in object tree...")
                try:
                    all_objects = self.sim.getObjectsInTree(self.sim.handle_scene)
                    for obj in all_objects:
                        try:
                            obj_type = self.sim.getObjectType(obj)
                            if obj_type == self.sim.object_visionsensor_type:
                                obj_name = self.sim.getObjectAlias(obj)
                                self.camera_handle = obj
                                print(f"‚úì Found Vision Sensor in tree: {obj_name}")
                                break
                        except:
                            continue
                except Exception as e:
                    print(f"Error searching object tree: {e}")
            
            if self.camera_handle is None:
                print("‚ùå No Vision Sensor found in scene")
                print("üí° Please add a Vision Sensor to your scene:")
                print("   1. Right-click in scene hierarchy")
                print("   2. Add > Vision sensor")
                print("   3. Attach it to your drone")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
            try:
                # ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
                result = self.sim.getVisionSensorImg(self.camera_handle)
                print(f"Camera test result: {type(result)}, length: {len(result) if hasattr(result, '__len__') else 'N/A'}")
                
                if isinstance(result, (list, tuple)) and len(result) >= 2:
                    if len(result) == 3:
                        status, resolution, _ = result
                        if status != 1:
                            print("‚ö†Ô∏è Vision sensor status not OK")
                    else:
                        resolution, _ = result
                        
                    print(f"Camera resolution: {resolution}")
                    if resolution[0] > 0 and resolution[1] > 0:
                        print("‚úì Camera system ready")
                        return True
                    else:
                        print("‚ùå Invalid camera resolution")
                        return False
                else:
                    print("‚ùå Unexpected camera result format")
                    return False
                    
            except Exception as e:
                print(f"Camera test error: {e}")
                return False
                
        except Exception as e:
            print(f"Camera system setup error: {e}")
            self.camera_handle = None
            return False

    def get_camera_image_new(self):
        """‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà"""
        if not self.camera_handle:
            print("‚ùå Camera not available")
            return None
            
        if not self.simulation_running:
            print("‚ùå Simulation not running")
            return None

        try:
            print("üì∏ Capturing image...")
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ simulation update
            time.sleep(0.1)
            
            # ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å vision sensor
            result = self.sim.getVisionSensorImg(self.camera_handle)
            print(f"Raw result type: {type(result)}, length: {len(result) if hasattr(result, '__len__') else 'N/A'}")
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ result ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
            if isinstance(result, (list, tuple)):
                if len(result) == 3:
                    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: [status, resolution, image_data]
                    status, resolution, image_data = result
                    print(f"Status: {status}, Resolution: {resolution}")
                    
                    if status != 1:
                        print(f"‚ùå Vision sensor failed with status: {status}")
                        return None
                        
                elif len(result) == 2:
                    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: [resolution, image_data]
                    resolution, image_data = result
                    print(f"Resolution: {resolution}")
                    
                else:
                    print(f"‚ùå Unexpected result format: {len(result)} elements")
                    return None
                    
            else:
                print(f"‚ùå Unexpected result type: {type(result)}")
                return None
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö resolution
            if not isinstance(resolution, (list, tuple)) or len(resolution) != 2:
                print(f"‚ùå Invalid resolution format: {resolution}")
                return None
                
            width, height = resolution
            if width <= 0 or height <= 0:
                print(f"‚ùå Invalid resolution values: {width}x{height}")
                return None
            
            print(f"Image size: {width}x{height}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û
            if image_data is None:
                print("‚ùå No image data received")
                return None
                
            print(f"Image data type: {type(image_data)}, length: {len(image_data) if hasattr(image_data, '__len__') else 'N/A'}")
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û
            if isinstance(image_data, list):
                # ‡πÅ‡∏õ‡∏•‡∏á list ‡πÄ‡∏õ‡πá‡∏ô bytes
                image_bytes = bytes([min(255, max(0, int(v))) for v in image_data])
            elif isinstance(image_data, (bytes, bytearray)):
                image_bytes = bytes(image_data)
            else:
                print(f"‚ùå Unsupported image data type: {type(image_data)}")
                return None
            
            expected_size = width * height * 3  # RGB
            actual_size = len(image_bytes)
            print(f"Expected size: {expected_size}, Actual size: {actual_size}")
            
            if actual_size != expected_size:
                print(f"‚ùå Image size mismatch. Expected: {expected_size}, Got: {actual_size}")
                return None
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á numpy array
            img_array = np.frombuffer(image_bytes, dtype=np.uint8)
            
            # Reshape ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û
            try:
                img = img_array.reshape((height, width, 3))
                print(f"‚úì Image reshaped successfully: {img.shape}")
            except ValueError as e:
                print(f"‚ùå Reshape error: {e}")
                return None
            
            # ‡πÅ‡∏õ‡∏•‡∏á RGB ‡πÄ‡∏õ‡πá‡∏ô BGR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenCV
            img_bgr = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
            
            # Flip ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (CoppeliaSim ‡∏≠‡∏≤‡∏à flip ‡∏†‡∏≤‡∏û)
            img_bgr = cv2.flip(img_bgr, 0)
            
            print("‚úì Image processed successfully")
            return img_bgr
            
        except Exception as e:
            print(f"‚ùå Camera image error: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def take_photo_new(self, filename=None):
        """‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"""
        print("üì∏ Taking photo...")
        
        img = self.get_camera_image()
        
        if img is not None:
            if filename is None:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"tello_photo_{timestamp}_{self.photo_count:03d}.jpg"
                
            filepath = os.path.join(self.photo_dir, filename)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• overlay
            height, width = img.shape[:2]
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏î‡∏£‡∏ô
            if self.drone_handle:
                try:
                    pos = self.sim.getObjectPosition(self.drone_handle, -1)
                    info_text = f"Alt: {pos[2]:.2f}m  Pos: ({pos[0]:.1f}, {pos[1]:.1f})"
                    cv2.putText(img, info_text, (10, height-20), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
                except:
                    pass
                
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤
            time_text = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cv2.putText(img, time_text, (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ
            success = cv2.imwrite(filepath, img)
            
            if success:
                self.photo_count += 1
                print(f"‚úì Photo saved: {filepath}")
                return filepath
            else:
                print("‚ùå Failed to save photo")
                return None
        else:
            print("‚ùå No image available")
            return None

    def test_camera(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        print("üîç Testing camera system...")
        
        if not self.simulation_running:
            print("‚ùå Please start simulation first")
            return False
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
        if not self.setup_camera_system():
            return False
        
        # ‡∏•‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ
        img = self.get_camera_image()
        if img is not None:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
            cv2.imshow("Camera Test", img)
            print("‚úì Camera test successful! Press any key to close...")
            cv2.waitKey(0)
            cv2.destroyAllWindows()
            return True
        else:
            print("‚ùå Camera test failed")
            return False

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á simulator object
    drone = TelloSimulator()
    
    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° simulation
        drone.start_simulation()
        time.sleep(1)
        
        # ‡∏ö‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
        drone.takeoff(height=1.5)

        
        # Hover
        drone.hover(duration=2)
        
        # ‡∏ö‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á 3 ‡∏£‡∏≠‡∏ö
        drone.fly_pattern_up_down(cycles=3, height_change=0.5)
        
        # Hover ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        drone.hover(duration=1)


        
        # ‡∏•‡∏á‡∏à‡∏≠‡∏î
        drone.land()
        
        time.sleep(2)
        
    finally:
        # ‡∏´‡∏¢‡∏∏‡∏î simulation
        drone.stop_simulation()
