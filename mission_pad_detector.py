#!/usr/bin/env python3
"""
Mission Pad Detector - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
"""

import cv2
import numpy as np
import os
import time
from datetime import datetime
from skimage import metrics
from skimage.transform import resize
from skimage.color import rgb2gray
from skimage.feature import match_template
import glob

class MissionPadDetector:
    def __init__(self, template_folder="mission_pad_templates", threshold=0.15):  # ‡∏•‡∏î threshold
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Mission Pad Detector
        
        Args:
            template_folder (str): ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û template
            threshold (float): ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0.15)
        """
        self.template_folder = template_folder
        self.threshold = threshold
        self.templates = {}
        self.template_info = {}
        
        # ‡πÇ‡∏´‡∏•‡∏î templates
        self._load_templates()
        
        print(f"‚úÖ MissionPadDetector initialized with threshold: {threshold}")
        print(f"üìÅ Templates loaded: {len(self.templates)} templates")
    
    def _load_templates(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û template ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        if not os.path.exists(self.template_folder):
            print(f"‚ùå Template folder not found: {self.template_folder}")
            return
        
        print(f"üîç Loading templates from: {self.template_folder}")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
        image_extensions = ['*.png', '*.jpg', '*.jpeg', '*.bmp']
        template_files = []
        
        for ext in image_extensions:
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
            template_files.extend(glob.glob(os.path.join(self.template_folder, ext)))
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
            template_files.extend(glob.glob(os.path.join(self.template_folder, '**', ext), recursive=True))
        
        for template_path in template_files:
            try:
                # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                template_img = cv2.imread(template_path)
                if template_img is None:
                    print(f"‚ö†Ô∏è Cannot read template: {template_path}")
                    continue
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
                template_gray = cv2.cvtColor(template_img, cv2.COLOR_BGR2GRAY)
                
                # ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç ID ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
                template_id = self._extract_id_from_path(template_path)
                
                if template_id is not None:
                    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    template_resized = cv2.resize(template_gray, (200, 200))
                    
                    self.templates[template_id] = template_resized
                    self.template_info[template_id] = {
                        'path': template_path,
                        'original_size': template_img.shape[:2],
                        'processed_size': template_resized.shape
                    }
                    
                    print(f"‚úÖ Loaded template {template_id}: {template_path}")
                else:
                    print(f"‚ö†Ô∏è Cannot extract ID from: {template_path}")
                    
            except Exception as e:
                print(f"‚ùå Error loading template {template_path}: {e}")
        
        print(f"üìä Total templates loaded: {len(self.templates)}")
    
    def _extract_id_from_path(self, path):
        """‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç ID ‡∏à‡∏≤‡∏Å path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: mission_pad_templates/number_1/missionpad_1.png
        # ‡∏´‡∏£‡∏∑‡∏≠: mission_pad_templates/missionpad_1.png
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        folder_name = os.path.basename(os.path.dirname(path))
        if 'number_' in folder_name:
            try:
                return int(folder_name.split('_')[1])
            except:
                pass
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        filename = os.path.basename(path)
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        import re
        numbers = re.findall(r'\d+', filename)
        if numbers:
            return int(numbers[0])
        
        return None
    
    def detect_mission_pad(self, image_path):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Mission Pad ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        
        Args:
            image_path (str): path ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            
        Returns:
            dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
        """
        if not self.templates:
            print("‚ùå No templates loaded")
            return None
        
        if not os.path.exists(image_path):
            print(f"‚ùå Image not found: {image_path}")
            return None
        
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            image = cv2.imread(image_path)
            if image is None:
                print(f"‚ùå Cannot read image: {image_path}")
                return None
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
            image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            image_resized = cv2.resize(image_gray, (200, 200))
            
            print(f"üîç Comparing with templates...")
            
            best_match = None
            best_score = 0
            
            for template_id, template in self.templates.items():
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì similarity ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ
                scores = self._calculate_similarity(image_resized, template)
                
                # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ combined score
                combined_score = scores['combined']
                
                print(f"  Template {template_id}: {combined_score:.3f}")
                
                if combined_score > best_score:
                    best_score = combined_score
                    best_match = {
                        'id': template_id,
                        'confidence': combined_score,
                        'scores': scores,
                        'template_info': self.template_info[template_id]
                    }
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if best_score >= self.threshold:
                print(f"‚úÖ Mission pad detected: ID {best_match['id']} (confidence: {best_score:.3f})")
                return best_match
            else:
                print(f"‚ùå No mission pad detected (best: {best_score:.3f}, threshold: {self.threshold})")
                return None
                
        except Exception as e:
            print(f"‚ùå Detection error: {e}")
            return None
    
    def _calculate_similarity(self, image, template):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì similarity ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û 2 ‡∏£‡∏π‡∏õ"""
        try:
            # 1. Template Matching
            result = match_template(image, template)
            template_score = np.max(result)
            
            # 2. SSIM (Structural Similarity Index)
            ssim_score = metrics.structural_similarity(image, template)
            
            # 3. Normalized Cross Correlation
            norm_image = (image - np.mean(image)) / np.std(image)
            norm_template = (template - np.mean(template)) / np.std(template)
            ncc_score = np.mean(norm_image * norm_template)
            
            # 4. Histogram Correlation
            hist1 = cv2.calcHist([image], [0], None, [256], [0, 256])
            hist2 = cv2.calcHist([template], [0], None, [256], [0, 256])
            hist_corr = cv2.compareHist(hist1, hist2, cv2.HISTCMP_CORREL)
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà)
            combined_score = (
                template_score * 0.3 +      # Template matching
                ssim_score * 0.3 +          # SSIM
                max(0, ncc_score) * 0.2 +   # NCC (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å)
                hist_corr * 0.2             # Histogram correlation
            )
            
            print(f"    Using combined score: template={template_score:.3f}, ssim={ssim_score:.3f}")
            
            return {
                'template': template_score,
                'ssim': ssim_score,
                'ncc': ncc_score,
                'histogram': hist_corr,
                'combined': combined_score
            }
            
        except Exception as e:
            print(f"‚ùå Similarity calculation error: {e}")
            return {
                'template': 0.0,
                'ssim': 0.0,
                'ncc': 0.0,
                'histogram': 0.0,
                'combined': 0.0
            }
    
    def get_template_info(self):
        """‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• templates ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß"""
        return self.template_info
    
    def set_threshold(self, threshold):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ threshold"""
        self.threshold = threshold
        print(f"üîß Threshold updated to: {threshold}")
    
    def test_detection(self, image_path):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        print(f"üß™ Testing detection on: {image_path}")
        
        result = self.detect_mission_pad(image_path)
        
        if result:
            print(f"‚úÖ Result: Mission Pad ID {result['id']}")
            print(f"üìä Detailed scores:")
            for score_type, score_value in result['scores'].items():
                print(f"  {score_type}: {score_value:.3f}")
        else:
            print("‚ùå No mission pad detected")
        
        return result