#!/usr/bin/env python3
"""
Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö build exe ‡∏Ç‡∏≠‡∏á Drone Simulator Launcher
‡πÉ‡∏ä‡πâ PyInstaller ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå exe ‡∏û‡∏£‡πâ‡∏≠‡∏° dependencies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

Author: Build Script Generator
Date: July 2025
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_requirements():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PyInstaller ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ import
    try:
        result = subprocess.run([sys.executable, "-m", "PyInstaller", "--version"], 
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ PyInstaller ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: {result.stdout.strip()})")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå PyInstaller ‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...")
        try:
            result = subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], 
                                  check=True, capture_output=True, text=True)
            print("‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PyInstaller ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PyInstaller ‡πÑ‡∏î‡πâ: {e}")
            print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á: pip install pyinstaller")
            return False

def clean_build_folders():
    """‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå build ‡πÅ‡∏•‡∏∞ dist ‡πÄ‡∏Å‡πà‡∏≤"""
    folders_to_clean = ["build", "dist", "__pycache__"]
    for folder in folders_to_clean:
        if os.path.exists(folder):
            print(f"üßπ ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {folder}")
            shutil.rmtree(folder)

def get_project_files():
    """‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"""
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...")
    
    # ‡πÑ‡∏ü‡∏•‡πå Python ‡∏´‡∏•‡∏±‡∏Å - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    all_python_files = [
        "launcher.py",  # ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
        "license_manager.py",
        "license_dialog.py",
        "config.py",
        "drone_commands.py",
        "drone_controller.py", 
        "drone_gui_connector.py",
        "field_creator_gui_advanced.py",
        "improved_mission_pad_detector.py",
        "mission_pad_detector.py",
        "zmqRemoteApi.py"
    ]
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    python_files = []
    for file in all_python_files:
        if os.path.exists(file):
            python_files.append(file)
            print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file}")
        else:
            print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file} (‡∏Ç‡πâ‡∏≤‡∏°)")
    
    # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏ß‡∏° - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    all_data_folders = [
        ("create_field", "create_field"),
        ("export_model", "export_model"),
        ("keys", "keys"),
        ("mission_pad_templates", "mission_pad_templates"),
        ("Qrcode", "Qrcode")
    ]
    
    print("\nüìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:")
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    data_folders = []
    for src, dst in all_data_folders:
        full_path = os.path.abspath(src)
        if os.path.exists(src) and os.path.isdir(src):
            data_folders.append((src, dst))
            print(f"‚úÖ ‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {src} -> {full_path}")
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            try:
                contents = os.listdir(src)
                print(f"   üìã ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå/‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {len(contents)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                if len(contents) <= 5:  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                    for item in contents[:5]:
                        print(f"      - {item}")
                else:
                    print(f"      - {contents[0]}, {contents[1]}, ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(contents)-2} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            except PermissionError:
                print(f"   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô {src}")
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {src} -> {full_path}")
    
    # ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    all_additional_files = [
        ("requirements.txt", "."),
    ]
    
    print("\nüìÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:")
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    additional_files = []
    for src, dst in all_additional_files:
        if os.path.exists(src):
            additional_files.append((src, dst))
            print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: {src}")
        else:
            print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: {src} (‡∏Ç‡πâ‡∏≤‡∏°)")
    
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ: {len(python_files)} ‡πÑ‡∏ü‡∏•‡πå Python, {len(data_folders)} ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå, {len(additional_files)} ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    return python_files, data_folders, additional_files

def build_exe():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå exe"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á exe...")
    
    python_files, data_folders, additional_files = get_project_files()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢
    if not os.path.exists("launcher.py"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å launcher.py")
        return False
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á PyInstaller
    cmd = [
        sys.executable, "-m", "PyInstaller",  # ‡πÉ‡∏ä‡πâ python -m PyInstaller
        "--onefile",  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        "--console",  # ‡πÅ‡∏™‡∏î‡∏á console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô --windowed ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
        "--name", "DroneSimulatorLauncher",  # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå exe
        "--clean",  # ‡∏•‡∏ö cache ‡πÄ‡∏Å‡πà‡∏≤
        "--noconfirm",  # ‡πÑ‡∏°‡πà‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        "--paths", ".",  # ‡πÄ‡∏û‡∏¥‡πà‡∏° current directory ‡πÄ‡∏Ç‡πâ‡∏≤ path
        "--collect-all", "cv2",  # ‡∏£‡∏ß‡∏° OpenCV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        "--collect-all", "numpy",  # ‡∏£‡∏ß‡∏° NumPy ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        "--collect-all", "PIL",  # ‡∏£‡∏ß‡∏° Pillow ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        "--collect-submodules", "tkinter",  # ‡∏£‡∏ß‡∏° tkinter submodules
    ]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á) - ‡πÉ‡∏ä‡πâ os.pathsep ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
    for src_folder, dst_folder in data_folders:
        # ‡πÉ‡∏ä‡πâ path separator ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
        data_arg = f"{src_folder}{os.pathsep}{dst_folder}"
        cmd.extend(["--add-data", data_arg])
        print(f"üìÅ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {src_folder} -> {dst_folder}")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á)
    for src_file, dst_path in additional_files:
        data_arg = f"{src_file}{os.pathsep}{dst_path}"
        cmd.extend(["--add-data", data_arg])
        print(f"üìÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå: {src_file} -> {dst_path}")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° hidden imports ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
    hidden_imports = [
        "tkinter",
        "tkinter.messagebox",
        "tkinter.ttk",
        "tkinter.filedialog",
        "tkinter.simpledialog",
        "_tkinter",  # ‡πÄ‡∏û‡∏¥‡πà‡∏° _tkinter
    ]
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° hidden imports ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß
    optional_imports = [
        "numpy", 
        "zmq",
        "qrcode",
        "cryptography",
        "jwt",
        "yaml",
        "cbor2",
        "flask",
        "requests"
    ]
    
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenCV ‡πÅ‡∏•‡∏∞ PIL ‡πÉ‡∏ä‡πâ collect-all ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà hidden-import
    cv_pil_imports = ["cv2", "PIL", "zxingcpp", "djitellopy"]
    
    for import_name in optional_imports:
        try:
            __import__(import_name)
            hidden_imports.append(import_name)
            print(f"üì¶ ‡πÄ‡∏û‡∏¥‡πà‡∏° hidden import: {import_name}")
        except ImportError:
            print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ {import_name} (‡∏Ç‡πâ‡∏≤‡∏°)")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OpenCV, PIL ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
    for import_name in cv_pil_imports:
        try:
            __import__(import_name)
            print(f"üì¶ ‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ {import_name} (‡πÉ‡∏ä‡πâ collect-all)")
        except ImportError:
            print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ {import_name} (‡∏Ç‡πâ‡∏≤‡∏°)")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° hidden imports ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    for import_name in hidden_imports:
        cmd.extend(["--hidden-import", import_name])
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
    cmd.append("launcher.py")
    
    print("\nüìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô:")
    print(" ".join(cmd))
    print()
    
    # ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    try:
        print("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á build... (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà)")
        result = subprocess.run(cmd, check=True, capture_output=False, text=True)
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á exe ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        exe_path = "dist/DroneSimulatorLauncher.exe"
        if os.path.exists(exe_path):
            print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå exe ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà: {os.path.abspath(exe_path)}")
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
            size_mb = os.path.getsize(exe_path) / (1024 * 1024)
            print(f"üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {size_mb:.2f} MB")
        else:
            print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå exe ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô")
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö PyInstaller ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: pip install pyinstaller")
        return False

def create_spec_file():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .spec ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['launcher.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('create_field', 'create_field'),
        ('export_model', 'export_model'),
        ('keys', 'keys'),
        ('mission_pad_templates', 'mission_pad_templates'),
        ('Qrcode', 'Qrcode'),
        ('requirements.txt', '.'),
    ],
    hiddenimports=[
        'tkinter',
        'tkinter.messagebox',
        'cv2',
        'numpy',
        'PIL',
        'zmq',
        'qrcode',
        'zxingcpp',
        'cryptography',
        'jwt',
        'yaml',
        'cbor2',
        'djitellopy',
        'flask',
        'requests'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='DroneSimulatorLauncher',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)
'''
    
    with open("DroneSimulatorLauncher.spec", "w", encoding="utf-8") as f:
        f.write(spec_content)
    
    print("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå DroneSimulatorLauncher.spec ‡πÅ‡∏•‡πâ‡∏ß")
    print("üí° ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå .spec ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢: pyinstaller DroneSimulatorLauncher.spec")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üèóÔ∏è  Drone Simulator Launcher - Build Script")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if not os.path.exists("launcher.py"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå launcher.py")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå launcher.py")
        return False
    
    try:
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö requirements
        if not check_requirements():
            return False
        
        # 2. ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤
        clean_build_folders()
        
        # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .spec (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
        create_spec_file()
        
        # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á exe
        if build_exe():
            print("\nüéâ Build ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            print("üìÅ ‡πÑ‡∏ü‡∏•‡πå exe ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
            print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {os.path.abspath('dist/DroneSimulatorLauncher.exe')}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
            exe_path = "dist/DroneSimulatorLauncher.exe"
            if os.path.exists(exe_path):
                size_mb = os.path.getsize(exe_path) / (1024 * 1024)
                print(f"üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {size_mb:.2f} MB")
            
            return True
        else:
            print("\n‚ùå Build ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return False
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

if __name__ == "__main__":
    success = main()
    
    if success:
        input("\n‚úÖ ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å...")
    else:
        input("\n‚ùå ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å...")
